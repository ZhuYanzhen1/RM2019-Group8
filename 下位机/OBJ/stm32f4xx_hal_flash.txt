; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_hal_flash.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm32f4xx_hal_flash.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm32f4xx_hal_flash.crf HALLIB\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_flash.c]
                          THUMB

                          AREA ||i.FLASH_Program_Byte||, CODE, READONLY, ALIGN=2

                  FLASH_Program_Byte PROC
;;;694      */
;;;695    static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
000000  4a07              LDR      r2,|L1.32|
;;;696    {
;;;697      /* Check the parameters */
;;;698      assert_param(IS_FLASH_ADDRESS(Address));
;;;699      
;;;700      /* If the previous operation is completed, proceed to program the new data */
;;;701      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  6812              LDR      r2,[r2,#0]
000004  f4227240          BIC      r2,r2,#0x300
000008  4b05              LDR      r3,|L1.32|
00000a  601a              STR      r2,[r3,#0]
;;;702      FLASH->CR |= FLASH_PSIZE_BYTE;
00000c  461a              MOV      r2,r3
00000e  6812              LDR      r2,[r2,#0]
000010  601a              STR      r2,[r3,#0]
;;;703      FLASH->CR |= FLASH_CR_PG;
000012  461a              MOV      r2,r3
000014  6812              LDR      r2,[r2,#0]
000016  f0420201          ORR      r2,r2,#1
00001a  601a              STR      r2,[r3,#0]
;;;704    
;;;705      *(__IO uint8_t*)Address = Data;
00001c  7001              STRB     r1,[r0,#0]
;;;706    }
00001e  4770              BX       lr
;;;707    
                          ENDP

                  |L1.32|
                          DCD      0x40023c10

                          AREA ||i.FLASH_Program_DoubleWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_DoubleWord PROC
;;;618      */
;;;619    static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
000000  b510              PUSH     {r4,lr}
;;;620    {
;;;621      /* Check the parameters */
;;;622      assert_param(IS_FLASH_ADDRESS(Address));
;;;623      
;;;624      /* If the previous operation is completed, proceed to program the new data */
;;;625      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  4909              LDR      r1,|L2.40|
000004  6809              LDR      r1,[r1,#0]
000006  f4217140          BIC      r1,r1,#0x300
00000a  4c07              LDR      r4,|L2.40|
00000c  6021              STR      r1,[r4,#0]
;;;626      FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
00000e  4621              MOV      r1,r4
000010  6809              LDR      r1,[r1,#0]
000012  f4417140          ORR      r1,r1,#0x300
000016  6021              STR      r1,[r4,#0]
;;;627      FLASH->CR |= FLASH_CR_PG;
000018  4621              MOV      r1,r4
00001a  6809              LDR      r1,[r1,#0]
00001c  f0410101          ORR      r1,r1,#1
000020  6021              STR      r1,[r4,#0]
;;;628    
;;;629      *(__IO uint64_t*)Address = Data;
000022  6002              STR      r2,[r0,#0]
000024  6043              STR      r3,[r0,#4]
;;;630    }
000026  bd10              POP      {r4,pc}
;;;631    
                          ENDP

                  |L2.40|
                          DCD      0x40023c10

                          AREA ||i.FLASH_Program_HalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_HalfWord PROC
;;;669      */
;;;670    static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
000000  4a08              LDR      r2,|L3.36|
;;;671    {
;;;672      /* Check the parameters */
;;;673      assert_param(IS_FLASH_ADDRESS(Address));
;;;674      
;;;675      /* If the previous operation is completed, proceed to program the new data */
;;;676      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  6812              LDR      r2,[r2,#0]
000004  f4227240          BIC      r2,r2,#0x300
000008  4b06              LDR      r3,|L3.36|
00000a  601a              STR      r2,[r3,#0]
;;;677      FLASH->CR |= FLASH_PSIZE_HALF_WORD;
00000c  461a              MOV      r2,r3
00000e  6812              LDR      r2,[r2,#0]
000010  f4427280          ORR      r2,r2,#0x100
000014  601a              STR      r2,[r3,#0]
;;;678      FLASH->CR |= FLASH_CR_PG;
000016  461a              MOV      r2,r3
000018  6812              LDR      r2,[r2,#0]
00001a  f0420201          ORR      r2,r2,#1
00001e  601a              STR      r2,[r3,#0]
;;;679    
;;;680      *(__IO uint16_t*)Address = Data;
000020  8001              STRH     r1,[r0,#0]
;;;681    }
000022  4770              BX       lr
;;;682    
                          ENDP

                  |L3.36|
                          DCD      0x40023c10

                          AREA ||i.FLASH_Program_Word||, CODE, READONLY, ALIGN=2

                  FLASH_Program_Word PROC
;;;644      */
;;;645    static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
000000  4a08              LDR      r2,|L4.36|
;;;646    {
;;;647      /* Check the parameters */
;;;648      assert_param(IS_FLASH_ADDRESS(Address));
;;;649      
;;;650      /* If the previous operation is completed, proceed to program the new data */
;;;651      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  6812              LDR      r2,[r2,#0]
000004  f4227240          BIC      r2,r2,#0x300
000008  4b06              LDR      r3,|L4.36|
00000a  601a              STR      r2,[r3,#0]
;;;652      FLASH->CR |= FLASH_PSIZE_WORD;
00000c  461a              MOV      r2,r3
00000e  6812              LDR      r2,[r2,#0]
000010  f4427200          ORR      r2,r2,#0x200
000014  601a              STR      r2,[r3,#0]
;;;653      FLASH->CR |= FLASH_CR_PG;
000016  461a              MOV      r2,r3
000018  6812              LDR      r2,[r2,#0]
00001a  f0420201          ORR      r2,r2,#1
00001e  601a              STR      r2,[r3,#0]
;;;654    
;;;655      *(__IO uint32_t*)Address = Data;
000020  6001              STR      r1,[r0,#0]
;;;656    }
000022  4770              BX       lr
;;;657    
                          ENDP

                  |L4.36|
                          DCD      0x40023c10

                          AREA ||i.FLASH_SetErrorCode||, CODE, READONLY, ALIGN=2

                  FLASH_SetErrorCode PROC
;;;711      */
;;;712    static void FLASH_SetErrorCode(void)
000000  482a              LDR      r0,|L5.172|
;;;713    { 
;;;714      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  f3c01000          UBFX     r0,r0,#4,#1
000008  b140              CBZ      r0,|L5.28|
;;;715      {
;;;716       pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
00000a  4829              LDR      r0,|L5.176|
00000c  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00000e  f0400010          ORR      r0,r0,#0x10
000012  4927              LDR      r1,|L5.176|
000014  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;717       
;;;718       /* Clear FLASH write protection error pending bit */
;;;719       __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
000016  2010              MOVS     r0,#0x10
000018  4924              LDR      r1,|L5.172|
00001a  6008              STR      r0,[r1,#0]
                  |L5.28|
;;;720      }
;;;721      
;;;722      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
00001c  4823              LDR      r0,|L5.172|
00001e  6800              LDR      r0,[r0,#0]
000020  f3c01040          UBFX     r0,r0,#5,#1
000024  b140              CBZ      r0,|L5.56|
;;;723      {
;;;724       pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
000026  4822              LDR      r0,|L5.176|
000028  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00002a  f0400008          ORR      r0,r0,#8
00002e  4920              LDR      r1,|L5.176|
000030  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;725       
;;;726       /* Clear FLASH Programming alignment error pending bit */
;;;727       __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
000032  2020              MOVS     r0,#0x20
000034  491d              LDR      r1,|L5.172|
000036  6008              STR      r0,[r1,#0]
                  |L5.56|
;;;728      }
;;;729      
;;;730      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
000038  481c              LDR      r0,|L5.172|
00003a  6800              LDR      r0,[r0,#0]
00003c  f3c01080          UBFX     r0,r0,#6,#1
000040  b140              CBZ      r0,|L5.84|
;;;731      {
;;;732        pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
000042  481b              LDR      r0,|L5.176|
000044  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
000046  f0400004          ORR      r0,r0,#4
00004a  4919              LDR      r1,|L5.176|
00004c  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;733        
;;;734        /* Clear FLASH Programming parallelism error pending bit */
;;;735        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
00004e  2040              MOVS     r0,#0x40
000050  4916              LDR      r1,|L5.172|
000052  6008              STR      r0,[r1,#0]
                  |L5.84|
;;;736      }
;;;737      
;;;738      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
000054  4815              LDR      r0,|L5.172|
000056  6800              LDR      r0,[r0,#0]
000058  f3c010c0          UBFX     r0,r0,#7,#1
00005c  b140              CBZ      r0,|L5.112|
;;;739      {
;;;740        pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
00005e  4814              LDR      r0,|L5.176|
000060  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
000062  f0400002          ORR      r0,r0,#2
000066  4912              LDR      r1,|L5.176|
000068  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;741        
;;;742        /* Clear FLASH Programming sequence error pending bit */
;;;743        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
00006a  2080              MOVS     r0,#0x80
00006c  490f              LDR      r1,|L5.172|
00006e  6008              STR      r0,[r1,#0]
                  |L5.112|
;;;744      }
;;;745      
;;;746      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
000070  480e              LDR      r0,|L5.172|
000072  6800              LDR      r0,[r0,#0]
000074  f3c02000          UBFX     r0,r0,#8,#1
000078  b148              CBZ      r0,|L5.142|
;;;747      {
;;;748        pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
00007a  480d              LDR      r0,|L5.176|
00007c  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00007e  f0400001          ORR      r0,r0,#1
000082  490b              LDR      r1,|L5.176|
000084  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;749        
;;;750        /* Clear FLASH Proprietary readout protection error pending bit */
;;;751        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
000086  f44f7080          MOV      r0,#0x100
00008a  4908              LDR      r1,|L5.172|
00008c  6008              STR      r0,[r1,#0]
                  |L5.142|
;;;752      }
;;;753      
;;;754      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
00008e  4807              LDR      r0,|L5.172|
000090  6800              LDR      r0,[r0,#0]
000092  f3c00040          UBFX     r0,r0,#1,#1
000096  b140              CBZ      r0,|L5.170|
;;;755      {
;;;756        pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
000098  4805              LDR      r0,|L5.176|
00009a  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00009c  f0400020          ORR      r0,r0,#0x20
0000a0  4903              LDR      r1,|L5.176|
0000a2  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;757        
;;;758        /* Clear FLASH Operation error pending bit */
;;;759        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
0000a4  2002              MOVS     r0,#2
0000a6  4901              LDR      r1,|L5.172|
0000a8  6008              STR      r0,[r1,#0]
                  |L5.170|
;;;760      }
;;;761    }
0000aa  4770              BX       lr
;;;762    
                          ENDP

                  |L5.172|
                          DCD      0x40023c0c
                  |L5.176|
                          DCD      pFlash

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;562      */
;;;563    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;564    { 
000002  4604              MOV      r4,r0
;;;565      uint32_t tickstart = 0;
000004  2500              MOVS     r5,#0
;;;566      
;;;567      /* Clear Error Code */
;;;568      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000006  2000              MOVS     r0,#0
000008  4917              LDR      r1,|L6.104|
00000a  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;569      
;;;570      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;571         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;572         flag will be set */
;;;573      /* Get tick */
;;;574      tickstart = HAL_GetTick();
00000c  f7fffffe          BL       HAL_GetTick
000010  4605              MOV      r5,r0
;;;575    
;;;576      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
000012  e009              B        |L6.40|
                  |L6.20|
;;;577      { 
;;;578        if(Timeout != HAL_MAX_DELAY)
000014  1c60              ADDS     r0,r4,#1
000016  b138              CBZ      r0,|L6.40|
;;;579        {
;;;580          if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
000018  b124              CBZ      r4,|L6.36|
00001a  f7fffffe          BL       HAL_GetTick
00001e  1b40              SUBS     r0,r0,r5
000020  42a0              CMP      r0,r4
000022  d901              BLS      |L6.40|
                  |L6.36|
;;;581          {
;;;582            return HAL_TIMEOUT;
000024  2003              MOVS     r0,#3
                  |L6.38|
;;;583          }
;;;584        } 
;;;585      }
;;;586    
;;;587      /* Check FLASH End of Operation flag  */
;;;588      if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
;;;589      {
;;;590        /* Clear FLASH End of Operation pending bit */
;;;591        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
;;;592      }
;;;593      
;;;594      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
;;;595                               FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
;;;596      {
;;;597        /*Save the error code*/
;;;598        FLASH_SetErrorCode();
;;;599        return HAL_ERROR;
;;;600      }
;;;601    
;;;602      /* If there is no error flag set */
;;;603      return HAL_OK;
;;;604      
;;;605    }  
000026  bd70              POP      {r4-r6,pc}
                  |L6.40|
000028  4810              LDR      r0,|L6.108|
00002a  6800              LDR      r0,[r0,#0]            ;576
00002c  f3c04000          UBFX     r0,r0,#16,#1          ;576
000030  2800              CMP      r0,#0                 ;576
000032  d1ef              BNE      |L6.20|
000034  480d              LDR      r0,|L6.108|
000036  6800              LDR      r0,[r0,#0]            ;588
000038  f0000001          AND      r0,r0,#1              ;588
00003c  b110              CBZ      r0,|L6.68|
00003e  2001              MOVS     r0,#1                 ;591
000040  490a              LDR      r1,|L6.108|
000042  6008              STR      r0,[r1,#0]            ;591
                  |L6.68|
000044  4809              LDR      r0,|L6.108|
000046  6800              LDR      r0,[r0,#0]            ;594
000048  f40070f9          AND      r0,r0,#0x1f2          ;594
00004c  f5b07ff9          CMP      r0,#0x1f2             ;594
000050  d101              BNE      |L6.86|
000052  2001              MOVS     r0,#1                 ;594
000054  e000              B        |L6.88|
                  |L6.86|
000056  2000              MOVS     r0,#0                 ;594
                  |L6.88|
000058  b118              CBZ      r0,|L6.98|
00005a  f7fffffe          BL       FLASH_SetErrorCode
00005e  2001              MOVS     r0,#1                 ;599
000060  e7e1              B        |L6.38|
                  |L6.98|
000062  2000              MOVS     r0,#0                 ;603
000064  e7df              B        |L6.38|
;;;606    
                          ENDP

000066  0000              DCW      0x0000
                  |L6.104|
                          DCD      pFlash
                  |L6.108|
                          DCD      0x40023c0c

                          AREA ||i.HAL_FLASH_EndOfOperationCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_EndOfOperationCallback PROC
;;;396      */
;;;397    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
000000  b508              PUSH     {r3,lr}
;;;398    {
;;;399      /* Prevent unused argument(s) compilation warning */
;;;400      __IO uint32_t tmpreg = 0x00;
000002  2100              MOVS     r1,#0
000004  9100              STR      r1,[sp,#0]
;;;401      UNUSED(tmpreg);
000006  bf00              NOP      
;;;402      /* NOTE : This function Should not be modified, when the callback is needed,
;;;403                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;404       */ 
;;;405    }
000008  bd08              POP      {r3,pc}
;;;406    
                          ENDP


                          AREA ||i.HAL_FLASH_GetError||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_GetError PROC
;;;548      */
;;;549    uint32_t HAL_FLASH_GetError(void)
000000  4801              LDR      r0,|L8.8|
;;;550    { 
;;;551       return pFlash.ErrorCode;
000002  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
;;;552    }  
000004  4770              BX       lr
;;;553      
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      pFlash

                          AREA ||i.HAL_FLASH_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_IRQHandler PROC
;;;278      */
;;;279    void HAL_FLASH_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;280    {
;;;281      uint32_t addresstmp = 0;
000002  2400              MOVS     r4,#0
;;;282      
;;;283      /* Check FLASH operation error flags */
;;;284      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
000004  4843              LDR      r0,|L9.276|
000006  6800              LDR      r0,[r0,#0]
000008  f40070f9          AND      r0,r0,#0x1f2
00000c  f5b07ff9          CMP      r0,#0x1f2
000010  d101              BNE      |L9.22|
000012  2001              MOVS     r0,#1
000014  e000              B        |L9.24|
                  |L9.22|
000016  2000              MOVS     r0,#0
                  |L9.24|
000018  b1d8              CBZ      r0,|L9.82|
;;;285        FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
;;;286      {
;;;287        if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
00001a  483f              LDR      r0,|L9.280|
00001c  7800              LDRB     r0,[r0,#0]  ; pFlash
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L9.48|
;;;288        {
;;;289          /*return the faulty sector*/
;;;290          addresstmp = pFlash.Sector;
000022  483d              LDR      r0,|L9.280|
000024  68c4              LDR      r4,[r0,#0xc]  ; pFlash
;;;291          pFlash.Sector = 0xFFFFFFFF;
000026  f04f30ff          MOV      r0,#0xffffffff
00002a  493b              LDR      r1,|L9.280|
00002c  60c8              STR      r0,[r1,#0xc]  ; pFlash
00002e  e008              B        |L9.66|
                  |L9.48|
;;;292        }
;;;293        else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
000030  4839              LDR      r0,|L9.280|
000032  7800              LDRB     r0,[r0,#0]  ; pFlash
000034  2802              CMP      r0,#2
000036  d102              BNE      |L9.62|
;;;294        {
;;;295          /*return the faulty bank*/
;;;296          addresstmp = pFlash.Bank;
000038  4837              LDR      r0,|L9.280|
00003a  6904              LDR      r4,[r0,#0x10]  ; pFlash
00003c  e001              B        |L9.66|
                  |L9.62|
;;;297        }
;;;298        else
;;;299        {
;;;300          /*return the faulty address*/
;;;301          addresstmp = pFlash.Address;
00003e  4836              LDR      r0,|L9.280|
000040  6944              LDR      r4,[r0,#0x14]  ; pFlash
                  |L9.66|
;;;302        }
;;;303        
;;;304        /*Save the Error code*/
;;;305        FLASH_SetErrorCode();
000042  f7fffffe          BL       FLASH_SetErrorCode
;;;306        
;;;307        /* FLASH error interrupt user callback */
;;;308        HAL_FLASH_OperationErrorCallback(addresstmp);
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
;;;309        
;;;310        /*Stop the procedure ongoing*/
;;;311        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00004c  2000              MOVS     r0,#0
00004e  4932              LDR      r1,|L9.280|
000050  7008              STRB     r0,[r1,#0]
                  |L9.82|
;;;312      }
;;;313      
;;;314      /* Check FLASH End of Operation flag  */
;;;315      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
000052  4830              LDR      r0,|L9.276|
000054  6800              LDR      r0,[r0,#0]
000056  f0000001          AND      r0,r0,#1
00005a  2800              CMP      r0,#0
00005c  d03e              BEQ      |L9.220|
;;;316      {
;;;317        /* Clear FLASH End of Operation pending bit */
;;;318        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
00005e  2001              MOVS     r0,#1
000060  492c              LDR      r1,|L9.276|
000062  6008              STR      r0,[r1,#0]
;;;319        
;;;320        if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
000064  482c              LDR      r0,|L9.280|
000066  7800              LDRB     r0,[r0,#0]  ; pFlash
000068  2801              CMP      r0,#1
00006a  d125              BNE      |L9.184|
;;;321        {
;;;322          /*Nb of sector to erased can be decreased*/
;;;323          pFlash.NbSectorsToErase--;
00006c  482a              LDR      r0,|L9.280|
00006e  6840              LDR      r0,[r0,#4]  ; pFlash
000070  1e40              SUBS     r0,r0,#1
000072  4929              LDR      r1,|L9.280|
000074  6048              STR      r0,[r1,#4]  ; pFlash
;;;324          
;;;325          /* Check if there are still sectors to erase*/
;;;326          if(pFlash.NbSectorsToErase != 0)
000076  4608              MOV      r0,r1
000078  6840              LDR      r0,[r0,#4]  ; pFlash
00007a  b180              CBZ      r0,|L9.158|
;;;327          {
;;;328            addresstmp = pFlash.Sector;
00007c  4608              MOV      r0,r1
00007e  68c4              LDR      r4,[r0,#0xc]  ; pFlash
;;;329            /*Indicate user which sector has been erased*/
;;;330            HAL_FLASH_EndOfOperationCallback(addresstmp);
000080  4620              MOV      r0,r4
000082  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;331            
;;;332            /*Increment sector number*/
;;;333            pFlash.Sector++;
000086  4824              LDR      r0,|L9.280|
000088  68c0              LDR      r0,[r0,#0xc]  ; pFlash
00008a  1c40              ADDS     r0,r0,#1
00008c  4922              LDR      r1,|L9.280|
00008e  60c8              STR      r0,[r1,#0xc]  ; pFlash
;;;334            addresstmp = pFlash.Sector;
000090  4608              MOV      r0,r1
000092  68c4              LDR      r4,[r0,#0xc]  ; pFlash
;;;335            FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
000094  7a01              LDRB     r1,[r0,#8]  ; pFlash
000096  4620              MOV      r0,r4
000098  f7fffffe          BL       FLASH_Erase_Sector
00009c  e01e              B        |L9.220|
                  |L9.158|
;;;336          }
;;;337          else
;;;338          {
;;;339            /*No more sectors to Erase, user callback can be called.*/
;;;340            /*Reset Sector and stop Erase sectors procedure*/
;;;341            pFlash.Sector = addresstmp = 0xFFFFFFFF;
00009e  f04f30ff          MOV      r0,#0xffffffff
0000a2  4604              MOV      r4,r0
0000a4  491c              LDR      r1,|L9.280|
0000a6  60c8              STR      r0,[r1,#0xc]  ; pFlash
;;;342            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
0000a8  2000              MOVS     r0,#0
0000aa  7008              STRB     r0,[r1,#0]
;;;343            
;;;344            /* Flush the caches to be sure of the data consistency */
;;;345            FLASH_FlushCaches() ;
0000ac  f7fffffe          BL       FLASH_FlushCaches
;;;346                    
;;;347            /* FLASH EOP interrupt user callback */
;;;348            HAL_FLASH_EndOfOperationCallback(addresstmp);
0000b0  4620              MOV      r0,r4
0000b2  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000b6  e011              B        |L9.220|
                  |L9.184|
;;;349          }
;;;350        }
;;;351        else 
;;;352        {
;;;353          if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
0000b8  4817              LDR      r0,|L9.280|
0000ba  7800              LDRB     r0,[r0,#0]  ; pFlash
0000bc  2802              CMP      r0,#2
0000be  d106              BNE      |L9.206|
;;;354          {
;;;355            /* MassErase ended. Return the selected bank */
;;;356            /* Flush the caches to be sure of the data consistency */
;;;357            FLASH_FlushCaches() ;
0000c0  f7fffffe          BL       FLASH_FlushCaches
;;;358    
;;;359            /* FLASH EOP interrupt user callback */
;;;360            HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
0000c4  4914              LDR      r1,|L9.280|
0000c6  6908              LDR      r0,[r1,#0x10]  ; pFlash
0000c8  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000cc  e003              B        |L9.214|
                  |L9.206|
;;;361          }
;;;362          else
;;;363          {
;;;364            /*Program ended. Return the selected address*/
;;;365            /* FLASH EOP interrupt user callback */
;;;366            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
0000ce  4912              LDR      r1,|L9.280|
0000d0  6948              LDR      r0,[r1,#0x14]  ; pFlash
0000d2  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
                  |L9.214|
;;;367          }
;;;368          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
0000d6  2000              MOVS     r0,#0
0000d8  490f              LDR      r1,|L9.280|
0000da  7008              STRB     r0,[r1,#0]
                  |L9.220|
;;;369        }
;;;370      }
;;;371      
;;;372      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
0000dc  480e              LDR      r0,|L9.280|
0000de  7800              LDRB     r0,[r0,#0]  ; pFlash
0000e0  b9b8              CBNZ     r0,|L9.274|
;;;373      {
;;;374        /* Operation is completed, disable the PG, SER, SNB and MER Bits */
;;;375        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
0000e2  480c              LDR      r0,|L9.276|
0000e4  1d00              ADDS     r0,r0,#4
0000e6  6800              LDR      r0,[r0,#0]
0000e8  f24801ff          MOV      r1,#0x80ff
0000ec  4388              BICS     r0,r0,r1
0000ee  4909              LDR      r1,|L9.276|
0000f0  1d09              ADDS     r1,r1,#4
0000f2  6008              STR      r0,[r1,#0]
;;;376    
;;;377        /* Disable End of FLASH Operation interrupt */
;;;378        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
0000f4  4608              MOV      r0,r1
0000f6  6800              LDR      r0,[r0,#0]
0000f8  f0207080          BIC      r0,r0,#0x1000000
0000fc  6008              STR      r0,[r1,#0]
;;;379        
;;;380        /* Disable Error source interrupt */
;;;381        __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
0000fe  4608              MOV      r0,r1
000100  6800              LDR      r0,[r0,#0]
000102  f0207000          BIC      r0,r0,#0x2000000
000106  6008              STR      r0,[r1,#0]
;;;382        
;;;383        /* Process Unlocked */
;;;384        __HAL_UNLOCK(&pFlash);
000108  bf00              NOP      
00010a  2000              MOVS     r0,#0
00010c  4902              LDR      r1,|L9.280|
00010e  7608              STRB     r0,[r1,#0x18]
000110  bf00              NOP      
                  |L9.274|
;;;385      }
;;;386    }
000112  bd10              POP      {r4,pc}
;;;387    
                          ENDP

                  |L9.276|
                          DCD      0x40023c0c
                  |L9.280|
                          DCD      pFlash

                          AREA ||i.HAL_FLASH_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Lock PROC
;;;467      */
;;;468    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000000  4803              LDR      r0,|L10.16|
;;;469    {
;;;470      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;471      FLASH->CR |= FLASH_CR_LOCK;
000002  6800              LDR      r0,[r0,#0]
000004  f0404000          ORR      r0,r0,#0x80000000
000008  4901              LDR      r1,|L10.16|
00000a  6008              STR      r0,[r1,#0]
;;;472      
;;;473      return HAL_OK;  
00000c  2000              MOVS     r0,#0
;;;474    }
00000e  4770              BX       lr
;;;475    
                          ENDP

                  |L10.16|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_OB_Launch||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Launch PROC
;;;511      */
;;;512    HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
000000  b510              PUSH     {r4,lr}
;;;513    {
;;;514      /* Set the OPTSTRT bit in OPTCR register */
;;;515      *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
000002  4805              LDR      r0,|L11.24|
000004  7800              LDRB     r0,[r0,#0]
000006  f0400002          ORR      r0,r0,#2
00000a  4903              LDR      r1,|L11.24|
00000c  7008              STRB     r0,[r1,#0]
;;;516    
;;;517      /* Wait for last operation to be completed */
;;;518      return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
00000e  f24c3050          MOV      r0,#0xc350
000012  f7fffffe          BL       FLASH_WaitForLastOperation
;;;519    }
000016  bd10              POP      {r4,pc}
;;;520    
                          ENDP

                  |L11.24|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Lock PROC
;;;499      */
;;;500    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L12.16|
;;;501    {
;;;502      /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
;;;503      FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L12.16|
00000a  6008              STR      r0,[r1,#0]
;;;504      
;;;505      return HAL_OK;  
00000c  2000              MOVS     r0,#0
;;;506    }
00000e  4770              BX       lr
;;;507    
                          ENDP

                  |L12.16|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Unlock PROC
;;;479      */
;;;480    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
000000  4807              LDR      r0,|L13.32|
;;;481    {
;;;482      if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b130              CBZ      r0,|L13.24|
;;;483      {
;;;484        /* Authorizes the Option Byte register programming */
;;;485        FLASH->OPTKEYR = FLASH_OPT_KEY1;
00000a  4806              LDR      r0,|L13.36|
00000c  4904              LDR      r1,|L13.32|
00000e  390c              SUBS     r1,r1,#0xc
000010  6008              STR      r0,[r1,#0]
;;;486        FLASH->OPTKEYR = FLASH_OPT_KEY2;
000012  4805              LDR      r0,|L13.40|
000014  6008              STR      r0,[r1,#0]
000016  e001              B        |L13.28|
                  |L13.24|
;;;487      }
;;;488      else
;;;489      {
;;;490        return HAL_ERROR;
000018  2001              MOVS     r0,#1
                  |L13.26|
;;;491      }  
;;;492      
;;;493      return HAL_OK;  
;;;494    }
00001a  4770              BX       lr
                  |L13.28|
00001c  2000              MOVS     r0,#0                 ;493
00001e  e7fc              B        |L13.26|
;;;495    
                          ENDP

                  |L13.32|
                          DCD      0x40023c14
                  |L13.36|
                          DCD      0x08192a3b
                  |L13.40|
                          DCD      0x4c5d6e7f

                          AREA ||i.HAL_FLASH_OperationErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OperationErrorCallback PROC
;;;414      */
;;;415    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
000000  b508              PUSH     {r3,lr}
;;;416    {
;;;417      /* Prevent unused argument(s) compilation warning */
;;;418      __IO uint32_t tmpreg = 0x00;
000002  2100              MOVS     r1,#0
000004  9100              STR      r1,[sp,#0]
;;;419      UNUSED(tmpreg);
000006  bf00              NOP      
;;;420      /* NOTE : This function Should not be modified, when the callback is needed,
;;;421                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;422       */ 
;;;423    }
000008  bd08              POP      {r3,pc}
;;;424    
                          ENDP


                          AREA ||i.HAL_FLASH_Program||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program PROC
;;;173      */
;;;174    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;175    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;176      HAL_StatusTypeDef status = HAL_ERROR;
00000c  f04f0801          MOV      r8,#1
;;;177      
;;;178      /* Process Locked */
;;;179      __HAL_LOCK(&pFlash);
000010  bf00              NOP      
000012  481f              LDR      r0,|L15.144|
000014  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000016  2801              CMP      r0,#1
000018  d102              BNE      |L15.32|
00001a  2002              MOVS     r0,#2
                  |L15.28|
;;;180      
;;;181      /* Check the parameters */
;;;182      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;183      
;;;184      /* Wait for last operation to be completed */
;;;185      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;186      
;;;187      if(status == HAL_OK)
;;;188      {
;;;189        if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
;;;190        {
;;;191          /*Program byte (8-bit) at a specified address.*/
;;;192          FLASH_Program_Byte(Address, (uint8_t) Data);
;;;193        }
;;;194        else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;195        {
;;;196          /*Program halfword (16-bit) at a specified address.*/
;;;197          FLASH_Program_HalfWord(Address, (uint16_t) Data);
;;;198        }
;;;199        else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;200        {
;;;201          /*Program word (32-bit) at a specified address.*/
;;;202          FLASH_Program_Word(Address, (uint32_t) Data);
;;;203        }
;;;204        else
;;;205        {
;;;206          /*Program double word (64-bit) at a specified address.*/
;;;207          FLASH_Program_DoubleWord(Address, Data);
;;;208        }
;;;209        
;;;210        /* Wait for last operation to be completed */
;;;211        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;212        
;;;213        /* If the program operation is completed, disable the PG Bit */
;;;214        FLASH->CR &= (~FLASH_CR_PG);  
;;;215      }
;;;216      
;;;217      /* Process Unlocked */
;;;218      __HAL_UNLOCK(&pFlash);
;;;219      
;;;220      return status;
;;;221    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L15.32|
000020  2001              MOVS     r0,#1                 ;179
000022  491b              LDR      r1,|L15.144|
000024  7608              STRB     r0,[r1,#0x18]         ;179
000026  bf00              NOP                            ;179
000028  f24c3050          MOV      r0,#0xc350            ;185
00002c  f7fffffe          BL       FLASH_WaitForLastOperation
000030  4680              MOV      r8,r0                 ;185
000032  f1b80f00          CMP      r8,#0                 ;187
000036  d123              BNE      |L15.128|
000038  b926              CBNZ     r6,|L15.68|
00003a  b2e1              UXTB     r1,r4                 ;192
00003c  4638              MOV      r0,r7                 ;192
00003e  f7fffffe          BL       FLASH_Program_Byte
000042  e012              B        |L15.106|
                  |L15.68|
000044  2e01              CMP      r6,#1                 ;194
000046  d104              BNE      |L15.82|
000048  b2a1              UXTH     r1,r4                 ;197
00004a  4638              MOV      r0,r7                 ;197
00004c  f7fffffe          BL       FLASH_Program_HalfWord
000050  e00b              B        |L15.106|
                  |L15.82|
000052  2e02              CMP      r6,#2                 ;199
000054  d104              BNE      |L15.96|
000056  4621              MOV      r1,r4                 ;202
000058  4638              MOV      r0,r7                 ;202
00005a  f7fffffe          BL       FLASH_Program_Word
00005e  e004              B        |L15.106|
                  |L15.96|
000060  4622              MOV      r2,r4                 ;207
000062  462b              MOV      r3,r5                 ;207
000064  4638              MOV      r0,r7                 ;207
000066  f7fffffe          BL       FLASH_Program_DoubleWord
                  |L15.106|
00006a  f24c3050          MOV      r0,#0xc350            ;211
00006e  f7fffffe          BL       FLASH_WaitForLastOperation
000072  4680              MOV      r8,r0                 ;211
000074  4807              LDR      r0,|L15.148|
000076  6800              LDR      r0,[r0,#0]            ;214
000078  f0200001          BIC      r0,r0,#1              ;214
00007c  4905              LDR      r1,|L15.148|
00007e  6008              STR      r0,[r1,#0]            ;214
                  |L15.128|
000080  bf00              NOP                            ;218
000082  2000              MOVS     r0,#0                 ;218
000084  4902              LDR      r1,|L15.144|
000086  7608              STRB     r0,[r1,#0x18]         ;218
000088  bf00              NOP                            ;218
00008a  4640              MOV      r0,r8                 ;220
00008c  e7c6              B        |L15.28|
;;;222    
                          ENDP

00008e  0000              DCW      0x0000
                  |L15.144|
                          DCD      pFlash
                  |L15.148|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_Program_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program_IT PROC
;;;231      */
;;;232    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;233    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;234      HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;235      
;;;236      /* Process Locked */
;;;237      __HAL_LOCK(&pFlash);
000010  bf00              NOP      
000012  481b              LDR      r0,|L16.128|
000014  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000016  2801              CMP      r0,#1
000018  d102              BNE      |L16.32|
00001a  2002              MOVS     r0,#2
                  |L16.28|
;;;238    
;;;239      /* Check the parameters */
;;;240      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;241    
;;;242      /* Enable End of FLASH Operation interrupt */
;;;243      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
;;;244      
;;;245      /* Enable Error source interrupt */
;;;246      __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
;;;247    
;;;248      pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
;;;249      pFlash.Address = Address;
;;;250    
;;;251      if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
;;;252      {
;;;253        /*Program byte (8-bit) at a specified address.*/
;;;254          FLASH_Program_Byte(Address, (uint8_t) Data);
;;;255      }
;;;256      else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;257      {
;;;258        /*Program halfword (16-bit) at a specified address.*/
;;;259        FLASH_Program_HalfWord(Address, (uint16_t) Data);
;;;260      }
;;;261      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;262      {
;;;263        /*Program word (32-bit) at a specified address.*/
;;;264        FLASH_Program_Word(Address, (uint32_t) Data);
;;;265      }
;;;266      else
;;;267      {
;;;268        /*Program double word (64-bit) at a specified address.*/
;;;269        FLASH_Program_DoubleWord(Address, Data);
;;;270      }
;;;271    
;;;272      return status;
;;;273    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L16.32|
000020  2001              MOVS     r0,#1                 ;237
000022  4917              LDR      r1,|L16.128|
000024  7608              STRB     r0,[r1,#0x18]         ;237
000026  bf00              NOP                            ;237
000028  4816              LDR      r0,|L16.132|
00002a  6800              LDR      r0,[r0,#0]            ;243
00002c  f0407080          ORR      r0,r0,#0x1000000      ;243
000030  4914              LDR      r1,|L16.132|
000032  6008              STR      r0,[r1,#0]            ;243
000034  4608              MOV      r0,r1                 ;246
000036  6800              LDR      r0,[r0,#0]            ;246
000038  f0407000          ORR      r0,r0,#0x2000000      ;246
00003c  6008              STR      r0,[r1,#0]            ;246
00003e  2003              MOVS     r0,#3                 ;248
000040  490f              LDR      r1,|L16.128|
000042  7008              STRB     r0,[r1,#0]            ;248
000044  4608              MOV      r0,r1                 ;249
000046  6147              STR      r7,[r0,#0x14]         ;249  ; pFlash
000048  b926              CBNZ     r6,|L16.84|
00004a  b2e1              UXTB     r1,r4                 ;254
00004c  4638              MOV      r0,r7                 ;254
00004e  f7fffffe          BL       FLASH_Program_Byte
000052  e012              B        |L16.122|
                  |L16.84|
000054  2e01              CMP      r6,#1                 ;256
000056  d104              BNE      |L16.98|
000058  b2a1              UXTH     r1,r4                 ;259
00005a  4638              MOV      r0,r7                 ;259
00005c  f7fffffe          BL       FLASH_Program_HalfWord
000060  e00b              B        |L16.122|
                  |L16.98|
000062  2e02              CMP      r6,#2                 ;261
000064  d104              BNE      |L16.112|
000066  4621              MOV      r1,r4                 ;264
000068  4638              MOV      r0,r7                 ;264
00006a  f7fffffe          BL       FLASH_Program_Word
00006e  e004              B        |L16.122|
                  |L16.112|
000070  4622              MOV      r2,r4                 ;269
000072  462b              MOV      r3,r5                 ;269
000074  4638              MOV      r0,r7                 ;269
000076  f7fffffe          BL       FLASH_Program_DoubleWord
                  |L16.122|
00007a  4640              MOV      r0,r8                 ;272
00007c  e7ce              B        |L16.28|
;;;274    
                          ENDP

00007e  0000              DCW      0x0000
                  |L16.128|
                          DCD      pFlash
                  |L16.132|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Unlock PROC
;;;447      */
;;;448    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000000  4807              LDR      r0,|L17.32|
;;;449    {
;;;450      if((FLASH->CR & FLASH_CR_LOCK) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  f0004000          AND      r0,r0,#0x80000000
000008  b130              CBZ      r0,|L17.24|
;;;451      {
;;;452        /* Authorize the FLASH Registers access */
;;;453        FLASH->KEYR = FLASH_KEY1;
00000a  4806              LDR      r0,|L17.36|
00000c  4904              LDR      r1,|L17.32|
00000e  390c              SUBS     r1,r1,#0xc
000010  6008              STR      r0,[r1,#0]
;;;454        FLASH->KEYR = FLASH_KEY2;
000012  4805              LDR      r0,|L17.40|
000014  6008              STR      r0,[r1,#0]
000016  e001              B        |L17.28|
                  |L17.24|
;;;455      }
;;;456      else
;;;457      {
;;;458        return HAL_ERROR;
000018  2001              MOVS     r0,#1
                  |L17.26|
;;;459      }
;;;460      
;;;461      return HAL_OK; 
;;;462    }
00001a  4770              BX       lr
                  |L17.28|
00001c  2000              MOVS     r0,#0                 ;461
00001e  e7fc              B        |L17.26|
;;;463    
                          ENDP

                  |L17.32|
                          DCD      0x40023c10
                  |L17.36|
                          DCD      0x45670123
                  |L17.40|
                          DCD      0xcdef89ab

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pFlash
                          %        32

;*** Start embedded assembler ***

#line 1 "HALLIB\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REVSH|
#line 402
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____RRX|
#line 587
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
