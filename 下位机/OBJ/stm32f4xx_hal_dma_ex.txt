; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_hal_dma_ex.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm32f4xx_hal_dma_ex.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm32f4xx_hal_dma_ex.crf HALLIB\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dma_ex.c]
                          THUMB

                          AREA ||i.DMA_MultiBufferSetConfig||, CODE, READONLY, ALIGN=1

                  DMA_MultiBufferSetConfig PROC
;;;268      */
;;;269    static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b510              PUSH     {r4,lr}
;;;270    {  
;;;271      /* Configure DMA Stream data length */
;;;272      hdma->Instance->NDTR = DataLength;
000002  6804              LDR      r4,[r0,#0]
000004  6063              STR      r3,[r4,#4]
;;;273      
;;;274      /* Peripheral to Memory */
;;;275      if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
000006  6884              LDR      r4,[r0,#8]
000008  2c40              CMP      r4,#0x40
00000a  d104              BNE      |L1.22|
;;;276      {   
;;;277        /* Configure DMA Stream destination address */
;;;278        hdma->Instance->PAR = DstAddress;
00000c  6804              LDR      r4,[r0,#0]
00000e  60a2              STR      r2,[r4,#8]
;;;279        
;;;280        /* Configure DMA Stream source address */
;;;281        hdma->Instance->M0AR = SrcAddress;
000010  6804              LDR      r4,[r0,#0]
000012  60e1              STR      r1,[r4,#0xc]
000014  e003              B        |L1.30|
                  |L1.22|
;;;282      }
;;;283      /* Memory to Peripheral */
;;;284      else
;;;285      {
;;;286        /* Configure DMA Stream source address */
;;;287        hdma->Instance->PAR = SrcAddress;
000016  6804              LDR      r4,[r0,#0]
000018  60a1              STR      r1,[r4,#8]
;;;288        
;;;289        /* Configure DMA Stream destination address */
;;;290        hdma->Instance->M0AR = DstAddress;
00001a  6804              LDR      r4,[r0,#0]
00001c  60e2              STR      r2,[r4,#0xc]
                  |L1.30|
;;;291      }
;;;292    }
00001e  bd10              POP      {r4,pc}
;;;293    
                          ENDP


                          AREA ||i.HAL_DMAEx_ChangeMemory||, CODE, READONLY, ALIGN=1

                  HAL_DMAEx_ChangeMemory PROC
;;;231      */
;;;232    HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
000000  4603              MOV      r3,r0
;;;233    {
;;;234      if(memory == MEMORY0)
000002  b912              CBNZ     r2,|L2.10|
;;;235      {
;;;236        /* change the memory0 address */
;;;237        hdma->Instance->M0AR = Address;
000004  6818              LDR      r0,[r3,#0]
000006  60c1              STR      r1,[r0,#0xc]
000008  e001              B        |L2.14|
                  |L2.10|
;;;238      }
;;;239      else
;;;240      {
;;;241        /* change the memory1 address */
;;;242        hdma->Instance->M1AR = Address;
00000a  6818              LDR      r0,[r3,#0]
00000c  6101              STR      r1,[r0,#0x10]
                  |L2.14|
;;;243      }
;;;244    
;;;245      return HAL_OK;
00000e  2000              MOVS     r0,#0
;;;246    }
000010  4770              BX       lr
;;;247    
                          ENDP


                          AREA ||i.HAL_DMAEx_MultiBufferStart||, CODE, READONLY, ALIGN=1

                  HAL_DMAEx_MultiBufferStart PROC
;;;118      */
;;;119    HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;120    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
00000c  f8dd8018          LDR      r8,[sp,#0x18]
;;;121      /* Process Locked */
;;;122      __HAL_LOCK(hdma);
000010  bf00              NOP      
000012  f8940034          LDRB     r0,[r4,#0x34]
000016  2801              CMP      r0,#1
000018  d102              BNE      |L3.32|
00001a  2002              MOVS     r0,#2
                  |L3.28|
;;;123    
;;;124      /* Current memory buffer used is Memory 0 */
;;;125      if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
;;;126      {
;;;127        hdma->State = HAL_DMA_STATE_BUSY_MEM0;
;;;128      }
;;;129      /* Current memory buffer used is Memory 1 */
;;;130      else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
;;;131      {
;;;132        hdma->State = HAL_DMA_STATE_BUSY_MEM1;
;;;133      }
;;;134    
;;;135       /* Check the parameters */
;;;136      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;137    
;;;138      /* Disable the peripheral */
;;;139      __HAL_DMA_DISABLE(hdma);  
;;;140    
;;;141      /* Enable the double buffer mode */
;;;142      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
;;;143    
;;;144      /* Configure DMA Stream destination address */
;;;145      hdma->Instance->M1AR = SecondMemAddress;
;;;146    
;;;147      /* Configure the source, destination address and the data length */
;;;148      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;149    
;;;150      /* Enable the peripheral */
;;;151      __HAL_DMA_ENABLE(hdma);
;;;152    
;;;153      return HAL_OK;
;;;154    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L3.32|
000020  2001              MOVS     r0,#1                 ;122
000022  f8840034          STRB     r0,[r4,#0x34]         ;122
000026  bf00              NOP                            ;122
000028  6820              LDR      r0,[r4,#0]            ;125
00002a  6800              LDR      r0,[r0,#0]            ;125
00002c  f4002000          AND      r0,r0,#0x80000        ;125
000030  b918              CBNZ     r0,|L3.58|
000032  2012              MOVS     r0,#0x12              ;127
000034  f8840035          STRB     r0,[r4,#0x35]         ;127
000038  e007              B        |L3.74|
                  |L3.58|
00003a  6820              LDR      r0,[r4,#0]            ;130
00003c  6800              LDR      r0,[r0,#0]            ;130
00003e  f4002000          AND      r0,r0,#0x80000        ;130
000042  b110              CBZ      r0,|L3.74|
000044  2022              MOVS     r0,#0x22              ;132
000046  f8840035          STRB     r0,[r4,#0x35]         ;132
                  |L3.74|
00004a  6820              LDR      r0,[r4,#0]            ;139
00004c  6800              LDR      r0,[r0,#0]            ;139
00004e  f0200001          BIC      r0,r0,#1              ;139
000052  6821              LDR      r1,[r4,#0]            ;139
000054  6008              STR      r0,[r1,#0]            ;139
000056  6820              LDR      r0,[r4,#0]            ;142
000058  6800              LDR      r0,[r0,#0]            ;142
00005a  f4402080          ORR      r0,r0,#0x40000        ;142
00005e  6821              LDR      r1,[r4,#0]            ;142
000060  6008              STR      r0,[r1,#0]            ;142
000062  6820              LDR      r0,[r4,#0]            ;145
000064  6105              STR      r5,[r0,#0x10]         ;145
000066  4643              MOV      r3,r8                 ;148
000068  463a              MOV      r2,r7                 ;148
00006a  4631              MOV      r1,r6                 ;148
00006c  4620              MOV      r0,r4                 ;148
00006e  f7fffffe          BL       DMA_MultiBufferSetConfig
000072  6820              LDR      r0,[r4,#0]            ;151
000074  6800              LDR      r0,[r0,#0]            ;151
000076  f0400001          ORR      r0,r0,#1              ;151
00007a  6821              LDR      r1,[r4,#0]            ;151
00007c  6008              STR      r0,[r1,#0]            ;151
00007e  2000              MOVS     r0,#0                 ;153
000080  e7cc              B        |L3.28|
;;;155    
                          ENDP


                          AREA ||i.HAL_DMAEx_MultiBufferStart_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMAEx_MultiBufferStart_IT PROC
;;;165      */
;;;166    HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;167    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
00000c  f8dd8018          LDR      r8,[sp,#0x18]
;;;168      /* Process Locked */
;;;169      __HAL_LOCK(hdma);
000010  bf00              NOP      
000012  f8940034          LDRB     r0,[r4,#0x34]
000016  2801              CMP      r0,#1
000018  d102              BNE      |L4.32|
00001a  2002              MOVS     r0,#2
                  |L4.28|
;;;170    
;;;171      /* Current memory buffer used is Memory 0 */
;;;172      if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
;;;173      {
;;;174        hdma->State = HAL_DMA_STATE_BUSY_MEM0;
;;;175      }
;;;176      /* Current memory buffer used is Memory 1 */
;;;177      else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
;;;178      {
;;;179        hdma->State = HAL_DMA_STATE_BUSY_MEM1;
;;;180      }
;;;181    
;;;182      /* Check the parameters */
;;;183      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;184    
;;;185      /* Disable the peripheral */
;;;186      __HAL_DMA_DISABLE(hdma);  
;;;187    
;;;188      /* Enable the Double buffer mode */
;;;189      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
;;;190    
;;;191      /* Configure DMA Stream destination address */
;;;192      hdma->Instance->M1AR = SecondMemAddress;
;;;193    
;;;194      /* Configure the source, destination address and the data length */
;;;195      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
;;;196    
;;;197      /* Enable the transfer complete interrupt */
;;;198      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
;;;199    
;;;200      /* Enable the Half transfer interrupt */
;;;201      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
;;;202    
;;;203      /* Enable the transfer Error interrupt */
;;;204      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
;;;205    
;;;206      /* Enable the fifo Error interrupt */
;;;207      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_FE);  
;;;208    
;;;209      /* Enable the direct mode Error interrupt */
;;;210      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_DME); 
;;;211    
;;;212      /* Enable the peripheral */
;;;213      __HAL_DMA_ENABLE(hdma); 
;;;214    
;;;215      return HAL_OK; 
;;;216    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L4.32|
000020  2001              MOVS     r0,#1                 ;169
000022  f8840034          STRB     r0,[r4,#0x34]         ;169
000026  bf00              NOP                            ;169
000028  6820              LDR      r0,[r4,#0]            ;172
00002a  6800              LDR      r0,[r0,#0]            ;172
00002c  f4002000          AND      r0,r0,#0x80000        ;172
000030  b918              CBNZ     r0,|L4.58|
000032  2012              MOVS     r0,#0x12              ;174
000034  f8840035          STRB     r0,[r4,#0x35]         ;174
000038  e007              B        |L4.74|
                  |L4.58|
00003a  6820              LDR      r0,[r4,#0]            ;177
00003c  6800              LDR      r0,[r0,#0]            ;177
00003e  f4002000          AND      r0,r0,#0x80000        ;177
000042  b110              CBZ      r0,|L4.74|
000044  2022              MOVS     r0,#0x22              ;179
000046  f8840035          STRB     r0,[r4,#0x35]         ;179
                  |L4.74|
00004a  6820              LDR      r0,[r4,#0]            ;186
00004c  6800              LDR      r0,[r0,#0]            ;186
00004e  f0200001          BIC      r0,r0,#1              ;186
000052  6821              LDR      r1,[r4,#0]            ;186
000054  6008              STR      r0,[r1,#0]            ;186
000056  6820              LDR      r0,[r4,#0]            ;189
000058  6800              LDR      r0,[r0,#0]            ;189
00005a  f4402080          ORR      r0,r0,#0x40000        ;189
00005e  6821              LDR      r1,[r4,#0]            ;189
000060  6008              STR      r0,[r1,#0]            ;189
000062  6820              LDR      r0,[r4,#0]            ;192
000064  6105              STR      r5,[r0,#0x10]         ;192
000066  4643              MOV      r3,r8                 ;195
000068  463a              MOV      r2,r7                 ;195
00006a  4631              MOV      r1,r6                 ;195
00006c  4620              MOV      r0,r4                 ;195
00006e  f7fffffe          BL       DMA_MultiBufferSetConfig
000072  6820              LDR      r0,[r4,#0]            ;198
000074  6800              LDR      r0,[r0,#0]            ;198
000076  f0400010          ORR      r0,r0,#0x10           ;198
00007a  6821              LDR      r1,[r4,#0]            ;198
00007c  6008              STR      r0,[r1,#0]            ;198
00007e  6820              LDR      r0,[r4,#0]            ;201
000080  6800              LDR      r0,[r0,#0]            ;201
000082  f0400008          ORR      r0,r0,#8              ;201
000086  6821              LDR      r1,[r4,#0]            ;201
000088  6008              STR      r0,[r1,#0]            ;201
00008a  6820              LDR      r0,[r4,#0]            ;204
00008c  6800              LDR      r0,[r0,#0]            ;204
00008e  f0400004          ORR      r0,r0,#4              ;204
000092  6821              LDR      r1,[r4,#0]            ;204
000094  6008              STR      r0,[r1,#0]            ;204
000096  6820              LDR      r0,[r4,#0]            ;207
000098  6940              LDR      r0,[r0,#0x14]         ;207
00009a  f0400080          ORR      r0,r0,#0x80           ;207
00009e  6821              LDR      r1,[r4,#0]            ;207
0000a0  6148              STR      r0,[r1,#0x14]         ;207
0000a2  6820              LDR      r0,[r4,#0]            ;210
0000a4  6800              LDR      r0,[r0,#0]            ;210
0000a6  f0400002          ORR      r0,r0,#2              ;210
0000aa  6821              LDR      r1,[r4,#0]            ;210
0000ac  6008              STR      r0,[r1,#0]            ;210
0000ae  6820              LDR      r0,[r4,#0]            ;213
0000b0  6800              LDR      r0,[r0,#0]            ;213
0000b2  f0400001          ORR      r0,r0,#1              ;213
0000b6  6821              LDR      r1,[r4,#0]            ;213
0000b8  6008              STR      r0,[r1,#0]            ;213
0000ba  2000              MOVS     r0,#0                 ;215
0000bc  e7ae              B        |L4.28|
;;;217    
                          ENDP


;*** Start embedded assembler ***

#line 1 "HALLIB\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_dma_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_dma_ex_c_af8eecb0____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_dma_ex_c_af8eecb0____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_dma_ex_c_af8eecb0____REVSH|
#line 402
|__asm___22_stm32f4xx_hal_dma_ex_c_af8eecb0____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_dma_ex_c_af8eecb0____RRX|
#line 587
|__asm___22_stm32f4xx_hal_dma_ex_c_af8eecb0____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
