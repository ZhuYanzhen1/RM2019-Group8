; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_hal_smartcard.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm32f4xx_hal_smartcard.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm32f4xx_hal_smartcard.crf HALLIB\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_smartcard.c]
                          THUMB

                          AREA ||i.HAL_SMARTCARD_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_SMARTCARD_DeInit PROC
;;;302      */
;;;303    HAL_StatusTypeDef HAL_SMARTCARD_DeInit(SMARTCARD_HandleTypeDef *hsc)
000000  b510              PUSH     {r4,lr}
;;;304    {
000002  4604              MOV      r4,r0
;;;305      /* Check the SMARTCARD handle allocation */
;;;306      if(hsc == NULL)
000004  b90c              CBNZ     r4,|L1.10|
;;;307      {
;;;308        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L1.8|
;;;309      }
;;;310    
;;;311      /* Check the parameters */
;;;312      assert_param(IS_SMARTCARD_INSTANCE(hsc->Instance));
;;;313    
;;;314      hsc->State = HAL_SMARTCARD_STATE_BUSY;
;;;315    
;;;316      /* Disable the Peripheral */
;;;317      __HAL_SMARTCARD_DISABLE(hsc);
;;;318    
;;;319      /* DeInit the low level hardware */
;;;320      HAL_SMARTCARD_MspDeInit(hsc);
;;;321    
;;;322      hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;323      hsc->State = HAL_SMARTCARD_STATE_RESET;
;;;324    
;;;325      /* Release Lock */
;;;326      __HAL_UNLOCK(hsc);
;;;327    
;;;328      return HAL_OK;
;;;329    }
000008  bd10              POP      {r4,pc}
                  |L1.10|
00000a  2002              MOVS     r0,#2                 ;314
00000c  f8840049          STRB     r0,[r4,#0x49]         ;314
000010  6820              LDR      r0,[r4,#0]            ;317
000012  68c0              LDR      r0,[r0,#0xc]          ;317
000014  f4205000          BIC      r0,r0,#0x2000         ;317
000018  6821              LDR      r1,[r4,#0]            ;317
00001a  60c8              STR      r0,[r1,#0xc]          ;317
00001c  4620              MOV      r0,r4                 ;320
00001e  f7fffffe          BL       HAL_SMARTCARD_MspDeInit
000022  2000              MOVS     r0,#0                 ;322
000024  64e0              STR      r0,[r4,#0x4c]         ;322
000026  f8840049          STRB     r0,[r4,#0x49]         ;323
00002a  bf00              NOP                            ;326
00002c  f8840048          STRB     r0,[r4,#0x48]         ;326
000030  bf00              NOP                            ;326
000032  bf00              NOP                            ;328
000034  e7e8              B        |L1.8|
;;;330    
                          ENDP


                          AREA ||i.HAL_SMARTCARD_ErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_SMARTCARD_ErrorCallback PROC
;;;919      */
;;;920     __weak void HAL_SMARTCARD_ErrorCallback(SMARTCARD_HandleTypeDef *hsc)
000000  4770              BX       lr
;;;921    {
;;;922      /* Prevent unused argument(s) compilation warning */
;;;923      UNUSED(hsc);
;;;924      /* NOTE : This function Should not be modified, when the callback is needed,
;;;925                the HAL_SMARTCARD_ErrorCallback could be implemented in the user file
;;;926       */ 
;;;927    }
;;;928    
                          ENDP


                          AREA ||i.HAL_SMARTCARD_GetError||, CODE, READONLY, ALIGN=1

                  HAL_SMARTCARD_GetError PROC
;;;964      */
;;;965    uint32_t HAL_SMARTCARD_GetError(SMARTCARD_HandleTypeDef *hsc)
000000  4601              MOV      r1,r0
;;;966    {
;;;967      return hsc->ErrorCode;
000002  6cc8              LDR      r0,[r1,#0x4c]
;;;968    }
000004  4770              BX       lr
;;;969    
                          ENDP


                          AREA ||i.HAL_SMARTCARD_GetState||, CODE, READONLY, ALIGN=1

                  HAL_SMARTCARD_GetState PROC
;;;953      */
;;;954    HAL_SMARTCARD_StateTypeDef HAL_SMARTCARD_GetState(SMARTCARD_HandleTypeDef *hsc)
000000  4601              MOV      r1,r0
;;;955    {
;;;956      return hsc->State;
000002  f8910049          LDRB     r0,[r1,#0x49]
;;;957    }
000006  4770              BX       lr
;;;958    
                          ENDP


                          AREA ||i.HAL_SMARTCARD_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_SMARTCARD_IRQHandler PROC
;;;815      */
;;;816    void HAL_SMARTCARD_IRQHandler(SMARTCARD_HandleTypeDef *hsc)
000000  b5f8              PUSH     {r3-r7,lr}
;;;817    {
000002  4604              MOV      r4,r0
;;;818      uint32_t tmp1 = 0, tmp2 = 0; 
000004  2500              MOVS     r5,#0
000006  2600              MOVS     r6,#0
;;;819      
;;;820      tmp1 = hsc->Instance->SR;  
000008  6820              LDR      r0,[r4,#0]
00000a  6805              LDR      r5,[r0,#0]
;;;821      tmp2 = __HAL_SMARTCARD_GET_IT_SOURCE(hsc, SMARTCARD_IT_PE);
00000c  6820              LDR      r0,[r4,#0]
00000e  68c0              LDR      r0,[r0,#0xc]
000010  f4007680          AND      r6,r0,#0x100
;;;822    
;;;823      /* SMARTCARD parity error interrupt occurred --------------------------------*/
;;;824      if(((tmp1 & SMARTCARD_FLAG_PE) != RESET) && (tmp2 != RESET))
000014  f0050001          AND      r0,r5,#1
000018  b178              CBZ      r0,|L5.58|
00001a  b176              CBZ      r6,|L5.58|
;;;825      { 
;;;826        __HAL_SMARTCARD_CLEAR_PEFLAG(hsc);
00001c  bf00              NOP      
00001e  2000              MOVS     r0,#0
000020  9000              STR      r0,[sp,#0]
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  9000              STR      r0,[sp,#0]
000028  6820              LDR      r0,[r4,#0]
00002a  6840              LDR      r0,[r0,#4]
00002c  9000              STR      r0,[sp,#0]
00002e  bf00              NOP      
000030  bf00              NOP      
;;;827        hsc->ErrorCode |= HAL_SMARTCARD_ERROR_PE;
000032  6ce0              LDR      r0,[r4,#0x4c]
000034  f0400001          ORR      r0,r0,#1
000038  64e0              STR      r0,[r4,#0x4c]
                  |L5.58|
;;;828      }
;;;829      
;;;830      tmp2 = __HAL_SMARTCARD_GET_IT_SOURCE(hsc, SMARTCARD_IT_ERR);
00003a  6820              LDR      r0,[r4,#0]
00003c  6940              LDR      r0,[r0,#0x14]
00003e  f0000601          AND      r6,r0,#1
;;;831      /* SMARTCARD frame error interrupt occurred ---------------------------------*/
;;;832      if(((tmp1 & SMARTCARD_FLAG_FE) != RESET) && (tmp2 != RESET))
000042  f0050002          AND      r0,r5,#2
000046  b178              CBZ      r0,|L5.104|
000048  b176              CBZ      r6,|L5.104|
;;;833      { 
;;;834        __HAL_SMARTCARD_CLEAR_FEFLAG(hsc);
00004a  bf00              NOP      
00004c  2000              MOVS     r0,#0
00004e  9000              STR      r0,[sp,#0]
000050  6820              LDR      r0,[r4,#0]
000052  6800              LDR      r0,[r0,#0]
000054  9000              STR      r0,[sp,#0]
000056  6820              LDR      r0,[r4,#0]
000058  6840              LDR      r0,[r0,#4]
00005a  9000              STR      r0,[sp,#0]
00005c  bf00              NOP      
00005e  bf00              NOP      
;;;835        hsc->ErrorCode |= HAL_SMARTCARD_ERROR_FE;
000060  6ce0              LDR      r0,[r4,#0x4c]
000062  f0400004          ORR      r0,r0,#4
000066  64e0              STR      r0,[r4,#0x4c]
                  |L5.104|
;;;836      }
;;;837      
;;;838      tmp2 = __HAL_SMARTCARD_GET_IT_SOURCE(hsc, SMARTCARD_IT_ERR);
000068  6820              LDR      r0,[r4,#0]
00006a  6940              LDR      r0,[r0,#0x14]
00006c  f0000601          AND      r6,r0,#1
;;;839      /* SMARTCARD noise error interrupt occurred ---------------------------------*/
;;;840      if(((tmp1 & SMARTCARD_FLAG_NE) != RESET) && (tmp2 != RESET))
000070  f0050004          AND      r0,r5,#4
000074  b178              CBZ      r0,|L5.150|
000076  b176              CBZ      r6,|L5.150|
;;;841      { 
;;;842        __HAL_SMARTCARD_CLEAR_NEFLAG(hsc);
000078  bf00              NOP      
00007a  2000              MOVS     r0,#0
00007c  9000              STR      r0,[sp,#0]
00007e  6820              LDR      r0,[r4,#0]
000080  6800              LDR      r0,[r0,#0]
000082  9000              STR      r0,[sp,#0]
000084  6820              LDR      r0,[r4,#0]
000086  6840              LDR      r0,[r0,#4]
000088  9000              STR      r0,[sp,#0]
00008a  bf00              NOP      
00008c  bf00              NOP      
;;;843        hsc->ErrorCode |= HAL_SMARTCARD_ERROR_NE;
00008e  6ce0              LDR      r0,[r4,#0x4c]
000090  f0400002          ORR      r0,r0,#2
000094  64e0              STR      r0,[r4,#0x4c]
                  |L5.150|
;;;844      }
;;;845    
;;;846      tmp2 = __HAL_SMARTCARD_GET_IT_SOURCE(hsc, SMARTCARD_IT_ERR);
000096  6820              LDR      r0,[r4,#0]
000098  6940              LDR      r0,[r0,#0x14]
00009a  f0000601          AND      r6,r0,#1
;;;847      /* SMARTCARD Over-Run interrupt occurred ------------------------------------*/
;;;848      if(((tmp1 & SMARTCARD_FLAG_ORE) != RESET) && (tmp2 != RESET))
00009e  f0050008          AND      r0,r5,#8
0000a2  b178              CBZ      r0,|L5.196|
0000a4  b176              CBZ      r6,|L5.196|
;;;849      { 
;;;850        __HAL_SMARTCARD_CLEAR_OREFLAG(hsc);
0000a6  bf00              NOP      
0000a8  2000              MOVS     r0,#0
0000aa  9000              STR      r0,[sp,#0]
0000ac  6820              LDR      r0,[r4,#0]
0000ae  6800              LDR      r0,[r0,#0]
0000b0  9000              STR      r0,[sp,#0]
0000b2  6820              LDR      r0,[r4,#0]
0000b4  6840              LDR      r0,[r0,#4]
0000b6  9000              STR      r0,[sp,#0]
0000b8  bf00              NOP      
0000ba  bf00              NOP      
;;;851        hsc->ErrorCode |= HAL_SMARTCARD_ERROR_ORE;
0000bc  6ce0              LDR      r0,[r4,#0x4c]
0000be  f0400008          ORR      r0,r0,#8
0000c2  64e0              STR      r0,[r4,#0x4c]
                  |L5.196|
;;;852      }
;;;853      
;;;854      tmp2 = __HAL_SMARTCARD_GET_IT_SOURCE(hsc, SMARTCARD_IT_RXNE);
0000c4  6820              LDR      r0,[r4,#0]
0000c6  68c0              LDR      r0,[r0,#0xc]
0000c8  f0000620          AND      r6,r0,#0x20
;;;855      /* SMARTCARD in mode Receiver ----------------------------------------------*/
;;;856      if(((tmp1 & SMARTCARD_FLAG_RXNE) != RESET) && (tmp2 != RESET))
0000cc  f0050020          AND      r0,r5,#0x20
0000d0  b118              CBZ      r0,|L5.218|
0000d2  b116              CBZ      r6,|L5.218|
;;;857      { 
;;;858        SMARTCARD_Receive_IT(hsc);
0000d4  4620              MOV      r0,r4
0000d6  f7fffffe          BL       SMARTCARD_Receive_IT
                  |L5.218|
;;;859      }
;;;860    
;;;861      tmp2 = __HAL_SMARTCARD_GET_IT_SOURCE(hsc, SMARTCARD_IT_TXE);
0000da  6820              LDR      r0,[r4,#0]
0000dc  68c0              LDR      r0,[r0,#0xc]
0000de  f0000680          AND      r6,r0,#0x80
;;;862      /* SMARTCARD in mode Transmitter -------------------------------------------*/
;;;863      if(((tmp1 & SMARTCARD_FLAG_TXE) != RESET) && (tmp2 != RESET))
0000e2  f0050080          AND      r0,r5,#0x80
0000e6  b118              CBZ      r0,|L5.240|
0000e8  b116              CBZ      r6,|L5.240|
;;;864      {
;;;865        SMARTCARD_Transmit_IT(hsc);
0000ea  4620              MOV      r0,r4
0000ec  f7fffffe          BL       SMARTCARD_Transmit_IT
                  |L5.240|
;;;866      }
;;;867    
;;;868      tmp2 = __HAL_SMARTCARD_GET_IT_SOURCE(hsc, SMARTCARD_IT_TC);
0000f0  6820              LDR      r0,[r4,#0]
0000f2  68c0              LDR      r0,[r0,#0xc]
0000f4  f0000640          AND      r6,r0,#0x40
;;;869      /* SMARTCARD in mode Transmitter (transmission end) ------------------------*/
;;;870      if(((tmp1 & SMARTCARD_FLAG_TC) != RESET) && (tmp2 != RESET))
0000f8  f0050040          AND      r0,r5,#0x40
0000fc  b118              CBZ      r0,|L5.262|
0000fe  b116              CBZ      r6,|L5.262|
;;;871      {
;;;872        SMARTCARD_EndTransmit_IT(hsc);
000100  4620              MOV      r0,r4
000102  f7fffffe          BL       SMARTCARD_EndTransmit_IT
                  |L5.262|
;;;873      }
;;;874      
;;;875      /* Call the Error call Back in case of Errors */
;;;876      if(hsc->ErrorCode != HAL_SMARTCARD_ERROR_NONE)
000106  6ce0              LDR      r0,[r4,#0x4c]
000108  b128              CBZ      r0,|L5.278|
;;;877      {
;;;878        /* Set the SMARTCARD state ready to be able to start again the process */
;;;879        hsc->State= HAL_SMARTCARD_STATE_READY;
00010a  2001              MOVS     r0,#1
00010c  f8840049          STRB     r0,[r4,#0x49]
;;;880        HAL_SMARTCARD_ErrorCallback(hsc);
000110  4620              MOV      r0,r4
000112  f7fffffe          BL       HAL_SMARTCARD_ErrorCallback
                  |L5.278|
;;;881      }
;;;882    }
000116  bdf8              POP      {r3-r7,pc}
;;;883    
                          ENDP


                          AREA ||i.HAL_SMARTCARD_Init||, CODE, READONLY, ALIGN=1

                  HAL_SMARTCARD_Init PROC
;;;237      */
;;;238    HAL_StatusTypeDef HAL_SMARTCARD_Init(SMARTCARD_HandleTypeDef *hsc)
000000  b510              PUSH     {r4,lr}
;;;239    {
000002  4604              MOV      r4,r0
;;;240      /* Check the SMARTCARD handle allocation */
;;;241      if(hsc == NULL)
000004  b90c              CBNZ     r4,|L6.10|
;;;242      {
;;;243        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L6.8|
;;;244      }
;;;245    
;;;246      /* Check the parameters */
;;;247      assert_param(IS_SMARTCARD_INSTANCE(hsc->Instance));
;;;248      assert_param(IS_SMARTCARD_NACK_STATE(hsc->Init.NACKState));
;;;249    
;;;250      if(hsc->State == HAL_SMARTCARD_STATE_RESET)
;;;251      {  
;;;252        /* Allocate lock resource and initialize it */
;;;253        hsc->Lock = HAL_UNLOCKED;
;;;254        /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
;;;255        HAL_SMARTCARD_MspInit(hsc);
;;;256      }
;;;257      
;;;258      hsc->State = HAL_SMARTCARD_STATE_BUSY;
;;;259    
;;;260      /* Set the Prescaler */
;;;261      MODIFY_REG(hsc->Instance->GTPR, USART_GTPR_PSC, hsc->Init.Prescaler);
;;;262    
;;;263      /* Set the Guard Time */
;;;264      MODIFY_REG(hsc->Instance->GTPR, USART_GTPR_GT, ((hsc->Init.GuardTime)<<8));
;;;265    
;;;266      /* Set the Smartcard Communication parameters */
;;;267      SMARTCARD_SetConfig(hsc);
;;;268    
;;;269      /* In SmartCard mode, the following bits must be kept cleared: 
;;;270      - LINEN bit in the USART_CR2 register
;;;271      - HDSEL and IREN bits in the USART_CR3 register.*/
;;;272      hsc->Instance->CR2 &= ~USART_CR2_LINEN;
;;;273      hsc->Instance->CR3 &= ~(USART_CR3_IREN | USART_CR3_HDSEL);
;;;274    
;;;275      /* Enable the SMARTCARD Parity Error Interrupt */
;;;276      __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_PE);
;;;277    
;;;278      /* Enable the SMARTCARD Framing Error Interrupt */
;;;279      __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_ERR);
;;;280    
;;;281      /* Enable the Peripheral */
;;;282      __HAL_SMARTCARD_ENABLE(hsc);
;;;283    
;;;284      /* Configure the Smartcard NACK state */
;;;285      MODIFY_REG(hsc->Instance->CR3, USART_CR3_NACK, hsc->Init.NACKState);
;;;286    
;;;287      /* Enable the SC mode by setting the SCEN bit in the CR3 register */
;;;288      hsc->Instance->CR3 |= (USART_CR3_SCEN);
;;;289    
;;;290      /* Initialize the SMARTCARD state*/
;;;291      hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;292      hsc->State= HAL_SMARTCARD_STATE_READY;
;;;293    
;;;294      return HAL_OK;
;;;295    }
000008  bd10              POP      {r4,pc}
                  |L6.10|
00000a  f8940049          LDRB     r0,[r4,#0x49]         ;250
00000e  b928              CBNZ     r0,|L6.28|
000010  2000              MOVS     r0,#0                 ;253
000012  f8840048          STRB     r0,[r4,#0x48]         ;253
000016  4620              MOV      r0,r4                 ;255
000018  f7fffffe          BL       HAL_SMARTCARD_MspInit
                  |L6.28|
00001c  2002              MOVS     r0,#2                 ;258
00001e  f8840049          STRB     r0,[r4,#0x49]         ;258
000022  6820              LDR      r0,[r4,#0]            ;261
000024  6980              LDR      r0,[r0,#0x18]         ;261
000026  f02000ff          BIC      r0,r0,#0xff           ;261
00002a  6a61              LDR      r1,[r4,#0x24]         ;261
00002c  4308              ORRS     r0,r0,r1              ;261
00002e  6821              LDR      r1,[r4,#0]            ;261
000030  6188              STR      r0,[r1,#0x18]         ;261
000032  6820              LDR      r0,[r4,#0]            ;264
000034  6980              LDR      r0,[r0,#0x18]         ;264
000036  f420417f          BIC      r1,r0,#0xff00         ;264
00003a  6aa0              LDR      r0,[r4,#0x28]         ;264
00003c  ea412000          ORR      r0,r1,r0,LSL #8       ;264
000040  6821              LDR      r1,[r4,#0]            ;264
000042  6188              STR      r0,[r1,#0x18]         ;264
000044  4620              MOV      r0,r4                 ;267
000046  f7fffffe          BL       SMARTCARD_SetConfig
00004a  6820              LDR      r0,[r4,#0]            ;272
00004c  6900              LDR      r0,[r0,#0x10]         ;272
00004e  f4204080          BIC      r0,r0,#0x4000         ;272
000052  6821              LDR      r1,[r4,#0]            ;272
000054  6108              STR      r0,[r1,#0x10]         ;272
000056  6820              LDR      r0,[r4,#0]            ;273
000058  6940              LDR      r0,[r0,#0x14]         ;273
00005a  f020000a          BIC      r0,r0,#0xa            ;273
00005e  6821              LDR      r1,[r4,#0]            ;273
000060  6148              STR      r0,[r1,#0x14]         ;273
000062  6820              LDR      r0,[r4,#0]            ;276
000064  68c0              LDR      r0,[r0,#0xc]          ;276
000066  f4407080          ORR      r0,r0,#0x100          ;276
00006a  6821              LDR      r1,[r4,#0]            ;276
00006c  60c8              STR      r0,[r1,#0xc]          ;276
00006e  6820              LDR      r0,[r4,#0]            ;279
000070  6940              LDR      r0,[r0,#0x14]         ;279
000072  f0400001          ORR      r0,r0,#1              ;279
000076  6821              LDR      r1,[r4,#0]            ;279
000078  6148              STR      r0,[r1,#0x14]         ;279
00007a  6820              LDR      r0,[r4,#0]            ;282
00007c  68c0              LDR      r0,[r0,#0xc]          ;282
00007e  f4405000          ORR      r0,r0,#0x2000         ;282
000082  6821              LDR      r1,[r4,#0]            ;282
000084  60c8              STR      r0,[r1,#0xc]          ;282
000086  6820              LDR      r0,[r4,#0]            ;285
000088  6940              LDR      r0,[r0,#0x14]         ;285
00008a  f0200010          BIC      r0,r0,#0x10           ;285
00008e  6ae1              LDR      r1,[r4,#0x2c]         ;285
000090  4308              ORRS     r0,r0,r1              ;285
000092  6821              LDR      r1,[r4,#0]            ;285
000094  6148              STR      r0,[r1,#0x14]         ;285
000096  6820              LDR      r0,[r4,#0]            ;288
000098  6940              LDR      r0,[r0,#0x14]         ;288
00009a  f0400020          ORR      r0,r0,#0x20           ;288
00009e  6821              LDR      r1,[r4,#0]            ;288
0000a0  6148              STR      r0,[r1,#0x14]         ;288
0000a2  2000              MOVS     r0,#0                 ;291
0000a4  64e0              STR      r0,[r4,#0x4c]         ;291
0000a6  2001              MOVS     r0,#1                 ;292
0000a8  f8840049          STRB     r0,[r4,#0x49]         ;292
0000ac  2000              MOVS     r0,#0                 ;294
0000ae  e7ab              B        |L6.8|
;;;296    
                          ENDP


                          AREA ||i.HAL_SMARTCARD_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_SMARTCARD_MspDeInit PROC
;;;351      */
;;;352     __weak void HAL_SMARTCARD_MspDeInit(SMARTCARD_HandleTypeDef *hsc)
000000  4770              BX       lr
;;;353    {
;;;354      /* Prevent unused argument(s) compilation warning */
;;;355      UNUSED(hsc);
;;;356      /* NOTE : This function Should not be modified, when the callback is needed,
;;;357                the HAL_SMARTCARD_MspDeInit could be implemented in the user file
;;;358       */
;;;359    }
;;;360    
                          ENDP


                          AREA ||i.HAL_SMARTCARD_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_SMARTCARD_MspInit PROC
;;;336      */
;;;337     __weak void HAL_SMARTCARD_MspInit(SMARTCARD_HandleTypeDef *hsc)
000000  4770              BX       lr
;;;338    {
;;;339      /* Prevent unused argument(s) compilation warning */
;;;340      UNUSED(hsc);
;;;341      /* NOTE : This function Should not be modified, when the callback is needed,
;;;342                the HAL_SMARTCARD_MspInit could be implemented in the user file
;;;343       */
;;;344    }
;;;345    
                          ENDP


                          AREA ||i.HAL_SMARTCARD_Receive||, CODE, READONLY, ALIGN=1

                  HAL_SMARTCARD_Receive PROC
;;;498      */
;;;499    HAL_StatusTypeDef HAL_SMARTCARD_Receive(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;500    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  4699              MOV      r9,r3
;;;501      uint16_t* tmp;
;;;502      uint32_t tmp1 = 0;
00000c  f04f0800          MOV      r8,#0
;;;503      
;;;504      tmp1 = hsc->State;
000010  f8948049          LDRB     r8,[r4,#0x49]
;;;505      if((tmp1 == HAL_SMARTCARD_STATE_READY) || (tmp1 == HAL_SMARTCARD_STATE_BUSY_TX))
000014  f1b80f01          CMP      r8,#1
000018  d002              BEQ      |L9.32|
00001a  f1b80f12          CMP      r8,#0x12
00001e  d145              BNE      |L9.172|
                  |L9.32|
;;;506      {
;;;507        if((pData == NULL) || (Size == 0)) 
000020  b105              CBZ      r5,|L9.36|
000022  b916              CBNZ     r6,|L9.42|
                  |L9.36|
;;;508        {
;;;509          return  HAL_ERROR;
000024  2001              MOVS     r0,#1
                  |L9.38|
;;;510        }
;;;511    
;;;512        /* Process Locked */
;;;513        __HAL_LOCK(hsc);
;;;514        
;;;515        hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;516    
;;;517        /* Check if a non-blocking transmit process is ongoing or not */
;;;518        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_TX) 
;;;519        {
;;;520          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX_RX;
;;;521        }
;;;522        else
;;;523        {
;;;524          hsc->State = HAL_SMARTCARD_STATE_BUSY_RX;
;;;525        }
;;;526    
;;;527        hsc->RxXferSize = Size;
;;;528        hsc->RxXferCount = Size;
;;;529    
;;;530        /* Check the remain data to be received */
;;;531        while(hsc->RxXferCount > 0)
;;;532        {
;;;533          hsc->RxXferCount--;
;;;534          if(SMARTCARD_WaitOnFlagUntilTimeout(hsc, SMARTCARD_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;535          {
;;;536            return HAL_TIMEOUT;
;;;537          }
;;;538          tmp = (uint16_t*) pData;
;;;539          *tmp = (uint16_t)(hsc->Instance->DR & (uint16_t)0x00FF);
;;;540          pData +=1;
;;;541        }
;;;542    
;;;543        /* Check if a non-blocking transmit process is ongoing or not */
;;;544        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_TX_RX) 
;;;545        {
;;;546          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX;
;;;547        }
;;;548        else
;;;549        {
;;;550          hsc->State = HAL_SMARTCARD_STATE_READY;
;;;551        }
;;;552    
;;;553        /* Process Unlocked */
;;;554        __HAL_UNLOCK(hsc);
;;;555    
;;;556        return HAL_OK;
;;;557      }
;;;558      else
;;;559      {
;;;560        return HAL_BUSY;
;;;561      }
;;;562    }
000026  e8bd87f0          POP      {r4-r10,pc}
                  |L9.42|
00002a  bf00              NOP                            ;513
00002c  f8940048          LDRB     r0,[r4,#0x48]         ;513
000030  2801              CMP      r0,#1                 ;513
000032  d101              BNE      |L9.56|
000034  2002              MOVS     r0,#2                 ;513
000036  e7f6              B        |L9.38|
                  |L9.56|
000038  2001              MOVS     r0,#1                 ;513
00003a  f8840048          STRB     r0,[r4,#0x48]         ;513
00003e  bf00              NOP                            ;513
000040  2000              MOVS     r0,#0                 ;515
000042  64e0              STR      r0,[r4,#0x4c]         ;515
000044  f8940049          LDRB     r0,[r4,#0x49]         ;518
000048  2812              CMP      r0,#0x12              ;518
00004a  d103              BNE      |L9.84|
00004c  2032              MOVS     r0,#0x32              ;520
00004e  f8840049          STRB     r0,[r4,#0x49]         ;520
000052  e002              B        |L9.90|
                  |L9.84|
000054  2022              MOVS     r0,#0x22              ;524
000056  f8840049          STRB     r0,[r4,#0x49]         ;524
                  |L9.90|
00005a  87a6              STRH     r6,[r4,#0x3c]         ;527
00005c  87e6              STRH     r6,[r4,#0x3e]         ;528
00005e  e011              B        |L9.132|
                  |L9.96|
000060  8fe0              LDRH     r0,[r4,#0x3e]         ;533
000062  1e40              SUBS     r0,r0,#1              ;533
000064  87e0              STRH     r0,[r4,#0x3e]         ;533
000066  464b              MOV      r3,r9                 ;534
000068  2200              MOVS     r2,#0                 ;534
00006a  2120              MOVS     r1,#0x20              ;534
00006c  4620              MOV      r0,r4                 ;534
00006e  f7fffffe          BL       SMARTCARD_WaitOnFlagUntilTimeout
000072  b108              CBZ      r0,|L9.120|
000074  2003              MOVS     r0,#3                 ;536
000076  e7d6              B        |L9.38|
                  |L9.120|
000078  462f              MOV      r7,r5                 ;538
00007a  6820              LDR      r0,[r4,#0]            ;539
00007c  6840              LDR      r0,[r0,#4]            ;539
00007e  b2c0              UXTB     r0,r0                 ;539
000080  8038              STRH     r0,[r7,#0]            ;539
000082  1c6d              ADDS     r5,r5,#1              ;540
                  |L9.132|
000084  8fe0              LDRH     r0,[r4,#0x3e]         ;531
000086  2800              CMP      r0,#0                 ;531
000088  dcea              BGT      |L9.96|
00008a  f8940049          LDRB     r0,[r4,#0x49]         ;544
00008e  2832              CMP      r0,#0x32              ;544
000090  d103              BNE      |L9.154|
000092  2012              MOVS     r0,#0x12              ;546
000094  f8840049          STRB     r0,[r4,#0x49]         ;546
000098  e002              B        |L9.160|
                  |L9.154|
00009a  2001              MOVS     r0,#1                 ;550
00009c  f8840049          STRB     r0,[r4,#0x49]         ;550
                  |L9.160|
0000a0  bf00              NOP                            ;554
0000a2  2000              MOVS     r0,#0                 ;554
0000a4  f8840048          STRB     r0,[r4,#0x48]         ;554
0000a8  bf00              NOP                            ;554
0000aa  e7bc              B        |L9.38|
                  |L9.172|
0000ac  2002              MOVS     r0,#2                 ;560
0000ae  e7ba              B        |L9.38|
;;;563    
                          ENDP


                          AREA ||i.HAL_SMARTCARD_Receive_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SMARTCARD_Receive_DMA PROC
;;;754      */
;;;755    HAL_StatusTypeDef HAL_SMARTCARD_Receive_DMA(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;756    {
000002  4604              MOV      r4,r0
000004  4615              MOV      r5,r2
;;;757      uint32_t *tmp;
;;;758      uint32_t tmp1 = 0;
000006  2700              MOVS     r7,#0
;;;759      
;;;760      tmp1 = hsc->State;
000008  f8947049          LDRB     r7,[r4,#0x49]
;;;761      if((tmp1 == HAL_SMARTCARD_STATE_READY) || (tmp1 == HAL_SMARTCARD_STATE_BUSY_TX))
00000c  2f01              CMP      r7,#1
00000e  d001              BEQ      |L10.20|
000010  2f12              CMP      r7,#0x12
000012  d139              BNE      |L10.136|
                  |L10.20|
;;;762      {
;;;763        if((pData == NULL) || (Size == 0)) 
000014  9801              LDR      r0,[sp,#4]
000016  b100              CBZ      r0,|L10.26|
000018  b90d              CBNZ     r5,|L10.30|
                  |L10.26|
;;;764        {
;;;765          return HAL_ERROR;
00001a  2001              MOVS     r0,#1
                  |L10.28|
;;;766        }
;;;767    
;;;768        /* Process Locked */
;;;769        __HAL_LOCK(hsc);
;;;770    
;;;771        hsc->pRxBuffPtr = pData;
;;;772        hsc->RxXferSize = Size;
;;;773    
;;;774        hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;775        /* Check if a non-blocking transmit process is ongoing or not */
;;;776        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_TX) 
;;;777        {
;;;778          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX_RX;
;;;779        }
;;;780        else
;;;781        {
;;;782          hsc->State = HAL_SMARTCARD_STATE_BUSY_RX;
;;;783        }
;;;784    
;;;785        /* Set the SMARTCARD DMA transfer complete callback */
;;;786        hsc->hdmarx->XferCpltCallback = SMARTCARD_DMAReceiveCplt;
;;;787    
;;;788        /* Set the DMA error callback */
;;;789        hsc->hdmarx->XferErrorCallback = SMARTCARD_DMAError;
;;;790    
;;;791        /* Enable the DMA Stream */
;;;792        tmp = (uint32_t*)&pData;
;;;793        HAL_DMA_Start_IT(hsc->hdmarx, (uint32_t)&hsc->Instance->DR, *(uint32_t*)tmp, Size);
;;;794    
;;;795        /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
;;;796        in the SMARTCARD CR3 register */
;;;797        hsc->Instance->CR3 |= USART_CR3_DMAR;
;;;798    
;;;799        /* Process Unlocked */
;;;800        __HAL_UNLOCK(hsc);
;;;801    
;;;802        return HAL_OK;
;;;803      }
;;;804      else
;;;805      {
;;;806        return HAL_BUSY;
;;;807      }
;;;808    }
00001c  bdfe              POP      {r1-r7,pc}
                  |L10.30|
00001e  bf00              NOP                            ;769
000020  f8940048          LDRB     r0,[r4,#0x48]         ;769
000024  2801              CMP      r0,#1                 ;769
000026  d101              BNE      |L10.44|
000028  2002              MOVS     r0,#2                 ;769
00002a  e7f7              B        |L10.28|
                  |L10.44|
00002c  2001              MOVS     r0,#1                 ;769
00002e  f8840048          STRB     r0,[r4,#0x48]         ;769
000032  bf00              NOP                            ;769
000034  9801              LDR      r0,[sp,#4]            ;771
000036  63a0              STR      r0,[r4,#0x38]         ;771
000038  87a5              STRH     r5,[r4,#0x3c]         ;772
00003a  2000              MOVS     r0,#0                 ;774
00003c  64e0              STR      r0,[r4,#0x4c]         ;774
00003e  f8940049          LDRB     r0,[r4,#0x49]         ;776
000042  2812              CMP      r0,#0x12              ;776
000044  d103              BNE      |L10.78|
000046  2032              MOVS     r0,#0x32              ;778
000048  f8840049          STRB     r0,[r4,#0x49]         ;778
00004c  e002              B        |L10.84|
                  |L10.78|
00004e  2022              MOVS     r0,#0x22              ;782
000050  f8840049          STRB     r0,[r4,#0x49]         ;782
                  |L10.84|
000054  480d              LDR      r0,|L10.140|
000056  6c61              LDR      r1,[r4,#0x44]         ;786
000058  63c8              STR      r0,[r1,#0x3c]         ;786
00005a  480d              LDR      r0,|L10.144|
00005c  6c61              LDR      r1,[r4,#0x44]         ;789
00005e  6488              STR      r0,[r1,#0x48]         ;789
000060  ae01              ADD      r6,sp,#4              ;792
000062  6832              LDR      r2,[r6,#0]            ;793
000064  6823              LDR      r3,[r4,#0]            ;793
000066  1d19              ADDS     r1,r3,#4              ;793
000068  462b              MOV      r3,r5                 ;793
00006a  6c60              LDR      r0,[r4,#0x44]         ;793
00006c  f7fffffe          BL       HAL_DMA_Start_IT
000070  6820              LDR      r0,[r4,#0]            ;797
000072  6940              LDR      r0,[r0,#0x14]         ;797
000074  f0400040          ORR      r0,r0,#0x40           ;797
000078  6821              LDR      r1,[r4,#0]            ;797
00007a  6148              STR      r0,[r1,#0x14]         ;797
00007c  bf00              NOP                            ;800
00007e  2000              MOVS     r0,#0                 ;800
000080  f8840048          STRB     r0,[r4,#0x48]         ;800
000084  bf00              NOP                            ;800
000086  e7c9              B        |L10.28|
                  |L10.136|
000088  2002              MOVS     r0,#2                 ;806
00008a  e7c7              B        |L10.28|
;;;809    
                          ENDP

                  |L10.140|
                          DCD      SMARTCARD_DMAReceiveCplt
                  |L10.144|
                          DCD      SMARTCARD_DMAError

                          AREA ||i.HAL_SMARTCARD_Receive_IT||, CODE, READONLY, ALIGN=1

                  HAL_SMARTCARD_Receive_IT PROC
;;;629      */
;;;630    HAL_StatusTypeDef HAL_SMARTCARD_Receive_IT(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size)
000000  b530              PUSH     {r4,r5,lr}
;;;631    {
000002  4603              MOV      r3,r0
;;;632      uint32_t tmp1 = 0;
000004  2400              MOVS     r4,#0
;;;633      
;;;634      tmp1 = hsc->State;
000006  f8934049          LDRB     r4,[r3,#0x49]
;;;635      if((tmp1 == HAL_SMARTCARD_STATE_READY) || (tmp1 == HAL_SMARTCARD_STATE_BUSY_TX))
00000a  2c01              CMP      r4,#1
00000c  d001              BEQ      |L11.18|
00000e  2c12              CMP      r4,#0x12
000010  d137              BNE      |L11.130|
                  |L11.18|
;;;636      {
;;;637        if((pData == NULL) || (Size == 0)) 
000012  b101              CBZ      r1,|L11.22|
000014  b90a              CBNZ     r2,|L11.26|
                  |L11.22|
;;;638        {
;;;639          return HAL_ERROR;
000016  2001              MOVS     r0,#1
                  |L11.24|
;;;640        }
;;;641    
;;;642        /* Process Locked */
;;;643        __HAL_LOCK(hsc);
;;;644    
;;;645        hsc->pRxBuffPtr = pData;
;;;646        hsc->RxXferSize = Size;
;;;647        hsc->RxXferCount = Size;
;;;648    
;;;649        hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;650        /* Check if a non-blocking transmit process is ongoing or not */
;;;651        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_TX) 
;;;652        {
;;;653          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX_RX;
;;;654        }
;;;655        else
;;;656        {
;;;657          hsc->State = HAL_SMARTCARD_STATE_BUSY_RX;
;;;658        }
;;;659        /* Process Unlocked */
;;;660        __HAL_UNLOCK(hsc);
;;;661        
;;;662        /* Enable the SMARTCARD Data Register not empty Interrupt */
;;;663        __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_RXNE); 
;;;664    
;;;665        /* Enable the SMARTCARD Parity Error Interrupt */
;;;666        __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_PE);
;;;667    
;;;668        /* Enable the SMARTCARD Error Interrupt: (Frame error, noise error, overrun error) */
;;;669        __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_ERR);
;;;670    
;;;671        return HAL_OK;
;;;672      }
;;;673      else
;;;674      {
;;;675        return HAL_BUSY;
;;;676      }
;;;677    }
000018  bd30              POP      {r4,r5,pc}
                  |L11.26|
00001a  bf00              NOP                            ;643
00001c  f8930048          LDRB     r0,[r3,#0x48]         ;643
000020  2801              CMP      r0,#1                 ;643
000022  d101              BNE      |L11.40|
000024  2002              MOVS     r0,#2                 ;643
000026  e7f7              B        |L11.24|
                  |L11.40|
000028  2001              MOVS     r0,#1                 ;643
00002a  f8830048          STRB     r0,[r3,#0x48]         ;643
00002e  bf00              NOP                            ;643
000030  6399              STR      r1,[r3,#0x38]         ;645
000032  879a              STRH     r2,[r3,#0x3c]         ;646
000034  87da              STRH     r2,[r3,#0x3e]         ;647
000036  2000              MOVS     r0,#0                 ;649
000038  64d8              STR      r0,[r3,#0x4c]         ;649
00003a  f8930049          LDRB     r0,[r3,#0x49]         ;651
00003e  2812              CMP      r0,#0x12              ;651
000040  d103              BNE      |L11.74|
000042  2032              MOVS     r0,#0x32              ;653
000044  f8830049          STRB     r0,[r3,#0x49]         ;653
000048  e002              B        |L11.80|
                  |L11.74|
00004a  2022              MOVS     r0,#0x22              ;657
00004c  f8830049          STRB     r0,[r3,#0x49]         ;657
                  |L11.80|
000050  bf00              NOP                            ;660
000052  2000              MOVS     r0,#0                 ;660
000054  f8830048          STRB     r0,[r3,#0x48]         ;660
000058  bf00              NOP                            ;660
00005a  6818              LDR      r0,[r3,#0]            ;663
00005c  68c0              LDR      r0,[r0,#0xc]          ;663
00005e  f0400020          ORR      r0,r0,#0x20           ;663
000062  681d              LDR      r5,[r3,#0]            ;663
000064  60e8              STR      r0,[r5,#0xc]          ;663
000066  6818              LDR      r0,[r3,#0]            ;666
000068  68c0              LDR      r0,[r0,#0xc]          ;666
00006a  f4407080          ORR      r0,r0,#0x100          ;666
00006e  681d              LDR      r5,[r3,#0]            ;666
000070  60e8              STR      r0,[r5,#0xc]          ;666
000072  6818              LDR      r0,[r3,#0]            ;669
000074  6940              LDR      r0,[r0,#0x14]         ;669
000076  f0400001          ORR      r0,r0,#1              ;669
00007a  681d              LDR      r5,[r3,#0]            ;669
00007c  6168              STR      r0,[r5,#0x14]         ;669
00007e  2000              MOVS     r0,#0                 ;671
000080  e7ca              B        |L11.24|
                  |L11.130|
000082  2002              MOVS     r0,#2                 ;675
000084  e7c8              B        |L11.24|
;;;678    
                          ENDP


                          AREA ||i.HAL_SMARTCARD_RxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SMARTCARD_RxCpltCallback PROC
;;;904      */
;;;905    __weak void HAL_SMARTCARD_RxCpltCallback(SMARTCARD_HandleTypeDef *hsc)
000000  4770              BX       lr
;;;906    {
;;;907      /* Prevent unused argument(s) compilation warning */
;;;908      UNUSED(hsc);
;;;909      /* NOTE : This function Should not be modified, when the callback is needed,
;;;910                the HAL_SMARTCARD_TxCpltCallback could be implemented in the user file
;;;911       */
;;;912    }
;;;913    
                          ENDP


                          AREA ||i.HAL_SMARTCARD_Transmit||, CODE, READONLY, ALIGN=1

                  HAL_SMARTCARD_Transmit PROC
;;;423      */
;;;424    HAL_StatusTypeDef HAL_SMARTCARD_Transmit(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;425    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  4699              MOV      r9,r3
;;;426      uint16_t* tmp;
;;;427      uint32_t tmp1 = 0;
00000c  f04f0800          MOV      r8,#0
;;;428      
;;;429      tmp1 = hsc->State;
000010  f8948049          LDRB     r8,[r4,#0x49]
;;;430      if((tmp1 == HAL_SMARTCARD_STATE_READY) || (tmp1 == HAL_SMARTCARD_STATE_BUSY_RX))
000014  f1b80f01          CMP      r8,#1
000018  d002              BEQ      |L13.32|
00001a  f1b80f22          CMP      r8,#0x22
00001e  d14f              BNE      |L13.192|
                  |L13.32|
;;;431      {
;;;432        if((pData == NULL) || (Size == 0)) 
000020  b105              CBZ      r5,|L13.36|
000022  b916              CBNZ     r6,|L13.42|
                  |L13.36|
;;;433        {
;;;434          return  HAL_ERROR;
000024  2001              MOVS     r0,#1
                  |L13.38|
;;;435        }
;;;436    
;;;437        /* Process Locked */
;;;438        __HAL_LOCK(hsc);
;;;439    
;;;440        hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;441        /* Check if a non-blocking receive process is ongoing or not */
;;;442        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_RX) 
;;;443        {
;;;444          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX_RX;
;;;445        }
;;;446        else
;;;447        {
;;;448          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX;
;;;449        }
;;;450        
;;;451        hsc->TxXferSize = Size;
;;;452        hsc->TxXferCount = Size;
;;;453        while(hsc->TxXferCount > 0)
;;;454        {
;;;455          hsc->TxXferCount--;      
;;;456          if(SMARTCARD_WaitOnFlagUntilTimeout(hsc, SMARTCARD_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;457          {
;;;458            return HAL_TIMEOUT;
;;;459          }
;;;460          tmp = (uint16_t*) pData;
;;;461          hsc->Instance->DR = (*tmp & (uint16_t)0x01FF);
;;;462          pData +=1;
;;;463        }
;;;464        
;;;465        if(SMARTCARD_WaitOnFlagUntilTimeout(hsc, SMARTCARD_FLAG_TC, RESET, Timeout) != HAL_OK)
;;;466        {
;;;467          return HAL_TIMEOUT;
;;;468        }
;;;469    
;;;470        /* Check if a non-blocking receive process is ongoing or not */
;;;471        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_TX_RX) 
;;;472        {
;;;473          hsc->State = HAL_SMARTCARD_STATE_BUSY_RX;
;;;474        }
;;;475        else
;;;476        {
;;;477          hsc->State = HAL_SMARTCARD_STATE_READY;
;;;478        }
;;;479        /* Process Unlocked */
;;;480        __HAL_UNLOCK(hsc);
;;;481    
;;;482        return HAL_OK;
;;;483      }
;;;484      else
;;;485      {
;;;486        return HAL_BUSY;
;;;487      }
;;;488    }
000026  e8bd87f0          POP      {r4-r10,pc}
                  |L13.42|
00002a  bf00              NOP                            ;438
00002c  f8940048          LDRB     r0,[r4,#0x48]         ;438
000030  2801              CMP      r0,#1                 ;438
000032  d101              BNE      |L13.56|
000034  2002              MOVS     r0,#2                 ;438
000036  e7f6              B        |L13.38|
                  |L13.56|
000038  2001              MOVS     r0,#1                 ;438
00003a  f8840048          STRB     r0,[r4,#0x48]         ;438
00003e  bf00              NOP                            ;438
000040  2000              MOVS     r0,#0                 ;440
000042  64e0              STR      r0,[r4,#0x4c]         ;440
000044  f8940049          LDRB     r0,[r4,#0x49]         ;442
000048  2822              CMP      r0,#0x22              ;442
00004a  d103              BNE      |L13.84|
00004c  2032              MOVS     r0,#0x32              ;444
00004e  f8840049          STRB     r0,[r4,#0x49]         ;444
000052  e002              B        |L13.90|
                  |L13.84|
000054  2012              MOVS     r0,#0x12              ;448
000056  f8840049          STRB     r0,[r4,#0x49]         ;448
                  |L13.90|
00005a  86a6              STRH     r6,[r4,#0x34]         ;451
00005c  86e6              STRH     r6,[r4,#0x36]         ;452
00005e  e012              B        |L13.134|
                  |L13.96|
000060  8ee0              LDRH     r0,[r4,#0x36]         ;455
000062  1e40              SUBS     r0,r0,#1              ;455
000064  86e0              STRH     r0,[r4,#0x36]         ;455
000066  464b              MOV      r3,r9                 ;456
000068  2200              MOVS     r2,#0                 ;456
00006a  2180              MOVS     r1,#0x80              ;456
00006c  4620              MOV      r0,r4                 ;456
00006e  f7fffffe          BL       SMARTCARD_WaitOnFlagUntilTimeout
000072  b108              CBZ      r0,|L13.120|
000074  2003              MOVS     r0,#3                 ;458
000076  e7d6              B        |L13.38|
                  |L13.120|
000078  462f              MOV      r7,r5                 ;460
00007a  8838              LDRH     r0,[r7,#0]            ;461
00007c  f3c00008          UBFX     r0,r0,#0,#9           ;461
000080  6821              LDR      r1,[r4,#0]            ;461
000082  6048              STR      r0,[r1,#4]            ;461
000084  1c6d              ADDS     r5,r5,#1              ;462
                  |L13.134|
000086  8ee0              LDRH     r0,[r4,#0x36]         ;453
000088  2800              CMP      r0,#0                 ;453
00008a  dce9              BGT      |L13.96|
00008c  464b              MOV      r3,r9                 ;465
00008e  2200              MOVS     r2,#0                 ;465
000090  2140              MOVS     r1,#0x40              ;465
000092  4620              MOV      r0,r4                 ;465
000094  f7fffffe          BL       SMARTCARD_WaitOnFlagUntilTimeout
000098  b108              CBZ      r0,|L13.158|
00009a  2003              MOVS     r0,#3                 ;467
00009c  e7c3              B        |L13.38|
                  |L13.158|
00009e  f8940049          LDRB     r0,[r4,#0x49]         ;471
0000a2  2832              CMP      r0,#0x32              ;471
0000a4  d103              BNE      |L13.174|
0000a6  2022              MOVS     r0,#0x22              ;473
0000a8  f8840049          STRB     r0,[r4,#0x49]         ;473
0000ac  e002              B        |L13.180|
                  |L13.174|
0000ae  2001              MOVS     r0,#1                 ;477
0000b0  f8840049          STRB     r0,[r4,#0x49]         ;477
                  |L13.180|
0000b4  bf00              NOP                            ;480
0000b6  2000              MOVS     r0,#0                 ;480
0000b8  f8840048          STRB     r0,[r4,#0x48]         ;480
0000bc  bf00              NOP                            ;480
0000be  e7b2              B        |L13.38|
                  |L13.192|
0000c0  2002              MOVS     r0,#2                 ;486
0000c2  e7b0              B        |L13.38|
;;;489    
                          ENDP


                          AREA ||i.HAL_SMARTCARD_Transmit_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SMARTCARD_Transmit_DMA PROC
;;;686      */
;;;687    HAL_StatusTypeDef HAL_SMARTCARD_Transmit_DMA(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;688    {
000002  4604              MOV      r4,r0
000004  4615              MOV      r5,r2
;;;689      uint32_t *tmp;
;;;690      uint32_t tmp1 = 0;
000006  2700              MOVS     r7,#0
;;;691      
;;;692      tmp1 = hsc->State;
000008  f8947049          LDRB     r7,[r4,#0x49]
;;;693      if((tmp1 == HAL_SMARTCARD_STATE_READY) || (tmp1 == HAL_SMARTCARD_STATE_BUSY_RX))
00000c  2f01              CMP      r7,#1
00000e  d001              BEQ      |L14.20|
000010  2f22              CMP      r7,#0x22
000012  d13e              BNE      |L14.146|
                  |L14.20|
;;;694      {
;;;695        if((pData == NULL) || (Size == 0)) 
000014  9801              LDR      r0,[sp,#4]
000016  b100              CBZ      r0,|L14.26|
000018  b90d              CBNZ     r5,|L14.30|
                  |L14.26|
;;;696        {
;;;697          return HAL_ERROR;
00001a  2001              MOVS     r0,#1
                  |L14.28|
;;;698        }
;;;699    
;;;700        /* Process Locked */
;;;701        __HAL_LOCK(hsc);
;;;702    
;;;703        hsc->pTxBuffPtr = pData;
;;;704        hsc->TxXferSize = Size;
;;;705        hsc->TxXferCount = Size;
;;;706    
;;;707        hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;708        /* Check if a non-blocking receive process is ongoing or not */
;;;709        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_RX) 
;;;710        {
;;;711          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX_RX;
;;;712        }
;;;713        else
;;;714        {
;;;715          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX;
;;;716        }
;;;717    
;;;718        /* Set the SMARTCARD DMA transfer complete callback */
;;;719        hsc->hdmatx->XferCpltCallback = SMARTCARD_DMATransmitCplt;
;;;720    
;;;721        /* Set the DMA error callback */
;;;722        hsc->hdmatx->XferErrorCallback = SMARTCARD_DMAError;
;;;723    
;;;724        /* Enable the SMARTCARD transmit DMA Stream */
;;;725        tmp = (uint32_t*)&pData;
;;;726        HAL_DMA_Start_IT(hsc->hdmatx, *(uint32_t*)tmp, (uint32_t)&hsc->Instance->DR, Size);
;;;727    
;;;728         /* Clear the TC flag in the SR register by writing 0 to it */
;;;729        __HAL_SMARTCARD_CLEAR_FLAG(hsc, SMARTCARD_FLAG_TC);
;;;730        
;;;731        /* Enable the DMA transfer for transmit request by setting the DMAT bit
;;;732        in the SMARTCARD CR3 register */
;;;733        hsc->Instance->CR3 |= USART_CR3_DMAT;
;;;734    
;;;735        /* Process Unlocked */
;;;736        __HAL_UNLOCK(hsc);
;;;737    
;;;738        return HAL_OK;
;;;739      }
;;;740      else
;;;741      {
;;;742        return HAL_BUSY;
;;;743      }
;;;744    }
00001c  bdfe              POP      {r1-r7,pc}
                  |L14.30|
00001e  bf00              NOP                            ;701
000020  f8940048          LDRB     r0,[r4,#0x48]         ;701
000024  2801              CMP      r0,#1                 ;701
000026  d101              BNE      |L14.44|
000028  2002              MOVS     r0,#2                 ;701
00002a  e7f7              B        |L14.28|
                  |L14.44|
00002c  2001              MOVS     r0,#1                 ;701
00002e  f8840048          STRB     r0,[r4,#0x48]         ;701
000032  bf00              NOP                            ;701
000034  9801              LDR      r0,[sp,#4]            ;703
000036  6320              STR      r0,[r4,#0x30]         ;703
000038  86a5              STRH     r5,[r4,#0x34]         ;704
00003a  86e5              STRH     r5,[r4,#0x36]         ;705
00003c  2000              MOVS     r0,#0                 ;707
00003e  64e0              STR      r0,[r4,#0x4c]         ;707
000040  f8940049          LDRB     r0,[r4,#0x49]         ;709
000044  2822              CMP      r0,#0x22              ;709
000046  d103              BNE      |L14.80|
000048  2032              MOVS     r0,#0x32              ;711
00004a  f8840049          STRB     r0,[r4,#0x49]         ;711
00004e  e002              B        |L14.86|
                  |L14.80|
000050  2012              MOVS     r0,#0x12              ;715
000052  f8840049          STRB     r0,[r4,#0x49]         ;715
                  |L14.86|
000056  4810              LDR      r0,|L14.152|
000058  6c21              LDR      r1,[r4,#0x40]         ;719
00005a  63c8              STR      r0,[r1,#0x3c]         ;719
00005c  480f              LDR      r0,|L14.156|
00005e  6c21              LDR      r1,[r4,#0x40]         ;722
000060  6488              STR      r0,[r1,#0x48]         ;722
000062  ae01              ADD      r6,sp,#4              ;725
000064  6823              LDR      r3,[r4,#0]            ;726
000066  1d1a              ADDS     r2,r3,#4              ;726
000068  6831              LDR      r1,[r6,#0]            ;726
00006a  462b              MOV      r3,r5                 ;726
00006c  6c20              LDR      r0,[r4,#0x40]         ;726
00006e  f7fffffe          BL       HAL_DMA_Start_IT
000072  f06f0040          MVN      r0,#0x40              ;729
000076  6821              LDR      r1,[r4,#0]            ;729
000078  6008              STR      r0,[r1,#0]            ;729
00007a  6820              LDR      r0,[r4,#0]            ;733
00007c  6940              LDR      r0,[r0,#0x14]         ;733
00007e  f0400080          ORR      r0,r0,#0x80           ;733
000082  6821              LDR      r1,[r4,#0]            ;733
000084  6148              STR      r0,[r1,#0x14]         ;733
000086  bf00              NOP                            ;736
000088  2000              MOVS     r0,#0                 ;736
00008a  f8840048          STRB     r0,[r4,#0x48]         ;736
00008e  bf00              NOP                            ;736
000090  e7c4              B        |L14.28|
                  |L14.146|
000092  2002              MOVS     r0,#2                 ;742
000094  e7c2              B        |L14.28|
;;;745    
                          ENDP

000096  0000              DCW      0x0000
                  |L14.152|
                          DCD      SMARTCARD_DMATransmitCplt
                  |L14.156|
                          DCD      SMARTCARD_DMAError

                          AREA ||i.HAL_SMARTCARD_Transmit_IT||, CODE, READONLY, ALIGN=1

                  HAL_SMARTCARD_Transmit_IT PROC
;;;571      */
;;;572    HAL_StatusTypeDef HAL_SMARTCARD_Transmit_IT(SMARTCARD_HandleTypeDef *hsc, uint8_t *pData, uint16_t Size)
000000  b530              PUSH     {r4,r5,lr}
;;;573    {
000002  4603              MOV      r3,r0
;;;574      uint32_t tmp1 = 0;
000004  2400              MOVS     r4,#0
;;;575      
;;;576      tmp1 = hsc->State;
000006  f8934049          LDRB     r4,[r3,#0x49]
;;;577      if((tmp1 == HAL_SMARTCARD_STATE_READY) || (tmp1 == HAL_SMARTCARD_STATE_BUSY_RX))
00000a  2c01              CMP      r4,#1
00000c  d001              BEQ      |L15.18|
00000e  2c22              CMP      r4,#0x22
000010  d137              BNE      |L15.130|
                  |L15.18|
;;;578      {
;;;579        if((pData == NULL) || (Size == 0)) 
000012  b101              CBZ      r1,|L15.22|
000014  b90a              CBNZ     r2,|L15.26|
                  |L15.22|
;;;580        {
;;;581          return HAL_ERROR;
000016  2001              MOVS     r0,#1
                  |L15.24|
;;;582        }
;;;583    
;;;584        /* Process Locked */
;;;585        __HAL_LOCK(hsc);
;;;586    
;;;587        hsc->pTxBuffPtr = pData;
;;;588        hsc->TxXferSize = Size;
;;;589        hsc->TxXferCount = Size;
;;;590    
;;;591        hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
;;;592        /* Check if a non-blocking receive process is ongoing or not */
;;;593        if(hsc->State == HAL_SMARTCARD_STATE_BUSY_RX) 
;;;594        {
;;;595          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX_RX;
;;;596        }
;;;597        else
;;;598        {
;;;599          hsc->State = HAL_SMARTCARD_STATE_BUSY_TX;
;;;600        }
;;;601    
;;;602        /* Process Unlocked */
;;;603        __HAL_UNLOCK(hsc);
;;;604        
;;;605        /* Enable the SMARTCARD Parity Error Interrupt */
;;;606        __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_PE);
;;;607    
;;;608        /* Disable the SMARTCARD Error Interrupt: (Frame error, noise error, overrun error) */
;;;609        __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_ERR);
;;;610    
;;;611        /* Enable the SMARTCARD Transmit data register empty Interrupt */
;;;612        __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_TXE);
;;;613    
;;;614        return HAL_OK;
;;;615      }
;;;616      else
;;;617      {
;;;618        return HAL_BUSY;
;;;619      }
;;;620    }
000018  bd30              POP      {r4,r5,pc}
                  |L15.26|
00001a  bf00              NOP                            ;585
00001c  f8930048          LDRB     r0,[r3,#0x48]         ;585
000020  2801              CMP      r0,#1                 ;585
000022  d101              BNE      |L15.40|
000024  2002              MOVS     r0,#2                 ;585
000026  e7f7              B        |L15.24|
                  |L15.40|
000028  2001              MOVS     r0,#1                 ;585
00002a  f8830048          STRB     r0,[r3,#0x48]         ;585
00002e  bf00              NOP                            ;585
000030  6319              STR      r1,[r3,#0x30]         ;587
000032  869a              STRH     r2,[r3,#0x34]         ;588
000034  86da              STRH     r2,[r3,#0x36]         ;589
000036  2000              MOVS     r0,#0                 ;591
000038  64d8              STR      r0,[r3,#0x4c]         ;591
00003a  f8930049          LDRB     r0,[r3,#0x49]         ;593
00003e  2822              CMP      r0,#0x22              ;593
000040  d103              BNE      |L15.74|
000042  2032              MOVS     r0,#0x32              ;595
000044  f8830049          STRB     r0,[r3,#0x49]         ;595
000048  e002              B        |L15.80|
                  |L15.74|
00004a  2012              MOVS     r0,#0x12              ;599
00004c  f8830049          STRB     r0,[r3,#0x49]         ;599
                  |L15.80|
000050  bf00              NOP                            ;603
000052  2000              MOVS     r0,#0                 ;603
000054  f8830048          STRB     r0,[r3,#0x48]         ;603
000058  bf00              NOP                            ;603
00005a  6818              LDR      r0,[r3,#0]            ;606
00005c  68c0              LDR      r0,[r0,#0xc]          ;606
00005e  f4407080          ORR      r0,r0,#0x100          ;606
000062  681d              LDR      r5,[r3,#0]            ;606
000064  60e8              STR      r0,[r5,#0xc]          ;606
000066  6818              LDR      r0,[r3,#0]            ;609
000068  6940              LDR      r0,[r0,#0x14]         ;609
00006a  f0200001          BIC      r0,r0,#1              ;609
00006e  681d              LDR      r5,[r3,#0]            ;609
000070  6168              STR      r0,[r5,#0x14]         ;609
000072  6818              LDR      r0,[r3,#0]            ;612
000074  68c0              LDR      r0,[r0,#0xc]          ;612
000076  f0400080          ORR      r0,r0,#0x80           ;612
00007a  681d              LDR      r5,[r3,#0]            ;612
00007c  60e8              STR      r0,[r5,#0xc]          ;612
00007e  2000              MOVS     r0,#0                 ;614
000080  e7ca              B        |L15.24|
                  |L15.130|
000082  2002              MOVS     r0,#2                 ;618
000084  e7c8              B        |L15.24|
;;;621    
                          ENDP


                          AREA ||i.HAL_SMARTCARD_TxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SMARTCARD_TxCpltCallback PROC
;;;889      */
;;;890     __weak void HAL_SMARTCARD_TxCpltCallback(SMARTCARD_HandleTypeDef *hsc)
000000  4770              BX       lr
;;;891    {
;;;892      /* Prevent unused argument(s) compilation warning */
;;;893      UNUSED(hsc);
;;;894      /* NOTE : This function Should not be modified, when the callback is needed,
;;;895                the HAL_SMARTCARD_TxCpltCallback could be implemented in the user file
;;;896       */ 
;;;897    }
;;;898    
                          ENDP


                          AREA ||i.SMARTCARD_DMAError||, CODE, READONLY, ALIGN=1

                  SMARTCARD_DMAError PROC
;;;1028     */
;;;1029   static void SMARTCARD_DMAError(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;1030   {
000002  4605              MOV      r5,r0
;;;1031     SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;1032   
;;;1033     hsc->RxXferCount = 0;
000006  2000              MOVS     r0,#0
000008  87e0              STRH     r0,[r4,#0x3e]
;;;1034     hsc->TxXferCount = 0;
00000a  86e0              STRH     r0,[r4,#0x36]
;;;1035     hsc->ErrorCode = HAL_SMARTCARD_ERROR_DMA;
00000c  2010              MOVS     r0,#0x10
00000e  64e0              STR      r0,[r4,#0x4c]
;;;1036     hsc->State= HAL_SMARTCARD_STATE_READY;
000010  2001              MOVS     r0,#1
000012  f8840049          STRB     r0,[r4,#0x49]
;;;1037   
;;;1038     HAL_SMARTCARD_ErrorCallback(hsc);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       HAL_SMARTCARD_ErrorCallback
;;;1039   }
00001c  bd70              POP      {r4-r6,pc}
;;;1040   
                          ENDP


                          AREA ||i.SMARTCARD_DMAReceiveCplt||, CODE, READONLY, ALIGN=1

                  SMARTCARD_DMAReceiveCplt PROC
;;;999      */
;;;1000   static void SMARTCARD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;1001   {
000002  4605              MOV      r5,r0
;;;1002     SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;1003   
;;;1004     hsc->RxXferCount = 0;
000006  2000              MOVS     r0,#0
000008  87e0              STRH     r0,[r4,#0x3e]
;;;1005     
;;;1006     /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
;;;1007     in the USART CR3 register */
;;;1008     hsc->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
00000a  6820              LDR      r0,[r4,#0]
00000c  6940              LDR      r0,[r0,#0x14]
00000e  f0200040          BIC      r0,r0,#0x40
000012  6821              LDR      r1,[r4,#0]
000014  6148              STR      r0,[r1,#0x14]
;;;1009     
;;;1010     /* Check if a non-blocking transmit process is ongoing or not */
;;;1011     if(hsc->State == HAL_SMARTCARD_STATE_BUSY_TX_RX) 
000016  f8940049          LDRB     r0,[r4,#0x49]
00001a  2832              CMP      r0,#0x32
00001c  d103              BNE      |L18.38|
;;;1012     {
;;;1013       hsc->State = HAL_SMARTCARD_STATE_BUSY_TX;
00001e  2012              MOVS     r0,#0x12
000020  f8840049          STRB     r0,[r4,#0x49]
000024  e002              B        |L18.44|
                  |L18.38|
;;;1014     }
;;;1015     else
;;;1016     {
;;;1017       hsc->State = HAL_SMARTCARD_STATE_READY;
000026  2001              MOVS     r0,#1
000028  f8840049          STRB     r0,[r4,#0x49]
                  |L18.44|
;;;1018     }
;;;1019     
;;;1020     HAL_SMARTCARD_RxCpltCallback(hsc);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       HAL_SMARTCARD_RxCpltCallback
;;;1021   }
000032  bd70              POP      {r4-r6,pc}
;;;1022   
                          ENDP


                          AREA ||i.SMARTCARD_DMATransmitCplt||, CODE, READONLY, ALIGN=1

                  SMARTCARD_DMATransmitCplt PROC
;;;979      */
;;;980    static void SMARTCARD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;981    {
;;;982      SMARTCARD_HandleTypeDef* hsc = ( SMARTCARD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000002  6b88              LDR      r0,[r1,#0x38]
;;;983      
;;;984      hsc->TxXferCount = 0;
000004  2200              MOVS     r2,#0
000006  86c2              STRH     r2,[r0,#0x36]
;;;985      
;;;986      /* Disable the DMA transfer for transmit request by setting the DMAT bit
;;;987      in the USART CR3 register */
;;;988      hsc->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
000008  6802              LDR      r2,[r0,#0]
00000a  6952              LDR      r2,[r2,#0x14]
00000c  f0220280          BIC      r2,r2,#0x80
000010  6803              LDR      r3,[r0,#0]
000012  615a              STR      r2,[r3,#0x14]
;;;989    
;;;990      /* Enable the SMARTCARD Transmit Complete Interrupt */    
;;;991      __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_TC);
000014  6802              LDR      r2,[r0,#0]
000016  68d2              LDR      r2,[r2,#0xc]
000018  f0420240          ORR      r2,r2,#0x40
00001c  6803              LDR      r3,[r0,#0]
00001e  60da              STR      r2,[r3,#0xc]
;;;992    }
000020  4770              BX       lr
;;;993    
                          ENDP


                          AREA ||i.SMARTCARD_EndTransmit_IT||, CODE, READONLY, ALIGN=1

                  SMARTCARD_EndTransmit_IT PROC
;;;1146     */
;;;1147   static HAL_StatusTypeDef SMARTCARD_EndTransmit_IT(SMARTCARD_HandleTypeDef *hsmartcard)
000000  b510              PUSH     {r4,lr}
;;;1148   {
000002  4604              MOV      r4,r0
;;;1149     /* Disable the SMARTCARD Transmit Complete Interrupt */    
;;;1150     __HAL_SMARTCARD_DISABLE_IT(hsmartcard, SMARTCARD_IT_TC);
000004  6820              LDR      r0,[r4,#0]
000006  68c0              LDR      r0,[r0,#0xc]
000008  f0200040          BIC      r0,r0,#0x40
00000c  6821              LDR      r1,[r4,#0]
00000e  60c8              STR      r0,[r1,#0xc]
;;;1151     
;;;1152     /* Check if a receive process is ongoing or not */
;;;1153     if(hsmartcard->State == HAL_SMARTCARD_STATE_BUSY_TX_RX) 
000010  f8940049          LDRB     r0,[r4,#0x49]
000014  2832              CMP      r0,#0x32
000016  d103              BNE      |L20.32|
;;;1154     {
;;;1155       hsmartcard->State = HAL_SMARTCARD_STATE_BUSY_RX;
000018  2022              MOVS     r0,#0x22
00001a  f8840049          STRB     r0,[r4,#0x49]
00001e  e008              B        |L20.50|
                  |L20.32|
;;;1156     }
;;;1157     else
;;;1158     {
;;;1159       /* Disable the SMARTCARD Error Interrupt: (Frame error, noise error, overrun error) */
;;;1160       __HAL_SMARTCARD_DISABLE_IT(hsmartcard, SMARTCARD_IT_ERR);
000020  6820              LDR      r0,[r4,#0]
000022  6940              LDR      r0,[r0,#0x14]
000024  f0200001          BIC      r0,r0,#1
000028  6821              LDR      r1,[r4,#0]
00002a  6148              STR      r0,[r1,#0x14]
;;;1161       
;;;1162       hsmartcard->State = HAL_SMARTCARD_STATE_READY;
00002c  2001              MOVS     r0,#1
00002e  f8840049          STRB     r0,[r4,#0x49]
                  |L20.50|
;;;1163     }
;;;1164     
;;;1165     HAL_SMARTCARD_TxCpltCallback(hsmartcard);
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       HAL_SMARTCARD_TxCpltCallback
;;;1166     
;;;1167     return HAL_OK;
000038  2000              MOVS     r0,#0
;;;1168   }
00003a  bd10              POP      {r4,pc}
;;;1169   
                          ENDP


                          AREA ||i.SMARTCARD_Receive_IT||, CODE, READONLY, ALIGN=1

                  SMARTCARD_Receive_IT PROC
;;;1175     */
;;;1176   static HAL_StatusTypeDef SMARTCARD_Receive_IT(SMARTCARD_HandleTypeDef *hsc)
000000  b570              PUSH     {r4-r6,lr}
;;;1177   {
000002  4604              MOV      r4,r0
;;;1178     uint16_t* tmp;
;;;1179     uint32_t tmp1 = 0;
000004  2500              MOVS     r5,#0
;;;1180     
;;;1181     tmp1 = hsc->State;
000006  f8945049          LDRB     r5,[r4,#0x49]
;;;1182     if((tmp1 == HAL_SMARTCARD_STATE_BUSY_RX) || (tmp1 == HAL_SMARTCARD_STATE_BUSY_TX_RX))
00000a  2d22              CMP      r5,#0x22
00000c  d001              BEQ      |L21.18|
00000e  2d32              CMP      r5,#0x32
000010  d130              BNE      |L21.116|
                  |L21.18|
;;;1183     {
;;;1184       tmp = (uint16_t*) hsc->pRxBuffPtr;
000012  6ba6              LDR      r6,[r4,#0x38]
;;;1185       *tmp = (uint16_t)(hsc->Instance->DR & (uint16_t)0x00FF);
000014  6820              LDR      r0,[r4,#0]
000016  6840              LDR      r0,[r0,#4]
000018  b2c0              UXTB     r0,r0
00001a  8030              STRH     r0,[r6,#0]
;;;1186       hsc->pRxBuffPtr += 1;
00001c  6ba0              LDR      r0,[r4,#0x38]
00001e  1c40              ADDS     r0,r0,#1
000020  63a0              STR      r0,[r4,#0x38]
;;;1187       
;;;1188       if(--hsc->RxXferCount == 0)
000022  8fe0              LDRH     r0,[r4,#0x3e]
000024  1e40              SUBS     r0,r0,#1
000026  b280              UXTH     r0,r0
000028  87e0              STRH     r0,[r4,#0x3e]
00002a  bb08              CBNZ     r0,|L21.112|
;;;1189       {
;;;1190         __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_RXNE);
00002c  6820              LDR      r0,[r4,#0]
00002e  68c0              LDR      r0,[r0,#0xc]
000030  f0200020          BIC      r0,r0,#0x20
000034  6821              LDR      r1,[r4,#0]
000036  60c8              STR      r0,[r1,#0xc]
;;;1191         
;;;1192         /* Disable the SMARTCARD Parity Error Interrupt */
;;;1193         __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_PE);
000038  6820              LDR      r0,[r4,#0]
00003a  68c0              LDR      r0,[r0,#0xc]
00003c  f4207080          BIC      r0,r0,#0x100
000040  6821              LDR      r1,[r4,#0]
000042  60c8              STR      r0,[r1,#0xc]
;;;1194         
;;;1195         /* Disable the SMARTCARD Error Interrupt: (Frame error, noise error, overrun error) */
;;;1196         __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_ERR);
000044  6820              LDR      r0,[r4,#0]
000046  6940              LDR      r0,[r0,#0x14]
000048  f0200001          BIC      r0,r0,#1
00004c  6821              LDR      r1,[r4,#0]
00004e  6148              STR      r0,[r1,#0x14]
;;;1197         
;;;1198         /* Check if a non-blocking transmit process is ongoing or not */
;;;1199         if(hsc->State == HAL_SMARTCARD_STATE_BUSY_TX_RX) 
000050  f8940049          LDRB     r0,[r4,#0x49]
000054  2832              CMP      r0,#0x32
000056  d103              BNE      |L21.96|
;;;1200         {
;;;1201           hsc->State = HAL_SMARTCARD_STATE_BUSY_TX;
000058  2012              MOVS     r0,#0x12
00005a  f8840049          STRB     r0,[r4,#0x49]
00005e  e002              B        |L21.102|
                  |L21.96|
;;;1202         }
;;;1203         else
;;;1204         {
;;;1205           hsc->State = HAL_SMARTCARD_STATE_READY;
000060  2001              MOVS     r0,#1
000062  f8840049          STRB     r0,[r4,#0x49]
                  |L21.102|
;;;1206         }
;;;1207         
;;;1208         HAL_SMARTCARD_RxCpltCallback(hsc);
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       HAL_SMARTCARD_RxCpltCallback
;;;1209         
;;;1210         return HAL_OK;
00006c  2000              MOVS     r0,#0
                  |L21.110|
;;;1211       }
;;;1212       return HAL_OK;
;;;1213     }
;;;1214     else
;;;1215     {
;;;1216       return HAL_BUSY; 
;;;1217     }
;;;1218   }
00006e  bd70              POP      {r4-r6,pc}
                  |L21.112|
000070  2000              MOVS     r0,#0                 ;1212
000072  e7fc              B        |L21.110|
                  |L21.116|
000074  2002              MOVS     r0,#2                 ;1216
000076  e7fa              B        |L21.110|
;;;1219   
                          ENDP


                          AREA ||i.SMARTCARD_SetConfig||, CODE, READONLY, ALIGN=2

                  SMARTCARD_SetConfig PROC
;;;1225     */
;;;1226   static void SMARTCARD_SetConfig(SMARTCARD_HandleTypeDef *hsc)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1227   {
000004  4604              MOV      r4,r0
;;;1228     uint32_t tmpreg = 0x00;
000006  2500              MOVS     r5,#0
;;;1229     
;;;1230     /* Check the parameters */
;;;1231     assert_param(IS_SMARTCARD_INSTANCE(hsc->Instance));
;;;1232     assert_param(IS_SMARTCARD_POLARITY(hsc->Init.CLKPolarity));
;;;1233     assert_param(IS_SMARTCARD_PHASE(hsc->Init.CLKPhase));
;;;1234     assert_param(IS_SMARTCARD_LASTBIT(hsc->Init.CLKLastBit));
;;;1235     assert_param(IS_SMARTCARD_BAUDRATE(hsc->Init.BaudRate));  
;;;1236     assert_param(IS_SMARTCARD_WORD_LENGTH(hsc->Init.WordLength));
;;;1237     assert_param(IS_SMARTCARD_STOPBITS(hsc->Init.StopBits));
;;;1238     assert_param(IS_SMARTCARD_PARITY(hsc->Init.Parity));
;;;1239     assert_param(IS_SMARTCARD_MODE(hsc->Init.Mode));
;;;1240     assert_param(IS_SMARTCARD_NACK_STATE(hsc->Init.NACKState));
;;;1241   
;;;1242     /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
;;;1243        receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
;;;1244     hsc->Instance->CR1 &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
000008  6820              LDR      r0,[r4,#0]
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  f020000c          BIC      r0,r0,#0xc
000010  6821              LDR      r1,[r4,#0]
000012  60c8              STR      r0,[r1,#0xc]
;;;1245     
;;;1246     /*---------------------------- USART CR2 Configuration ---------------------*/
;;;1247     tmpreg = hsc->Instance->CR2;
000014  6820              LDR      r0,[r4,#0]
000016  6905              LDR      r5,[r0,#0x10]
;;;1248     /* Clear CLKEN, CPOL, CPHA and LBCL bits */
;;;1249     tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL));
000018  f4256570          BIC      r5,r5,#0xf00
;;;1250     /* Configure the SMARTCARD Clock, CPOL, CPHA and LastBit -----------------------*/
;;;1251     /* Set CPOL bit according to hsc->Init.CLKPolarity value */
;;;1252     /* Set CPHA bit according to hsc->Init.CLKPhase value */
;;;1253     /* Set LBCL bit according to hsc->Init.CLKLastBit value */
;;;1254     /* Set Stop Bits: Set STOP[13:12] bits according to hsc->Init.StopBits value */
;;;1255     tmpreg |= (uint32_t)(USART_CR2_CLKEN | hsc->Init.CLKPolarity | 
00001c  69a0              LDR      r0,[r4,#0x18]
00001e  f4406000          ORR      r0,r0,#0x800
000022  69e1              LDR      r1,[r4,#0x1c]
000024  4308              ORRS     r0,r0,r1
000026  6a21              LDR      r1,[r4,#0x20]
000028  4308              ORRS     r0,r0,r1
00002a  68e1              LDR      r1,[r4,#0xc]
00002c  4308              ORRS     r0,r0,r1
00002e  4305              ORRS     r5,r5,r0
;;;1256                         hsc->Init.CLKPhase| hsc->Init.CLKLastBit | hsc->Init.StopBits);
;;;1257     /* Write to USART CR2 */
;;;1258     hsc->Instance->CR2 = (uint32_t)tmpreg;
000030  6820              LDR      r0,[r4,#0]
000032  6105              STR      r5,[r0,#0x10]
;;;1259     
;;;1260     tmpreg = hsc->Instance->CR2;
000034  6820              LDR      r0,[r4,#0]
000036  6905              LDR      r5,[r0,#0x10]
;;;1261   
;;;1262     /* Clear STOP[13:12] bits */
;;;1263     tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
000038  f4255540          BIC      r5,r5,#0x3000
;;;1264   
;;;1265     /* Set Stop Bits: Set STOP[13:12] bits according to hsc->Init.StopBits value */
;;;1266     tmpreg |= (uint32_t)(hsc->Init.StopBits);
00003c  68e0              LDR      r0,[r4,#0xc]
00003e  4305              ORRS     r5,r5,r0
;;;1267     
;;;1268     /* Write to USART CR2 */
;;;1269     hsc->Instance->CR2 = (uint32_t)tmpreg;
000040  6820              LDR      r0,[r4,#0]
000042  6105              STR      r5,[r0,#0x10]
;;;1270   
;;;1271     /*-------------------------- USART CR1 Configuration -----------------------*/
;;;1272     tmpreg = hsc->Instance->CR1;
000044  6820              LDR      r0,[r4,#0]
000046  68c5              LDR      r5,[r0,#0xc]
;;;1273   
;;;1274     /* Clear M, PCE, PS, TE and RE bits */
;;;1275     tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
000048  f241600c          MOV      r0,#0x160c
00004c  4385              BICS     r5,r5,r0
;;;1276                                      USART_CR1_RE));
;;;1277   
;;;1278     /* Configure the SMARTCARD Word Length, Parity and mode: 
;;;1279        Set the M bits according to hsc->Init.WordLength value 
;;;1280        Set PCE and PS bits according to hsc->Init.Parity value
;;;1281        Set TE and RE bits according to hsc->Init.Mode value */
;;;1282     tmpreg |= (uint32_t)hsc->Init.WordLength | hsc->Init.Parity | hsc->Init.Mode;
00004e  6921              LDR      r1,[r4,#0x10]
000050  68a0              LDR      r0,[r4,#8]
000052  4308              ORRS     r0,r0,r1
000054  6961              LDR      r1,[r4,#0x14]
000056  4308              ORRS     r0,r0,r1
000058  4305              ORRS     r5,r5,r0
;;;1283   
;;;1284     /* Write to USART CR1 */
;;;1285     hsc->Instance->CR1 = (uint32_t)tmpreg;
00005a  6820              LDR      r0,[r4,#0]
00005c  60c5              STR      r5,[r0,#0xc]
;;;1286   
;;;1287     /*-------------------------- USART CR3 Configuration -----------------------*/  
;;;1288     /* Clear CTSE and RTSE bits */
;;;1289     hsc->Instance->CR3 &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
00005e  6820              LDR      r0,[r4,#0]
000060  6940              LDR      r0,[r0,#0x14]
000062  f4207040          BIC      r0,r0,#0x300
000066  6821              LDR      r1,[r4,#0]
000068  6148              STR      r0,[r1,#0x14]
;;;1290   
;;;1291     /*-------------------------- USART BRR Configuration -----------------------*/
;;;1292     if((hsc->Instance == USART1) || (hsc->Instance == USART6))
00006a  4939              LDR      r1,|L22.336|
00006c  6820              LDR      r0,[r4,#0]
00006e  4288              CMP      r0,r1
000070  d003              BEQ      |L22.122|
000072  4938              LDR      r1,|L22.340|
000074  6820              LDR      r0,[r4,#0]
000076  4288              CMP      r0,r1
000078  d134              BNE      |L22.228|
                  |L22.122|
;;;1293     {
;;;1294       hsc->Instance->BRR = SMARTCARD_BRR(HAL_RCC_GetPCLK2Freq(), hsc->Init.BaudRate);
00007a  f7fffffe          BL       HAL_RCC_GetPCLK2Freq
00007e  eb0001c0          ADD      r1,r0,r0,LSL #3
000082  eb011000          ADD      r0,r1,r0,LSL #4
000086  6861              LDR      r1,[r4,#4]
000088  0089              LSLS     r1,r1,#2
00008a  fbb0f0f1          UDIV     r0,r0,r1
00008e  2164              MOVS     r1,#0x64
000090  fbb0f6f1          UDIV     r6,r0,r1
000094  f7fffffe          BL       HAL_RCC_GetPCLK2Freq
000098  eb0001c0          ADD      r1,r0,r0,LSL #3
00009c  eb011000          ADD      r0,r1,r0,LSL #4
0000a0  6861              LDR      r1,[r4,#4]
0000a2  0089              LSLS     r1,r1,#2
0000a4  fbb0f7f1          UDIV     r7,r0,r1
0000a8  f7fffffe          BL       HAL_RCC_GetPCLK2Freq
0000ac  eb0001c0          ADD      r1,r0,r0,LSL #3
0000b0  eb011000          ADD      r0,r1,r0,LSL #4
0000b4  6861              LDR      r1,[r4,#4]
0000b6  0089              LSLS     r1,r1,#2
0000b8  fbb0f0f1          UDIV     r0,r0,r1
0000bc  2164              MOVS     r1,#0x64
0000be  fbb0f0f1          UDIV     r0,r0,r1
0000c2  eb0001c0          ADD      r1,r0,r0,LSL #3
0000c6  eb011000          ADD      r0,r1,r0,LSL #4
0000ca  eba70080          SUB      r0,r7,r0,LSL #2
0000ce  2132              MOVS     r1,#0x32
0000d0  eb011000          ADD      r0,r1,r0,LSL #4
0000d4  2164              MOVS     r1,#0x64
0000d6  fbb0f0f1          UDIV     r0,r0,r1
0000da  f366101f          BFI      r0,r6,#4,#28
0000de  6821              LDR      r1,[r4,#0]
0000e0  6088              STR      r0,[r1,#8]
0000e2  e033              B        |L22.332|
                  |L22.228|
;;;1295     }
;;;1296     else
;;;1297     {
;;;1298       hsc->Instance->BRR = SMARTCARD_BRR(HAL_RCC_GetPCLK1Freq(), hsc->Init.BaudRate);
0000e4  f7fffffe          BL       HAL_RCC_GetPCLK1Freq
0000e8  eb0001c0          ADD      r1,r0,r0,LSL #3
0000ec  eb011000          ADD      r0,r1,r0,LSL #4
0000f0  6861              LDR      r1,[r4,#4]
0000f2  0089              LSLS     r1,r1,#2
0000f4  fbb0f0f1          UDIV     r0,r0,r1
0000f8  2164              MOVS     r1,#0x64
0000fa  fbb0f6f1          UDIV     r6,r0,r1
0000fe  f7fffffe          BL       HAL_RCC_GetPCLK1Freq
000102  eb0001c0          ADD      r1,r0,r0,LSL #3
000106  eb011000          ADD      r0,r1,r0,LSL #4
00010a  6861              LDR      r1,[r4,#4]
00010c  0089              LSLS     r1,r1,#2
00010e  fbb0f7f1          UDIV     r7,r0,r1
000112  f7fffffe          BL       HAL_RCC_GetPCLK1Freq
000116  eb0001c0          ADD      r1,r0,r0,LSL #3
00011a  eb011000          ADD      r0,r1,r0,LSL #4
00011e  6861              LDR      r1,[r4,#4]
000120  0089              LSLS     r1,r1,#2
000122  fbb0f0f1          UDIV     r0,r0,r1
000126  2164              MOVS     r1,#0x64
000128  fbb0f0f1          UDIV     r0,r0,r1
00012c  eb0001c0          ADD      r1,r0,r0,LSL #3
000130  eb011000          ADD      r0,r1,r0,LSL #4
000134  eba70080          SUB      r0,r7,r0,LSL #2
000138  2132              MOVS     r1,#0x32
00013a  eb011000          ADD      r0,r1,r0,LSL #4
00013e  2164              MOVS     r1,#0x64
000140  fbb0f0f1          UDIV     r0,r0,r1
000144  f366101f          BFI      r0,r6,#4,#28
000148  6821              LDR      r1,[r4,#0]
00014a  6088              STR      r0,[r1,#8]
                  |L22.332|
;;;1299     }
;;;1300   }
00014c  e8bd81f0          POP      {r4-r8,pc}
;;;1301   
                          ENDP

                  |L22.336|
                          DCD      0x40011000
                  |L22.340|
                          DCD      0x40011400

                          AREA ||i.SMARTCARD_Transmit_IT||, CODE, READONLY, ALIGN=1

                  SMARTCARD_Transmit_IT PROC
;;;1111     */
;;;1112   static HAL_StatusTypeDef SMARTCARD_Transmit_IT(SMARTCARD_HandleTypeDef *hsc)
000000  b510              PUSH     {r4,lr}
;;;1113   {
000002  4601              MOV      r1,r0
;;;1114     uint16_t* tmp;
;;;1115     uint32_t tmp1 = 0;
000004  2200              MOVS     r2,#0
;;;1116     
;;;1117     tmp1 = hsc->State;
000006  f8912049          LDRB     r2,[r1,#0x49]
;;;1118     if((tmp1 == HAL_SMARTCARD_STATE_BUSY_TX) || (tmp1 == HAL_SMARTCARD_STATE_BUSY_TX_RX))
00000a  2a12              CMP      r2,#0x12
00000c  d001              BEQ      |L23.18|
00000e  2a32              CMP      r2,#0x32
000010  d11b              BNE      |L23.74|
                  |L23.18|
;;;1119     {
;;;1120       tmp = (uint16_t*) hsc->pTxBuffPtr;
000012  6b0b              LDR      r3,[r1,#0x30]
;;;1121       hsc->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
000014  8818              LDRH     r0,[r3,#0]
000016  f3c00008          UBFX     r0,r0,#0,#9
00001a  680c              LDR      r4,[r1,#0]
00001c  6060              STR      r0,[r4,#4]
;;;1122       hsc->pTxBuffPtr += 1;    
00001e  6b08              LDR      r0,[r1,#0x30]
000020  1c40              ADDS     r0,r0,#1
000022  6308              STR      r0,[r1,#0x30]
;;;1123       
;;;1124       if(--hsc->TxXferCount == 0)
000024  8ec8              LDRH     r0,[r1,#0x36]
000026  1e40              SUBS     r0,r0,#1
000028  b280              UXTH     r0,r0
00002a  86c8              STRH     r0,[r1,#0x36]
00002c  b958              CBNZ     r0,|L23.70|
;;;1125       {
;;;1126         /* Disable the SMARTCARD Transmit data register empty Interrupt */
;;;1127         __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_TXE);
00002e  6808              LDR      r0,[r1,#0]
000030  68c0              LDR      r0,[r0,#0xc]
000032  f0200080          BIC      r0,r0,#0x80
000036  680c              LDR      r4,[r1,#0]
000038  60e0              STR      r0,[r4,#0xc]
;;;1128         
;;;1129         /* Enable the SMARTCARD Transmit Complete Interrupt */    
;;;1130         __HAL_SMARTCARD_ENABLE_IT(hsc, SMARTCARD_IT_TC);
00003a  6808              LDR      r0,[r1,#0]
00003c  68c0              LDR      r0,[r0,#0xc]
00003e  f0400040          ORR      r0,r0,#0x40
000042  680c              LDR      r4,[r1,#0]
000044  60e0              STR      r0,[r4,#0xc]
                  |L23.70|
;;;1131       }
;;;1132       
;;;1133       return HAL_OK;
000046  2000              MOVS     r0,#0
                  |L23.72|
;;;1134     }
;;;1135     else
;;;1136     {
;;;1137       return HAL_BUSY;
;;;1138     }
;;;1139   }
000048  bd10              POP      {r4,pc}
                  |L23.74|
00004a  2002              MOVS     r0,#2                 ;1137
00004c  e7fc              B        |L23.72|
;;;1140   
                          ENDP


                          AREA ||i.SMARTCARD_WaitOnFlagUntilTimeout||, CODE, READONLY, ALIGN=1

                  SMARTCARD_WaitOnFlagUntilTimeout PROC
;;;1048     */
;;;1049   static HAL_StatusTypeDef SMARTCARD_WaitOnFlagUntilTimeout(SMARTCARD_HandleTypeDef *hsc, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1050   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;1051     uint32_t tickstart = 0;
00000c  f04f0800          MOV      r8,#0
;;;1052   
;;;1053     /* Get tick */ 
;;;1054     tickstart = HAL_GetTick();
000010  f7fffffe          BL       HAL_GetTick
000014  4680              MOV      r8,r0
;;;1055   
;;;1056     /* Wait until flag is set */
;;;1057     if(Status == RESET)
000016  bb5f              CBNZ     r7,|L24.112|
;;;1058     {    
;;;1059       while(__HAL_SMARTCARD_GET_FLAG(hsc, Flag) == RESET)
000018  e01f              B        |L24.90|
                  |L24.26|
;;;1060       {
;;;1061         /* Check for the Timeout */
;;;1062         if(Timeout != HAL_MAX_DELAY)
00001a  1c68              ADDS     r0,r5,#1
00001c  b1e8              CBZ      r0,|L24.90|
;;;1063         {
;;;1064           if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
00001e  b12d              CBZ      r5,|L24.44|
000020  f7fffffe          BL       HAL_GetTick
000024  eba00008          SUB      r0,r0,r8
000028  42a8              CMP      r0,r5
00002a  d916              BLS      |L24.90|
                  |L24.44|
;;;1065           {
;;;1066             /* Disable TXE and RXNE interrupts for the interrupt process */
;;;1067             __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_TXE);
00002c  6820              LDR      r0,[r4,#0]
00002e  68c0              LDR      r0,[r0,#0xc]
000030  f0200080          BIC      r0,r0,#0x80
000034  6821              LDR      r1,[r4,#0]
000036  60c8              STR      r0,[r1,#0xc]
;;;1068             __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_RXNE);
000038  6820              LDR      r0,[r4,#0]
00003a  68c0              LDR      r0,[r0,#0xc]
00003c  f0200020          BIC      r0,r0,#0x20
000040  6821              LDR      r1,[r4,#0]
000042  60c8              STR      r0,[r1,#0xc]
;;;1069             
;;;1070             hsc->State= HAL_SMARTCARD_STATE_READY;
000044  2001              MOVS     r0,#1
000046  f8840049          STRB     r0,[r4,#0x49]
;;;1071             
;;;1072             /* Process Unlocked */
;;;1073             __HAL_UNLOCK(hsc);
00004a  bf00              NOP      
00004c  2000              MOVS     r0,#0
00004e  f8840048          STRB     r0,[r4,#0x48]
000052  bf00              NOP      
;;;1074             
;;;1075             return HAL_TIMEOUT;
000054  2003              MOVS     r0,#3
                  |L24.86|
;;;1076           }
;;;1077         }
;;;1078       }
;;;1079     }
;;;1080     else
;;;1081     {
;;;1082       while(__HAL_SMARTCARD_GET_FLAG(hsc, Flag) != RESET)
;;;1083       {
;;;1084         /* Check for the Timeout */
;;;1085         if(Timeout != HAL_MAX_DELAY)
;;;1086         {
;;;1087           if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
;;;1088           {
;;;1089             /* Disable TXE and RXNE interrupts for the interrupt process */
;;;1090             __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_TXE);
;;;1091             __HAL_SMARTCARD_DISABLE_IT(hsc, SMARTCARD_IT_RXNE);
;;;1092             
;;;1093             hsc->State= HAL_SMARTCARD_STATE_READY;
;;;1094             
;;;1095             /* Process Unlocked */
;;;1096             __HAL_UNLOCK(hsc);
;;;1097             
;;;1098             return HAL_TIMEOUT;
;;;1099           }
;;;1100         }
;;;1101       }
;;;1102     }
;;;1103     return HAL_OK;
;;;1104   }
000056  e8bd81f0          POP      {r4-r8,pc}
                  |L24.90|
00005a  6820              LDR      r0,[r4,#0]            ;1059
00005c  6800              LDR      r0,[r0,#0]            ;1059
00005e  4030              ANDS     r0,r0,r6              ;1059
000060  42b0              CMP      r0,r6                 ;1059
000062  d101              BNE      |L24.104|
000064  2001              MOVS     r0,#1                 ;1059
000066  e000              B        |L24.106|
                  |L24.104|
000068  2000              MOVS     r0,#0                 ;1059
                  |L24.106|
00006a  2800              CMP      r0,#0                 ;1059
00006c  d0d5              BEQ      |L24.26|
00006e  e029              B        |L24.196|
                  |L24.112|
000070  e01e              B        |L24.176|
                  |L24.114|
000072  1c68              ADDS     r0,r5,#1              ;1085
000074  b1e0              CBZ      r0,|L24.176|
000076  b12d              CBZ      r5,|L24.132|
000078  f7fffffe          BL       HAL_GetTick
00007c  eba00008          SUB      r0,r0,r8              ;1087
000080  42a8              CMP      r0,r5                 ;1087
000082  d915              BLS      |L24.176|
                  |L24.132|
000084  6820              LDR      r0,[r4,#0]            ;1090
000086  68c0              LDR      r0,[r0,#0xc]          ;1090
000088  f0200080          BIC      r0,r0,#0x80           ;1090
00008c  6821              LDR      r1,[r4,#0]            ;1090
00008e  60c8              STR      r0,[r1,#0xc]          ;1090
000090  6820              LDR      r0,[r4,#0]            ;1091
000092  68c0              LDR      r0,[r0,#0xc]          ;1091
000094  f0200020          BIC      r0,r0,#0x20           ;1091
000098  6821              LDR      r1,[r4,#0]            ;1091
00009a  60c8              STR      r0,[r1,#0xc]          ;1091
00009c  2001              MOVS     r0,#1                 ;1093
00009e  f8840049          STRB     r0,[r4,#0x49]         ;1093
0000a2  bf00              NOP                            ;1096
0000a4  2000              MOVS     r0,#0                 ;1096
0000a6  f8840048          STRB     r0,[r4,#0x48]         ;1096
0000aa  bf00              NOP                            ;1096
0000ac  2003              MOVS     r0,#3                 ;1098
0000ae  e7d2              B        |L24.86|
                  |L24.176|
0000b0  6820              LDR      r0,[r4,#0]            ;1082
0000b2  6800              LDR      r0,[r0,#0]            ;1082
0000b4  4030              ANDS     r0,r0,r6              ;1082
0000b6  42b0              CMP      r0,r6                 ;1082
0000b8  d101              BNE      |L24.190|
0000ba  2001              MOVS     r0,#1                 ;1082
0000bc  e000              B        |L24.192|
                  |L24.190|
0000be  2000              MOVS     r0,#0                 ;1082
                  |L24.192|
0000c0  2800              CMP      r0,#0                 ;1082
0000c2  d1d6              BNE      |L24.114|
                  |L24.196|
0000c4  2000              MOVS     r0,#0                 ;1103
0000c6  e7c6              B        |L24.86|
;;;1105   
                          ENDP


;*** Start embedded assembler ***

#line 1 "HALLIB\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_smartcard.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___25_stm32f4xx_hal_smartcard_c_06a09ac9____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___25_stm32f4xx_hal_smartcard_c_06a09ac9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___25_stm32f4xx_hal_smartcard_c_06a09ac9____REVSH|
#line 402
|__asm___25_stm32f4xx_hal_smartcard_c_06a09ac9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___25_stm32f4xx_hal_smartcard_c_06a09ac9____RRX|
#line 587
|__asm___25_stm32f4xx_hal_smartcard_c_06a09ac9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
