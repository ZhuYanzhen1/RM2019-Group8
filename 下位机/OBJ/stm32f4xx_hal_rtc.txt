; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_hal_rtc.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm32f4xx_hal_rtc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm32f4xx_hal_rtc.crf HALLIB\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rtc.c]
                          THUMB

                          AREA ||i.HAL_RTC_AlarmAEventCallback||, CODE, READONLY, ALIGN=1

                  HAL_RTC_AlarmAEventCallback PROC
;;;1339     */
;;;1340   __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
000000  4770              BX       lr
;;;1341   {
;;;1342     /* Prevent unused argument(s) compilation warning */
;;;1343     UNUSED(hrtc);
;;;1344     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1345               the HAL_RTC_AlarmAEventCallback could be implemented in the user file
;;;1346      */
;;;1347   }
;;;1348   
                          ENDP


                          AREA ||i.HAL_RTC_AlarmIRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RTC_AlarmIRQHandler PROC
;;;1298     */
;;;1299   void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
000000  b510              PUSH     {r4,lr}
;;;1300   {  
000002  4604              MOV      r4,r0
;;;1301     if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
000004  6820              LDR      r0,[r4,#0]
000006  68c0              LDR      r0,[r0,#0xc]
000008  f3c02000          UBFX     r0,r0,#8,#1
00000c  b178              CBZ      r0,|L2.46|
;;;1302     {
;;;1303       /* Get the status of the Interrupt */
;;;1304       if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
00000e  6820              LDR      r0,[r4,#0]
000010  6880              LDR      r0,[r0,#8]
000012  f4005080          AND      r0,r0,#0x1000
000016  b150              CBZ      r0,|L2.46|
;;;1305       {
;;;1306         /* AlarmA callback */ 
;;;1307         HAL_RTC_AlarmAEventCallback(hrtc);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       HAL_RTC_AlarmAEventCallback
;;;1308         
;;;1309         /* Clear the Alarm interrupt pending bit */
;;;1310         __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
00001e  6820              LDR      r0,[r4,#0]
000020  68c0              LDR      r0,[r0,#0xc]
000022  f0000080          AND      r0,r0,#0x80
000026  f46070c0          ORN      r0,r0,#0x180
00002a  6821              LDR      r1,[r4,#0]
00002c  60c8              STR      r0,[r1,#0xc]
                  |L2.46|
;;;1311       }
;;;1312     }
;;;1313     
;;;1314     if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
00002e  6820              LDR      r0,[r4,#0]
000030  68c0              LDR      r0,[r0,#0xc]
000032  f3c02040          UBFX     r0,r0,#9,#1
000036  b178              CBZ      r0,|L2.88|
;;;1315     {
;;;1316       /* Get the status of the Interrupt */
;;;1317       if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
000038  6820              LDR      r0,[r4,#0]
00003a  6880              LDR      r0,[r0,#8]
00003c  f4005000          AND      r0,r0,#0x2000
000040  b150              CBZ      r0,|L2.88|
;;;1318       {
;;;1319         /* AlarmB callback */ 
;;;1320         HAL_RTCEx_AlarmBEventCallback(hrtc);
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       HAL_RTCEx_AlarmBEventCallback
;;;1321         
;;;1322         /* Clear the Alarm interrupt pending bit */
;;;1323         __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
000048  6820              LDR      r0,[r4,#0]
00004a  68c0              LDR      r0,[r0,#0xc]
00004c  f0000080          AND      r0,r0,#0x80
000050  f4607020          ORN      r0,r0,#0x280
000054  6821              LDR      r1,[r4,#0]
000056  60c8              STR      r0,[r1,#0xc]
                  |L2.88|
;;;1324       }
;;;1325     }
;;;1326     
;;;1327     /* Clear the EXTI's line Flag for RTC Alarm */
;;;1328     __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
000058  f44f3000          MOV      r0,#0x20000
00005c  4902              LDR      r1,|L2.104|
00005e  6008              STR      r0,[r1,#0]
;;;1329     
;;;1330     /* Change RTC state */
;;;1331     hrtc->State = HAL_RTC_STATE_READY; 
000060  2001              MOVS     r0,#1
000062  7760              STRB     r0,[r4,#0x1d]
;;;1332   }
000064  bd10              POP      {r4,pc}
;;;1333   
                          ENDP

000066  0000              DCW      0x0000
                  |L2.104|
                          DCD      0x40013c14

                          AREA ||i.HAL_RTC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RTC_DeInit PROC
;;;277      */
;;;278    HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
000000  b570              PUSH     {r4-r6,lr}
;;;279    {
000002  4604              MOV      r4,r0
;;;280      uint32_t tickstart = 0;
000004  2500              MOVS     r5,#0
;;;281    
;;;282      /* Set RTC state */
;;;283      hrtc->State = HAL_RTC_STATE_BUSY; 
000006  2002              MOVS     r0,#2
000008  7760              STRB     r0,[r4,#0x1d]
;;;284      
;;;285      /* Disable the write protection for RTC registers */
;;;286      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
00000a  bf00              NOP      
00000c  20ca              MOVS     r0,#0xca
00000e  6821              LDR      r1,[r4,#0]
000010  6248              STR      r0,[r1,#0x24]
000012  2053              MOVS     r0,#0x53
000014  6821              LDR      r1,[r4,#0]
000016  6248              STR      r0,[r1,#0x24]
000018  bf00              NOP      
;;;287      
;;;288      /* Set Initialization mode */
;;;289      if(RTC_EnterInitMode(hrtc) != HAL_OK)
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       RTC_EnterInitMode
000020  b140              CBZ      r0,|L3.52|
;;;290      {
;;;291        /* Enable the write protection for RTC registers */
;;;292        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
000022  bf00              NOP      
000024  20ff              MOVS     r0,#0xff
000026  6821              LDR      r1,[r4,#0]
000028  6248              STR      r0,[r1,#0x24]
00002a  bf00              NOP      
;;;293        
;;;294        /* Set RTC state */
;;;295        hrtc->State = HAL_RTC_STATE_ERROR;
00002c  2004              MOVS     r0,#4
00002e  7760              STRB     r0,[r4,#0x1d]
;;;296        
;;;297        return HAL_ERROR;
000030  2001              MOVS     r0,#1
                  |L3.50|
;;;298      }  
;;;299      else
;;;300      {
;;;301        /* Reset TR, DR and CR registers */
;;;302        hrtc->Instance->TR = (uint32_t)0x00000000;
;;;303        hrtc->Instance->DR = (uint32_t)0x00002101;
;;;304        /* Reset All CR bits except CR[2:0] */
;;;305        hrtc->Instance->CR &= (uint32_t)0x00000007;
;;;306    
;;;307        /* Get tick */
;;;308        tickstart = HAL_GetTick();
;;;309    
;;;310        /* Wait till WUTWF flag is set and if Time out is reached exit */
;;;311        while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
;;;312        {
;;;313          if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
;;;314          { 
;;;315            /* Enable the write protection for RTC registers */
;;;316            __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
;;;317            
;;;318            /* Set RTC state */
;;;319            hrtc->State = HAL_RTC_STATE_TIMEOUT;
;;;320            
;;;321            return HAL_TIMEOUT;
;;;322          }      
;;;323        }
;;;324        
;;;325        /* Reset all RTC CR register bits */
;;;326        hrtc->Instance->CR &= (uint32_t)0x00000000;
;;;327        hrtc->Instance->WUTR = (uint32_t)0x0000FFFF;
;;;328        hrtc->Instance->PRER = (uint32_t)0x007F00FF;
;;;329        hrtc->Instance->CALIBR = (uint32_t)0x00000000;
;;;330        hrtc->Instance->ALRMAR = (uint32_t)0x00000000;
;;;331        hrtc->Instance->ALRMBR = (uint32_t)0x00000000;
;;;332        hrtc->Instance->SHIFTR = (uint32_t)0x00000000;
;;;333        hrtc->Instance->CALR = (uint32_t)0x00000000;
;;;334        hrtc->Instance->ALRMASSR = (uint32_t)0x00000000;
;;;335        hrtc->Instance->ALRMBSSR = (uint32_t)0x00000000;
;;;336        
;;;337        /* Reset ISR register and exit initialization mode */
;;;338        hrtc->Instance->ISR = (uint32_t)0x00000000;
;;;339        
;;;340        /* Reset Tamper and alternate functions configuration register */
;;;341        hrtc->Instance->TAFCR = 0x00000000;
;;;342        
;;;343        /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
;;;344        if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
;;;345        {
;;;346          if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
;;;347          {
;;;348            /* Enable the write protection for RTC registers */
;;;349            __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
;;;350            
;;;351            hrtc->State = HAL_RTC_STATE_ERROR;
;;;352            
;;;353            return HAL_ERROR;
;;;354          }
;;;355        }    
;;;356      }
;;;357      
;;;358      /* Enable the write protection for RTC registers */
;;;359      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;360      
;;;361      /* De-Initialize RTC MSP */
;;;362      HAL_RTC_MspDeInit(hrtc);
;;;363      
;;;364      hrtc->State = HAL_RTC_STATE_RESET; 
;;;365    
;;;366      /* Release Lock */
;;;367      __HAL_UNLOCK(hrtc);
;;;368    
;;;369      return HAL_OK;
;;;370    }
000032  bd70              POP      {r4-r6,pc}
                  |L3.52|
000034  2000              MOVS     r0,#0                 ;302
000036  6821              LDR      r1,[r4,#0]            ;302
000038  6008              STR      r0,[r1,#0]            ;302
00003a  f2421001          MOV      r0,#0x2101            ;303
00003e  6821              LDR      r1,[r4,#0]            ;303
000040  6048              STR      r0,[r1,#4]            ;303
000042  6820              LDR      r0,[r4,#0]            ;305
000044  6880              LDR      r0,[r0,#8]            ;305
000046  f0000007          AND      r0,r0,#7              ;305
00004a  6821              LDR      r1,[r4,#0]            ;305
00004c  6088              STR      r0,[r1,#8]            ;305
00004e  f7fffffe          BL       HAL_GetTick
000052  4605              MOV      r5,r0                 ;308
000054  e00d              B        |L3.114|
                  |L3.86|
000056  f7fffffe          BL       HAL_GetTick
00005a  1b40              SUBS     r0,r0,r5              ;313
00005c  f5b07f7a          CMP      r0,#0x3e8             ;313
000060  d907              BLS      |L3.114|
000062  bf00              NOP                            ;316
000064  20ff              MOVS     r0,#0xff              ;316
000066  6821              LDR      r1,[r4,#0]            ;316
000068  6248              STR      r0,[r1,#0x24]         ;316
00006a  bf00              NOP                            ;316
00006c  2003              MOVS     r0,#3                 ;319
00006e  7760              STRB     r0,[r4,#0x1d]         ;319
000070  e7df              B        |L3.50|
                  |L3.114|
000072  6820              LDR      r0,[r4,#0]            ;311
000074  68c0              LDR      r0,[r0,#0xc]          ;311
000076  f0000004          AND      r0,r0,#4              ;311
00007a  2800              CMP      r0,#0                 ;311
00007c  d0eb              BEQ      |L3.86|
00007e  6820              LDR      r0,[r4,#0]            ;326
000080  6880              LDR      r0,[r0,#8]            ;326
000082  2000              MOVS     r0,#0                 ;326
000084  6821              LDR      r1,[r4,#0]            ;326
000086  6088              STR      r0,[r1,#8]            ;326
000088  f64f70ff          MOV      r0,#0xffff            ;327
00008c  6821              LDR      r1,[r4,#0]            ;327
00008e  6148              STR      r0,[r1,#0x14]         ;327
000090  481b              LDR      r0,|L3.256|
000092  6821              LDR      r1,[r4,#0]            ;328
000094  6108              STR      r0,[r1,#0x10]         ;328
000096  2000              MOVS     r0,#0                 ;329
000098  6821              LDR      r1,[r4,#0]            ;329
00009a  6188              STR      r0,[r1,#0x18]         ;329
00009c  6821              LDR      r1,[r4,#0]            ;330
00009e  61c8              STR      r0,[r1,#0x1c]         ;330
0000a0  6821              LDR      r1,[r4,#0]            ;331
0000a2  6208              STR      r0,[r1,#0x20]         ;331
0000a4  6821              LDR      r1,[r4,#0]            ;332
0000a6  62c8              STR      r0,[r1,#0x2c]         ;332
0000a8  6821              LDR      r1,[r4,#0]            ;333
0000aa  63c8              STR      r0,[r1,#0x3c]         ;333
0000ac  6821              LDR      r1,[r4,#0]            ;334
0000ae  6448              STR      r0,[r1,#0x44]         ;334
0000b0  6821              LDR      r1,[r4,#0]            ;335
0000b2  6488              STR      r0,[r1,#0x48]         ;335
0000b4  6821              LDR      r1,[r4,#0]            ;338
0000b6  60c8              STR      r0,[r1,#0xc]          ;338
0000b8  6821              LDR      r1,[r4,#0]            ;341
0000ba  6408              STR      r0,[r1,#0x40]         ;341
0000bc  6820              LDR      r0,[r4,#0]            ;344
0000be  6880              LDR      r0,[r0,#8]            ;344
0000c0  f0000020          AND      r0,r0,#0x20           ;344
0000c4  b960              CBNZ     r0,|L3.224|
0000c6  4620              MOV      r0,r4                 ;346
0000c8  f7fffffe          BL       HAL_RTC_WaitForSynchro
0000cc  b140              CBZ      r0,|L3.224|
0000ce  bf00              NOP                            ;349
0000d0  20ff              MOVS     r0,#0xff              ;349
0000d2  6821              LDR      r1,[r4,#0]            ;349
0000d4  6248              STR      r0,[r1,#0x24]         ;349
0000d6  bf00              NOP                            ;349
0000d8  2004              MOVS     r0,#4                 ;351
0000da  7760              STRB     r0,[r4,#0x1d]         ;351
0000dc  2001              MOVS     r0,#1                 ;353
0000de  e7a8              B        |L3.50|
                  |L3.224|
0000e0  bf00              NOP                            ;359
0000e2  20ff              MOVS     r0,#0xff              ;359
0000e4  6821              LDR      r1,[r4,#0]            ;359
0000e6  6248              STR      r0,[r1,#0x24]         ;359
0000e8  bf00              NOP                            ;359
0000ea  4620              MOV      r0,r4                 ;362
0000ec  f7fffffe          BL       HAL_RTC_MspDeInit
0000f0  2000              MOVS     r0,#0                 ;364
0000f2  7760              STRB     r0,[r4,#0x1d]         ;364
0000f4  bf00              NOP                            ;367
0000f6  7720              STRB     r0,[r4,#0x1c]         ;367
0000f8  bf00              NOP                            ;367
0000fa  bf00              NOP                            ;369
0000fc  e799              B        |L3.50|
;;;371    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L3.256|
                          DCD      0x007f00ff

                          AREA ||i.HAL_RTC_DeactivateAlarm||, CODE, READONLY, ALIGN=1

                  HAL_RTC_DeactivateAlarm PROC
;;;1150     */
;;;1151   HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
000000  b570              PUSH     {r4-r6,lr}
;;;1152   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1153     uint32_t tickstart = 0;
000006  2600              MOVS     r6,#0
;;;1154     
;;;1155     /* Check the parameters */
;;;1156     assert_param(IS_RTC_ALARM(Alarm));
;;;1157     
;;;1158     /* Process Locked */ 
;;;1159     __HAL_LOCK(hrtc);
000008  bf00              NOP      
00000a  7f20              LDRB     r0,[r4,#0x1c]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L4.20|
000010  2002              MOVS     r0,#2
                  |L4.18|
;;;1160     
;;;1161     hrtc->State = HAL_RTC_STATE_BUSY;
;;;1162     
;;;1163     /* Disable the write protection for RTC registers */
;;;1164     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;1165     
;;;1166     if(Alarm == RTC_ALARM_A)
;;;1167     {
;;;1168       /* AlarmA */
;;;1169       __HAL_RTC_ALARMA_DISABLE(hrtc);
;;;1170       
;;;1171       /* In case of interrupt mode is used, the interrupt source must disabled */ 
;;;1172       __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
;;;1173   
;;;1174       /* Get tick */
;;;1175       tickstart = HAL_GetTick();
;;;1176   
;;;1177       /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
;;;1178       while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
;;;1179       {
;;;1180         if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
;;;1181         { 
;;;1182           /* Enable the write protection for RTC registers */
;;;1183           __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1184           
;;;1185           hrtc->State = HAL_RTC_STATE_TIMEOUT; 
;;;1186           
;;;1187           /* Process Unlocked */ 
;;;1188           __HAL_UNLOCK(hrtc);
;;;1189           
;;;1190           return HAL_TIMEOUT;
;;;1191         }      
;;;1192       }
;;;1193     }
;;;1194     else
;;;1195     {
;;;1196       /* AlarmB */
;;;1197       __HAL_RTC_ALARMB_DISABLE(hrtc);
;;;1198       
;;;1199       /* In case of interrupt mode is used, the interrupt source must disabled */ 
;;;1200       __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
;;;1201   
;;;1202       /* Get tick */
;;;1203       tickstart = HAL_GetTick();
;;;1204   
;;;1205       /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
;;;1206       while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
;;;1207       {
;;;1208         if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
;;;1209         {
;;;1210           /* Enable the write protection for RTC registers */
;;;1211           __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1212           
;;;1213           hrtc->State = HAL_RTC_STATE_TIMEOUT; 
;;;1214           
;;;1215           /* Process Unlocked */ 
;;;1216           __HAL_UNLOCK(hrtc);
;;;1217           
;;;1218           return HAL_TIMEOUT;
;;;1219         }    
;;;1220       }
;;;1221     }
;;;1222     /* Enable the write protection for RTC registers */
;;;1223     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1224     
;;;1225     hrtc->State = HAL_RTC_STATE_READY; 
;;;1226     
;;;1227     /* Process Unlocked */ 
;;;1228     __HAL_UNLOCK(hrtc);  
;;;1229     
;;;1230     return HAL_OK; 
;;;1231   }
000012  bd70              POP      {r4-r6,pc}
                  |L4.20|
000014  2001              MOVS     r0,#1                 ;1159
000016  7720              STRB     r0,[r4,#0x1c]         ;1159
000018  bf00              NOP                            ;1159
00001a  2002              MOVS     r0,#2                 ;1161
00001c  7760              STRB     r0,[r4,#0x1d]         ;1161
00001e  bf00              NOP                            ;1164
000020  20ca              MOVS     r0,#0xca              ;1164
000022  6821              LDR      r1,[r4,#0]            ;1164
000024  6248              STR      r0,[r1,#0x24]         ;1164
000026  2053              MOVS     r0,#0x53              ;1164
000028  6821              LDR      r1,[r4,#0]            ;1164
00002a  6248              STR      r0,[r1,#0x24]         ;1164
00002c  bf00              NOP                            ;1164
00002e  f5b57f80          CMP      r5,#0x100             ;1166
000032  d129              BNE      |L4.136|
000034  6820              LDR      r0,[r4,#0]            ;1169
000036  6880              LDR      r0,[r0,#8]            ;1169
000038  f4207080          BIC      r0,r0,#0x100          ;1169
00003c  6821              LDR      r1,[r4,#0]            ;1169
00003e  6088              STR      r0,[r1,#8]            ;1169
000040  6820              LDR      r0,[r4,#0]            ;1172
000042  6880              LDR      r0,[r0,#8]            ;1172
000044  f4205080          BIC      r0,r0,#0x1000         ;1172
000048  6821              LDR      r1,[r4,#0]            ;1172
00004a  6088              STR      r0,[r1,#8]            ;1172
00004c  f7fffffe          BL       HAL_GetTick
000050  4606              MOV      r6,r0                 ;1175
000052  e012              B        |L4.122|
                  |L4.84|
000054  f7fffffe          BL       HAL_GetTick
000058  1b80              SUBS     r0,r0,r6              ;1180
00005a  f5b07f7a          CMP      r0,#0x3e8             ;1180
00005e  d90c              BLS      |L4.122|
000060  bf00              NOP                            ;1183
000062  20ff              MOVS     r0,#0xff              ;1183
000064  6821              LDR      r1,[r4,#0]            ;1183
000066  6248              STR      r0,[r1,#0x24]         ;1183
000068  bf00              NOP                            ;1183
00006a  2003              MOVS     r0,#3                 ;1185
00006c  7760              STRB     r0,[r4,#0x1d]         ;1185
00006e  bf00              NOP                            ;1188
000070  2000              MOVS     r0,#0                 ;1188
000072  7720              STRB     r0,[r4,#0x1c]         ;1188
000074  bf00              NOP                            ;1188
000076  2003              MOVS     r0,#3                 ;1190
000078  e7cb              B        |L4.18|
                  |L4.122|
00007a  6820              LDR      r0,[r4,#0]            ;1178
00007c  68c0              LDR      r0,[r0,#0xc]          ;1178
00007e  f0000001          AND      r0,r0,#1              ;1178
000082  2800              CMP      r0,#0                 ;1178
000084  d0e6              BEQ      |L4.84|
000086  e028              B        |L4.218|
                  |L4.136|
000088  6820              LDR      r0,[r4,#0]            ;1197
00008a  6880              LDR      r0,[r0,#8]            ;1197
00008c  f4207000          BIC      r0,r0,#0x200          ;1197
000090  6821              LDR      r1,[r4,#0]            ;1197
000092  6088              STR      r0,[r1,#8]            ;1197
000094  6820              LDR      r0,[r4,#0]            ;1200
000096  6880              LDR      r0,[r0,#8]            ;1200
000098  f4205000          BIC      r0,r0,#0x2000         ;1200
00009c  6821              LDR      r1,[r4,#0]            ;1200
00009e  6088              STR      r0,[r1,#8]            ;1200
0000a0  f7fffffe          BL       HAL_GetTick
0000a4  4606              MOV      r6,r0                 ;1203
0000a6  e012              B        |L4.206|
                  |L4.168|
0000a8  f7fffffe          BL       HAL_GetTick
0000ac  1b80              SUBS     r0,r0,r6              ;1208
0000ae  f5b07f7a          CMP      r0,#0x3e8             ;1208
0000b2  d90c              BLS      |L4.206|
0000b4  bf00              NOP                            ;1211
0000b6  20ff              MOVS     r0,#0xff              ;1211
0000b8  6821              LDR      r1,[r4,#0]            ;1211
0000ba  6248              STR      r0,[r1,#0x24]         ;1211
0000bc  bf00              NOP                            ;1211
0000be  2003              MOVS     r0,#3                 ;1213
0000c0  7760              STRB     r0,[r4,#0x1d]         ;1213
0000c2  bf00              NOP                            ;1216
0000c4  2000              MOVS     r0,#0                 ;1216
0000c6  7720              STRB     r0,[r4,#0x1c]         ;1216
0000c8  bf00              NOP                            ;1216
0000ca  2003              MOVS     r0,#3                 ;1218
0000cc  e7a1              B        |L4.18|
                  |L4.206|
0000ce  6820              LDR      r0,[r4,#0]            ;1206
0000d0  68c0              LDR      r0,[r0,#0xc]          ;1206
0000d2  f3c00040          UBFX     r0,r0,#1,#1           ;1206
0000d6  2800              CMP      r0,#0                 ;1206
0000d8  d0e6              BEQ      |L4.168|
                  |L4.218|
0000da  bf00              NOP                            ;1223
0000dc  20ff              MOVS     r0,#0xff              ;1223
0000de  6821              LDR      r1,[r4,#0]            ;1223
0000e0  6248              STR      r0,[r1,#0x24]         ;1223
0000e2  bf00              NOP                            ;1223
0000e4  2001              MOVS     r0,#1                 ;1225
0000e6  7760              STRB     r0,[r4,#0x1d]         ;1225
0000e8  bf00              NOP                            ;1228
0000ea  2000              MOVS     r0,#0                 ;1228
0000ec  7720              STRB     r0,[r4,#0x1c]         ;1228
0000ee  bf00              NOP                            ;1228
0000f0  bf00              NOP                            ;1230
0000f2  e78e              B        |L4.18|
;;;1232              
                          ENDP


                          AREA ||i.HAL_RTC_GetAlarm||, CODE, READONLY, ALIGN=1

                  HAL_RTC_GetAlarm PROC
;;;1247     */
;;;1248   HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1249   {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;1250     uint32_t tmpreg = 0, subsecondtmpreg = 0;
00000c  2300              MOVS     r3,#0
00000e  4698              MOV      r8,r3
;;;1251     
;;;1252     /* Check the parameters */
;;;1253     assert_param(IS_RTC_FORMAT(Format));
;;;1254     assert_param(IS_RTC_ALARM(Alarm));
;;;1255     
;;;1256     if(Alarm == RTC_ALARM_A)
000010  f5b67f80          CMP      r6,#0x100
000014  d109              BNE      |L5.42|
;;;1257     {
;;;1258       /* AlarmA */
;;;1259       sAlarm->Alarm = RTC_ALARM_A;
000016  f44f7080          MOV      r0,#0x100
00001a  6260              STR      r0,[r4,#0x24]
;;;1260       
;;;1261       tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
00001c  6828              LDR      r0,[r5,#0]
00001e  69c3              LDR      r3,[r0,#0x1c]
;;;1262       subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
000020  6828              LDR      r0,[r5,#0]
000022  6c40              LDR      r0,[r0,#0x44]
000024  f3c0080e          UBFX     r8,r0,#0,#15
000028  e008              B        |L5.60|
                  |L5.42|
;;;1263     }
;;;1264     else
;;;1265     {
;;;1266       sAlarm->Alarm = RTC_ALARM_B;
00002a  f44f7000          MOV      r0,#0x200
00002e  6260              STR      r0,[r4,#0x24]
;;;1267       
;;;1268       tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
000030  6828              LDR      r0,[r5,#0]
000032  6a03              LDR      r3,[r0,#0x20]
;;;1269       subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
000034  6828              LDR      r0,[r5,#0]
000036  6c80              LDR      r0,[r0,#0x48]
000038  f3c0080e          UBFX     r8,r0,#0,#15
                  |L5.60|
;;;1270     }
;;;1271       
;;;1272     /* Fill the structure with the read parameters */
;;;1273     sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16);
00003c  f3c34005          UBFX     r0,r3,#16,#6
000040  7020              STRB     r0,[r4,#0]
;;;1274     sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8);
000042  f3c32006          UBFX     r0,r3,#8,#7
000046  7060              STRB     r0,[r4,#1]
;;;1275     sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
000048  f003007f          AND      r0,r3,#0x7f
00004c  70a0              STRB     r0,[r4,#2]
;;;1276     sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
00004e  f4030080          AND      r0,r3,#0x400000
000052  0c00              LSRS     r0,r0,#16
000054  70e0              STRB     r0,[r4,#3]
;;;1277     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
000056  f8c48004          STR      r8,[r4,#4]
;;;1278     sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
00005a  f3c36005          UBFX     r0,r3,#24,#6
00005e  f8840020          STRB     r0,[r4,#0x20]
;;;1279     sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
000062  f0034080          AND      r0,r3,#0x40000000
000066  61e0              STR      r0,[r4,#0x1c]
;;;1280     sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
000068  f0033080          AND      r0,r3,#0x80808080
00006c  6160              STR      r0,[r4,#0x14]
;;;1281       
;;;1282     if(Format == RTC_FORMAT_BIN)
00006e  b98f              CBNZ     r7,|L5.148|
;;;1283     {
;;;1284       sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
000070  7820              LDRB     r0,[r4,#0]
000072  f7fffffe          BL       RTC_Bcd2ToByte
000076  7020              STRB     r0,[r4,#0]
;;;1285       sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
000078  7860              LDRB     r0,[r4,#1]
00007a  f7fffffe          BL       RTC_Bcd2ToByte
00007e  7060              STRB     r0,[r4,#1]
;;;1286       sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
000080  78a0              LDRB     r0,[r4,#2]
000082  f7fffffe          BL       RTC_Bcd2ToByte
000086  70a0              STRB     r0,[r4,#2]
;;;1287       sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
000088  f8940020          LDRB     r0,[r4,#0x20]
00008c  f7fffffe          BL       RTC_Bcd2ToByte
000090  f8840020          STRB     r0,[r4,#0x20]
                  |L5.148|
;;;1288     }  
;;;1289       
;;;1290     return HAL_OK;
000094  2000              MOVS     r0,#0
;;;1291   }
000096  e8bd81f0          POP      {r4-r8,pc}
;;;1292   
                          ENDP


                          AREA ||i.HAL_RTC_GetDate||, CODE, READONLY, ALIGN=2

                  HAL_RTC_GetDate PROC
;;;719      */
;;;720    HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
000000  b570              PUSH     {r4-r6,lr}
;;;721    {
000002  4605              MOV      r5,r0
000004  460b              MOV      r3,r1
000006  4616              MOV      r6,r2
;;;722      uint32_t datetmpreg = 0;
000008  2400              MOVS     r4,#0
;;;723    
;;;724      /* Check the parameters */
;;;725      assert_param(IS_RTC_FORMAT(Format));
;;;726              
;;;727      /* Get the DR register */
;;;728      datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
00000a  6828              LDR      r0,[r5,#0]
00000c  6840              LDR      r0,[r0,#4]
00000e  490e              LDR      r1,|L6.72|
000010  ea000401          AND      r4,r0,r1
;;;729    
;;;730      /* Fill the structure fields with the read parameters */
;;;731      sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
000014  0c20              LSRS     r0,r4,#16
000016  70d8              STRB     r0,[r3,#3]
;;;732      sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
000018  f3c42004          UBFX     r0,r4,#8,#5
00001c  7058              STRB     r0,[r3,#1]
;;;733      sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
00001e  f004003f          AND      r0,r4,#0x3f
000022  7098              STRB     r0,[r3,#2]
;;;734      sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
000024  f3c43042          UBFX     r0,r4,#13,#3
000028  7018              STRB     r0,[r3,#0]
;;;735    
;;;736      /* Check the input parameters format */
;;;737      if(Format == RTC_FORMAT_BIN)
00002a  b95e              CBNZ     r6,|L6.68|
;;;738      {    
;;;739        /* Convert the date structure parameters to Binary format */
;;;740        sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
00002c  78d8              LDRB     r0,[r3,#3]
00002e  f7fffffe          BL       RTC_Bcd2ToByte
000032  70d8              STRB     r0,[r3,#3]
;;;741        sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
000034  7858              LDRB     r0,[r3,#1]
000036  f7fffffe          BL       RTC_Bcd2ToByte
00003a  7058              STRB     r0,[r3,#1]
;;;742        sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
00003c  7898              LDRB     r0,[r3,#2]
00003e  f7fffffe          BL       RTC_Bcd2ToByte
000042  7098              STRB     r0,[r3,#2]
                  |L6.68|
;;;743      }
;;;744      return HAL_OK;
000044  2000              MOVS     r0,#0
;;;745    }
000046  bd70              POP      {r4-r6,pc}
;;;746    
                          ENDP

                  |L6.72|
                          DCD      0x00ffff3f

                          AREA ||i.HAL_RTC_GetState||, CODE, READONLY, ALIGN=1

                  HAL_RTC_GetState PROC
;;;1463     */
;;;1464   HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef* hrtc)
000000  4601              MOV      r1,r0
;;;1465   {
;;;1466     return hrtc->State;
000002  7f48              LDRB     r0,[r1,#0x1d]
;;;1467   }
000004  4770              BX       lr
;;;1468   
                          ENDP


                          AREA ||i.HAL_RTC_GetTime||, CODE, READONLY, ALIGN=2

                  HAL_RTC_GetTime PROC
;;;562      */
;;;563    HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
000000  b570              PUSH     {r4-r6,lr}
;;;564    {
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
000006  4616              MOV      r6,r2
;;;565      uint32_t tmpreg = 0;
000008  2500              MOVS     r5,#0
;;;566    
;;;567      /* Check the parameters */
;;;568      assert_param(IS_RTC_FORMAT(Format));
;;;569      
;;;570      /* Get subseconds structure field from the corresponding register */
;;;571      sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
00000a  6820              LDR      r0,[r4,#0]
00000c  6a80              LDR      r0,[r0,#0x28]
00000e  6058              STR      r0,[r3,#4]
;;;572      
;;;573      /* Get SecondFraction structure field from the corresponding register field*/
;;;574      sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
000010  6820              LDR      r0,[r4,#0]
000012  6900              LDR      r0,[r0,#0x10]
000014  f3c0000e          UBFX     r0,r0,#0,#15
000018  6098              STR      r0,[r3,#8]
;;;575    
;;;576      /* Get the TR register */
;;;577      tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
00001a  6820              LDR      r0,[r4,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  490f              LDR      r1,|L8.92|
000020  ea000501          AND      r5,r0,r1
;;;578      
;;;579      /* Fill the structure fields with the read parameters */
;;;580      sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
000024  f3c54005          UBFX     r0,r5,#16,#6
000028  7018              STRB     r0,[r3,#0]
;;;581      sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
00002a  f3c52006          UBFX     r0,r5,#8,#7
00002e  7058              STRB     r0,[r3,#1]
;;;582      sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
000030  f005007f          AND      r0,r5,#0x7f
000034  7098              STRB     r0,[r3,#2]
;;;583      sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
000036  f4050080          AND      r0,r5,#0x400000
00003a  0c00              LSRS     r0,r0,#16
00003c  70d8              STRB     r0,[r3,#3]
;;;584      
;;;585      /* Check the input parameters format */
;;;586      if(Format == RTC_FORMAT_BIN)
00003e  b95e              CBNZ     r6,|L8.88|
;;;587      {
;;;588        /* Convert the time structure parameters to Binary format */
;;;589        sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
000040  7818              LDRB     r0,[r3,#0]
000042  f7fffffe          BL       RTC_Bcd2ToByte
000046  7018              STRB     r0,[r3,#0]
;;;590        sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
000048  7858              LDRB     r0,[r3,#1]
00004a  f7fffffe          BL       RTC_Bcd2ToByte
00004e  7058              STRB     r0,[r3,#1]
;;;591        sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
000050  7898              LDRB     r0,[r3,#2]
000052  f7fffffe          BL       RTC_Bcd2ToByte
000056  7098              STRB     r0,[r3,#2]
                  |L8.88|
;;;592      }
;;;593      
;;;594      return HAL_OK;
000058  2000              MOVS     r0,#0
;;;595    }
00005a  bd70              POP      {r4-r6,pc}
;;;596    
                          ENDP

                  |L8.92|
                          DCD      0x007f7f7f

                          AREA ||i.HAL_RTC_Init||, CODE, READONLY, ALIGN=2

                  HAL_RTC_Init PROC
;;;202      */
;;;203    HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
000000  b510              PUSH     {r4,lr}
;;;204    {
000002  4604              MOV      r4,r0
;;;205      /* Check the RTC peripheral state */
;;;206      if(hrtc == NULL)
000004  b90c              CBNZ     r4,|L9.10|
;;;207      {
;;;208         return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L9.8|
;;;209      }
;;;210      
;;;211      /* Check the parameters */
;;;212      assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
;;;213      assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
;;;214      assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
;;;215      assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
;;;216      assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
;;;217      assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
;;;218        
;;;219      if(hrtc->State == HAL_RTC_STATE_RESET)
;;;220      {
;;;221        /* Allocate lock resource and initialize it */
;;;222        hrtc->Lock = HAL_UNLOCKED;
;;;223        /* Initialize RTC MSP */
;;;224        HAL_RTC_MspInit(hrtc);
;;;225      }
;;;226      
;;;227      /* Set RTC state */  
;;;228      hrtc->State = HAL_RTC_STATE_BUSY;  
;;;229           
;;;230      /* Disable the write protection for RTC registers */
;;;231      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;232    
;;;233      /* Set Initialization mode */
;;;234      if(RTC_EnterInitMode(hrtc) != HAL_OK)
;;;235      {
;;;236        /* Enable the write protection for RTC registers */
;;;237        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
;;;238        
;;;239        /* Set RTC state */
;;;240        hrtc->State = HAL_RTC_STATE_ERROR;
;;;241        
;;;242        return HAL_ERROR;
;;;243      } 
;;;244      else
;;;245      { 
;;;246        /* Clear RTC_CR FMT, OSEL and POL Bits */
;;;247        hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
;;;248        /* Set RTC_CR register */
;;;249        hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
;;;250        
;;;251        /* Configure the RTC PRER */
;;;252        hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
;;;253        hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
;;;254        
;;;255        /* Exit Initialization mode */
;;;256        hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
;;;257        
;;;258        hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
;;;259        hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
;;;260        
;;;261        /* Enable the write protection for RTC registers */
;;;262        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
;;;263        
;;;264        /* Set RTC state */
;;;265        hrtc->State = HAL_RTC_STATE_READY;
;;;266        
;;;267        return HAL_OK;
;;;268      }
;;;269    }
000008  bd10              POP      {r4,pc}
                  |L9.10|
00000a  7f60              LDRB     r0,[r4,#0x1d]         ;219
00000c  b920              CBNZ     r0,|L9.24|
00000e  2000              MOVS     r0,#0                 ;222
000010  7720              STRB     r0,[r4,#0x1c]         ;222
000012  4620              MOV      r0,r4                 ;224
000014  f7fffffe          BL       HAL_RTC_MspInit
                  |L9.24|
000018  2002              MOVS     r0,#2                 ;228
00001a  7760              STRB     r0,[r4,#0x1d]         ;228
00001c  bf00              NOP                            ;231
00001e  20ca              MOVS     r0,#0xca              ;231
000020  6821              LDR      r1,[r4,#0]            ;231
000022  6248              STR      r0,[r1,#0x24]         ;231
000024  2053              MOVS     r0,#0x53              ;231
000026  6821              LDR      r1,[r4,#0]            ;231
000028  6248              STR      r0,[r1,#0x24]         ;231
00002a  bf00              NOP                            ;231
00002c  4620              MOV      r0,r4                 ;234
00002e  f7fffffe          BL       RTC_EnterInitMode
000032  b140              CBZ      r0,|L9.70|
000034  bf00              NOP                            ;237
000036  20ff              MOVS     r0,#0xff              ;237
000038  6821              LDR      r1,[r4,#0]            ;237
00003a  6248              STR      r0,[r1,#0x24]         ;237
00003c  bf00              NOP                            ;237
00003e  2004              MOVS     r0,#4                 ;240
000040  7760              STRB     r0,[r4,#0x1d]         ;240
000042  2001              MOVS     r0,#1                 ;242
000044  e7e0              B        |L9.8|
                  |L9.70|
000046  6820              LDR      r0,[r4,#0]            ;247
000048  6880              LDR      r0,[r0,#8]            ;247
00004a  4919              LDR      r1,|L9.176|
00004c  4008              ANDS     r0,r0,r1              ;247
00004e  6821              LDR      r1,[r4,#0]            ;247
000050  6088              STR      r0,[r1,#8]            ;247
000052  6921              LDR      r1,[r4,#0x10]         ;249
000054  6860              LDR      r0,[r4,#4]            ;249
000056  4308              ORRS     r0,r0,r1              ;249
000058  6961              LDR      r1,[r4,#0x14]         ;249
00005a  4308              ORRS     r0,r0,r1              ;249
00005c  6821              LDR      r1,[r4,#0]            ;249
00005e  6889              LDR      r1,[r1,#8]            ;249
000060  4308              ORRS     r0,r0,r1              ;249
000062  6821              LDR      r1,[r4,#0]            ;249
000064  6088              STR      r0,[r1,#8]            ;249
000066  6821              LDR      r1,[r4,#0]            ;252
000068  68e0              LDR      r0,[r4,#0xc]          ;252
00006a  6108              STR      r0,[r1,#0x10]         ;252
00006c  6820              LDR      r0,[r4,#0]            ;253
00006e  6901              LDR      r1,[r0,#0x10]         ;253
000070  8920              LDRH     r0,[r4,#8]            ;253
000072  ea414000          ORR      r0,r1,r0,LSL #16      ;253
000076  6821              LDR      r1,[r4,#0]            ;253
000078  6108              STR      r0,[r1,#0x10]         ;253
00007a  6820              LDR      r0,[r4,#0]            ;256
00007c  68c0              LDR      r0,[r0,#0xc]          ;256
00007e  f0200080          BIC      r0,r0,#0x80           ;256
000082  6821              LDR      r1,[r4,#0]            ;256
000084  60c8              STR      r0,[r1,#0xc]          ;256
000086  6820              LDR      r0,[r4,#0]            ;258
000088  6c00              LDR      r0,[r0,#0x40]         ;258
00008a  f4202080          BIC      r0,r0,#0x40000        ;258
00008e  6821              LDR      r1,[r4,#0]            ;258
000090  6408              STR      r0,[r1,#0x40]         ;258
000092  6820              LDR      r0,[r4,#0]            ;259
000094  6c00              LDR      r0,[r0,#0x40]         ;259
000096  69a1              LDR      r1,[r4,#0x18]         ;259
000098  4308              ORRS     r0,r0,r1              ;259
00009a  6821              LDR      r1,[r4,#0]            ;259
00009c  6408              STR      r0,[r1,#0x40]         ;259
00009e  bf00              NOP                            ;262
0000a0  20ff              MOVS     r0,#0xff              ;262
0000a2  6821              LDR      r1,[r4,#0]            ;262
0000a4  6248              STR      r0,[r1,#0x24]         ;262
0000a6  bf00              NOP                            ;262
0000a8  2001              MOVS     r0,#1                 ;265
0000aa  7760              STRB     r0,[r4,#0x1d]         ;265
0000ac  2000              MOVS     r0,#0                 ;267
0000ae  e7ab              B        |L9.8|
;;;270    
                          ENDP

                  |L9.176|
                          DCD      0xff8fffbf

                          AREA ||i.HAL_RTC_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_RTC_MspDeInit PROC
;;;392      */
;;;393    __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
000000  4770              BX       lr
;;;394    {
;;;395      /* Prevent unused argument(s) compilation warning */
;;;396      UNUSED(hrtc);
;;;397      /* NOTE : This function Should not be modified, when the callback is needed,
;;;398                the HAL_RTC_MspDeInit could be implemented in the user file
;;;399       */ 
;;;400    }
;;;401    
                          ENDP


                          AREA ||i.HAL_RTC_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_RTC_MspInit PROC
;;;377      */
;;;378    __weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
000000  4770              BX       lr
;;;379    {
;;;380      /* Prevent unused argument(s) compilation warning */
;;;381      UNUSED(hrtc);
;;;382      /* NOTE : This function Should not be modified, when the callback is needed,
;;;383                the HAL_RTC_MspInit could be implemented in the user file
;;;384       */ 
;;;385    }
;;;386    
                          ENDP


                          AREA ||i.HAL_RTC_PollForAlarmAEvent||, CODE, READONLY, ALIGN=1

                  HAL_RTC_PollForAlarmAEvent PROC
;;;1355     */
;;;1356   HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;1357   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1358     uint32_t tickstart = 0; 
000006  2600              MOVS     r6,#0
;;;1359   
;;;1360       /* Get tick */
;;;1361       tickstart = HAL_GetTick();
000008  f7fffffe          BL       HAL_GetTick
00000c  4606              MOV      r6,r0
;;;1362   
;;;1363     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == RESET)
00000e  e00a              B        |L12.38|
                  |L12.16|
;;;1364     {
;;;1365       if(Timeout != HAL_MAX_DELAY)
000010  1c68              ADDS     r0,r5,#1
000012  b140              CBZ      r0,|L12.38|
;;;1366       {
;;;1367         if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
000014  b125              CBZ      r5,|L12.32|
000016  f7fffffe          BL       HAL_GetTick
00001a  1b80              SUBS     r0,r0,r6
00001c  42a8              CMP      r0,r5
00001e  d902              BLS      |L12.38|
                  |L12.32|
;;;1368         {
;;;1369           hrtc->State = HAL_RTC_STATE_TIMEOUT;
000020  2003              MOVS     r0,#3
000022  7760              STRB     r0,[r4,#0x1d]
                  |L12.36|
;;;1370           return HAL_TIMEOUT;
;;;1371         }
;;;1372       }
;;;1373     }
;;;1374     
;;;1375     /* Clear the Alarm interrupt pending bit */
;;;1376     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
;;;1377     
;;;1378     /* Change RTC state */
;;;1379     hrtc->State = HAL_RTC_STATE_READY; 
;;;1380     
;;;1381     return HAL_OK;  
;;;1382   }
000024  bd70              POP      {r4-r6,pc}
                  |L12.38|
000026  6820              LDR      r0,[r4,#0]            ;1363
000028  68c0              LDR      r0,[r0,#0xc]          ;1363
00002a  f3c02000          UBFX     r0,r0,#8,#1           ;1363
00002e  2800              CMP      r0,#0                 ;1363
000030  d0ee              BEQ      |L12.16|
000032  6820              LDR      r0,[r4,#0]            ;1376
000034  68c0              LDR      r0,[r0,#0xc]          ;1376
000036  f0000080          AND      r0,r0,#0x80           ;1376
00003a  f46070c0          ORN      r0,r0,#0x180          ;1376
00003e  6821              LDR      r1,[r4,#0]            ;1376
000040  60c8              STR      r0,[r1,#0xc]          ;1376
000042  2001              MOVS     r0,#1                 ;1379
000044  7760              STRB     r0,[r4,#0x1d]         ;1379
000046  2000              MOVS     r0,#0                 ;1381
000048  e7ec              B        |L12.36|
;;;1383   
                          ENDP


                          AREA ||i.HAL_RTC_SetAlarm||, CODE, READONLY, ALIGN=1

                  HAL_RTC_SetAlarm PROC
;;;774      */
;;;775    HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;776    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;777      uint32_t tickstart = 0;
00000a  2700              MOVS     r7,#0
;;;778      uint32_t tmpreg = 0, subsecondtmpreg = 0;
00000c  46b8              MOV      r8,r7
00000e  46b9              MOV      r9,r7
;;;779      
;;;780      /* Check the parameters */
;;;781      assert_param(IS_RTC_FORMAT(Format));
;;;782      assert_param(IS_RTC_ALARM(sAlarm->Alarm));
;;;783      assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
;;;784      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
;;;785      assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
;;;786      assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
;;;787      
;;;788      /* Process Locked */ 
;;;789      __HAL_LOCK(hrtc);
000010  bf00              NOP      
000012  7f20              LDRB     r0,[r4,#0x1c]
000014  2801              CMP      r0,#1
000016  d102              BNE      |L13.30|
000018  2002              MOVS     r0,#2
                  |L13.26|
;;;790      
;;;791      hrtc->State = HAL_RTC_STATE_BUSY;
;;;792      
;;;793      if(Format == RTC_FORMAT_BIN)
;;;794      {
;;;795        if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
;;;796        {
;;;797          assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
;;;798          assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
;;;799        } 
;;;800        else
;;;801        {
;;;802          sAlarm->AlarmTime.TimeFormat = 0x00;
;;;803          assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
;;;804        }
;;;805        assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
;;;806        assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
;;;807        
;;;808        if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
;;;809        {
;;;810          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
;;;811        }
;;;812        else
;;;813        {
;;;814          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
;;;815        }
;;;816        
;;;817        tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
;;;818                  ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
;;;819                  ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
;;;820                  ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
;;;821                  ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
;;;822                  ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
;;;823                  ((uint32_t)sAlarm->AlarmMask)); 
;;;824      }
;;;825      else
;;;826      {
;;;827        if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
;;;828        {
;;;829          tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
;;;830          assert_param(IS_RTC_HOUR12(tmpreg));
;;;831          assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
;;;832        } 
;;;833        else
;;;834        {
;;;835          sAlarm->AlarmTime.TimeFormat = 0x00;
;;;836          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
;;;837        }
;;;838        
;;;839        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
;;;840        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
;;;841        
;;;842        if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
;;;843        {
;;;844          tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
;;;845          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
;;;846        }
;;;847        else
;;;848        {
;;;849          tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
;;;850          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
;;;851        }  
;;;852        
;;;853        tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
;;;854                  ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
;;;855                  ((uint32_t) sAlarm->AlarmTime.Seconds) | \
;;;856                  ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
;;;857                  ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
;;;858                  ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
;;;859                  ((uint32_t)sAlarm->AlarmMask));   
;;;860      }
;;;861      
;;;862      /* Configure the Alarm A or Alarm B Sub Second registers */
;;;863      subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
;;;864      
;;;865      /* Disable the write protection for RTC registers */
;;;866      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;867    
;;;868      /* Configure the Alarm register */
;;;869      if(sAlarm->Alarm == RTC_ALARM_A)
;;;870      {
;;;871        /* Disable the Alarm A interrupt */
;;;872        __HAL_RTC_ALARMA_DISABLE(hrtc);
;;;873        
;;;874        /* In case of interrupt mode is used, the interrupt source must disabled */ 
;;;875        __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
;;;876    
;;;877        /* Get tick */
;;;878        tickstart = HAL_GetTick();
;;;879    
;;;880        /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
;;;881        while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
;;;882        {
;;;883          if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
;;;884          {
;;;885            /* Enable the write protection for RTC registers */
;;;886            __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;887            
;;;888            hrtc->State = HAL_RTC_STATE_TIMEOUT; 
;;;889            
;;;890            /* Process Unlocked */ 
;;;891            __HAL_UNLOCK(hrtc);
;;;892            
;;;893            return HAL_TIMEOUT;
;;;894          }   
;;;895        }
;;;896        
;;;897        hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
;;;898        /* Configure the Alarm A Sub Second register */
;;;899        hrtc->Instance->ALRMASSR = subsecondtmpreg;
;;;900        /* Configure the Alarm state: Enable Alarm */
;;;901        __HAL_RTC_ALARMA_ENABLE(hrtc);
;;;902      }
;;;903      else
;;;904      {
;;;905        /* Disable the Alarm B interrupt */
;;;906        __HAL_RTC_ALARMB_DISABLE(hrtc);
;;;907        
;;;908        /* In case of interrupt mode is used, the interrupt source must disabled */ 
;;;909        __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
;;;910    
;;;911        /* Get tick */
;;;912        tickstart = HAL_GetTick();
;;;913    
;;;914        /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
;;;915        while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
;;;916        {
;;;917          if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
;;;918          {
;;;919            /* Enable the write protection for RTC registers */
;;;920            __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;921            
;;;922            hrtc->State = HAL_RTC_STATE_TIMEOUT; 
;;;923            
;;;924            /* Process Unlocked */ 
;;;925            __HAL_UNLOCK(hrtc);
;;;926            
;;;927            return HAL_TIMEOUT;
;;;928          }  
;;;929        }    
;;;930        
;;;931        hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
;;;932        /* Configure the Alarm B Sub Second register */
;;;933        hrtc->Instance->ALRMBSSR = subsecondtmpreg;
;;;934        /* Configure the Alarm state: Enable Alarm */
;;;935        __HAL_RTC_ALARMB_ENABLE(hrtc); 
;;;936      }
;;;937      
;;;938      /* Enable the write protection for RTC registers */
;;;939      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
;;;940      
;;;941      /* Change RTC state */
;;;942      hrtc->State = HAL_RTC_STATE_READY; 
;;;943      
;;;944      /* Process Unlocked */ 
;;;945      __HAL_UNLOCK(hrtc);
;;;946      
;;;947      return HAL_OK;
;;;948    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L13.30|
00001e  2001              MOVS     r0,#1                 ;789
000020  7720              STRB     r0,[r4,#0x1c]         ;789
000022  bf00              NOP                            ;789
000024  2002              MOVS     r0,#2                 ;791
000026  7760              STRB     r0,[r4,#0x1d]         ;791
000028  bb46              CBNZ     r6,|L13.124|
00002a  6820              LDR      r0,[r4,#0]            ;795
00002c  6880              LDR      r0,[r0,#8]            ;795
00002e  f0000040          AND      r0,r0,#0x40           ;795
000032  b100              CBZ      r0,|L13.54|
000034  e002              B        |L13.60|
                  |L13.54|
000036  2000              MOVS     r0,#0                 ;802
000038  70e8              STRB     r0,[r5,#3]            ;802
00003a  bf00              NOP                            ;803
                  |L13.60|
00003c  69e8              LDR      r0,[r5,#0x1c]         ;808
00003e  b900              CBNZ     r0,|L13.66|
000040  e000              B        |L13.68|
                  |L13.66|
000042  bf00              NOP                            ;814
                  |L13.68|
000044  7828              LDRB     r0,[r5,#0]            ;817
000046  f7fffffe          BL       RTC_ByteToBcd2
00004a  0403              LSLS     r3,r0,#16             ;817
00004c  7868              LDRB     r0,[r5,#1]            ;817
00004e  f7fffffe          BL       RTC_ByteToBcd2
000052  ea432300          ORR      r3,r3,r0,LSL #8       ;817
000056  78a8              LDRB     r0,[r5,#2]            ;817
000058  f7fffffe          BL       RTC_ByteToBcd2
00005c  4303              ORRS     r3,r3,r0              ;817
00005e  78e8              LDRB     r0,[r5,#3]            ;817
000060  ea434300          ORR      r3,r3,r0,LSL #16      ;817
000064  f8950020          LDRB     r0,[r5,#0x20]         ;817
000068  f7fffffe          BL       RTC_ByteToBcd2
00006c  ea436000          ORR      r0,r3,r0,LSL #24      ;817
000070  69e9              LDR      r1,[r5,#0x1c]         ;817
000072  4308              ORRS     r0,r0,r1              ;817
000074  6969              LDR      r1,[r5,#0x14]         ;817
000076  ea400801          ORR      r8,r0,r1              ;817
00007a  e02d              B        |L13.216|
                  |L13.124|
00007c  6820              LDR      r0,[r4,#0]            ;827
00007e  6880              LDR      r0,[r0,#8]            ;827
000080  f0000040          AND      r0,r0,#0x40           ;827
000084  b120              CBZ      r0,|L13.144|
000086  7828              LDRB     r0,[r5,#0]            ;829
000088  f7fffffe          BL       RTC_Bcd2ToByte
00008c  4680              MOV      r8,r0                 ;829
00008e  e002              B        |L13.150|
                  |L13.144|
000090  2000              MOVS     r0,#0                 ;835
000092  70e8              STRB     r0,[r5,#3]            ;835
000094  bf00              NOP                            ;836
                  |L13.150|
000096  69e8              LDR      r0,[r5,#0x1c]         ;842
000098  b928              CBNZ     r0,|L13.166|
00009a  f8950020          LDRB     r0,[r5,#0x20]         ;844
00009e  f7fffffe          BL       RTC_Bcd2ToByte
0000a2  4680              MOV      r8,r0                 ;844
0000a4  e005              B        |L13.178|
                  |L13.166|
0000a6  f8950020          LDRB     r0,[r5,#0x20]         ;849
0000aa  f7fffffe          BL       RTC_Bcd2ToByte
0000ae  4680              MOV      r8,r0                 ;849
0000b0  bf00              NOP                            ;850
                  |L13.178|
0000b2  7828              LDRB     r0,[r5,#0]            ;853
0000b4  0400              LSLS     r0,r0,#16             ;853
0000b6  7869              LDRB     r1,[r5,#1]            ;853
0000b8  ea402001          ORR      r0,r0,r1,LSL #8       ;853
0000bc  78a9              LDRB     r1,[r5,#2]            ;853
0000be  4308              ORRS     r0,r0,r1              ;853
0000c0  78e9              LDRB     r1,[r5,#3]            ;853
0000c2  ea404001          ORR      r0,r0,r1,LSL #16      ;853
0000c6  f8951020          LDRB     r1,[r5,#0x20]         ;853
0000ca  ea406001          ORR      r0,r0,r1,LSL #24      ;853
0000ce  69e9              LDR      r1,[r5,#0x1c]         ;853
0000d0  4308              ORRS     r0,r0,r1              ;853
0000d2  6969              LDR      r1,[r5,#0x14]         ;853
0000d4  ea400801          ORR      r8,r0,r1              ;853
                  |L13.216|
0000d8  69a9              LDR      r1,[r5,#0x18]         ;863
0000da  6868              LDR      r0,[r5,#4]            ;863
0000dc  ea400901          ORR      r9,r0,r1              ;863
0000e0  bf00              NOP                            ;866
0000e2  20ca              MOVS     r0,#0xca              ;866
0000e4  6821              LDR      r1,[r4,#0]            ;866
0000e6  6248              STR      r0,[r1,#0x24]         ;866
0000e8  2053              MOVS     r0,#0x53              ;866
0000ea  6821              LDR      r1,[r4,#0]            ;866
0000ec  6248              STR      r0,[r1,#0x24]         ;866
0000ee  bf00              NOP                            ;866
0000f0  6a68              LDR      r0,[r5,#0x24]         ;869
0000f2  f5b07f80          CMP      r0,#0x100             ;869
0000f6  d135              BNE      |L13.356|
0000f8  6820              LDR      r0,[r4,#0]            ;872
0000fa  6880              LDR      r0,[r0,#8]            ;872
0000fc  f4207080          BIC      r0,r0,#0x100          ;872
000100  6821              LDR      r1,[r4,#0]            ;872
000102  6088              STR      r0,[r1,#8]            ;872
000104  6820              LDR      r0,[r4,#0]            ;875
000106  6880              LDR      r0,[r0,#8]            ;875
000108  f4205080          BIC      r0,r0,#0x1000         ;875
00010c  6821              LDR      r1,[r4,#0]            ;875
00010e  6088              STR      r0,[r1,#8]            ;875
000110  f7fffffe          BL       HAL_GetTick
000114  4607              MOV      r7,r0                 ;878
000116  e012              B        |L13.318|
                  |L13.280|
000118  f7fffffe          BL       HAL_GetTick
00011c  1bc0              SUBS     r0,r0,r7              ;883
00011e  f5b07f7a          CMP      r0,#0x3e8             ;883
000122  d90c              BLS      |L13.318|
000124  bf00              NOP                            ;886
000126  20ff              MOVS     r0,#0xff              ;886
000128  6821              LDR      r1,[r4,#0]            ;886
00012a  6248              STR      r0,[r1,#0x24]         ;886
00012c  bf00              NOP                            ;886
00012e  2003              MOVS     r0,#3                 ;888
000130  7760              STRB     r0,[r4,#0x1d]         ;888
000132  bf00              NOP                            ;891
000134  2000              MOVS     r0,#0                 ;891
000136  7720              STRB     r0,[r4,#0x1c]         ;891
000138  bf00              NOP                            ;891
00013a  2003              MOVS     r0,#3                 ;893
00013c  e76d              B        |L13.26|
                  |L13.318|
00013e  6820              LDR      r0,[r4,#0]            ;881
000140  68c0              LDR      r0,[r0,#0xc]          ;881
000142  f0000001          AND      r0,r0,#1              ;881
000146  2800              CMP      r0,#0                 ;881
000148  d0e6              BEQ      |L13.280|
00014a  6820              LDR      r0,[r4,#0]            ;897
00014c  f8c0801c          STR      r8,[r0,#0x1c]         ;897
000150  6820              LDR      r0,[r4,#0]            ;899
000152  f8c09044          STR      r9,[r0,#0x44]         ;899
000156  6820              LDR      r0,[r4,#0]            ;901
000158  6880              LDR      r0,[r0,#8]            ;901
00015a  f4407080          ORR      r0,r0,#0x100          ;901
00015e  6821              LDR      r1,[r4,#0]            ;901
000160  6088              STR      r0,[r1,#8]            ;901
000162  e034              B        |L13.462|
                  |L13.356|
000164  6820              LDR      r0,[r4,#0]            ;906
000166  6880              LDR      r0,[r0,#8]            ;906
000168  f4207000          BIC      r0,r0,#0x200          ;906
00016c  6821              LDR      r1,[r4,#0]            ;906
00016e  6088              STR      r0,[r1,#8]            ;906
000170  6820              LDR      r0,[r4,#0]            ;909
000172  6880              LDR      r0,[r0,#8]            ;909
000174  f4205000          BIC      r0,r0,#0x2000         ;909
000178  6821              LDR      r1,[r4,#0]            ;909
00017a  6088              STR      r0,[r1,#8]            ;909
00017c  f7fffffe          BL       HAL_GetTick
000180  4607              MOV      r7,r0                 ;912
000182  e012              B        |L13.426|
                  |L13.388|
000184  f7fffffe          BL       HAL_GetTick
000188  1bc0              SUBS     r0,r0,r7              ;917
00018a  f5b07f7a          CMP      r0,#0x3e8             ;917
00018e  d90c              BLS      |L13.426|
000190  bf00              NOP                            ;920
000192  20ff              MOVS     r0,#0xff              ;920
000194  6821              LDR      r1,[r4,#0]            ;920
000196  6248              STR      r0,[r1,#0x24]         ;920
000198  bf00              NOP                            ;920
00019a  2003              MOVS     r0,#3                 ;922
00019c  7760              STRB     r0,[r4,#0x1d]         ;922
00019e  bf00              NOP                            ;925
0001a0  2000              MOVS     r0,#0                 ;925
0001a2  7720              STRB     r0,[r4,#0x1c]         ;925
0001a4  bf00              NOP                            ;925
0001a6  2003              MOVS     r0,#3                 ;927
0001a8  e737              B        |L13.26|
                  |L13.426|
0001aa  6820              LDR      r0,[r4,#0]            ;915
0001ac  68c0              LDR      r0,[r0,#0xc]          ;915
0001ae  f3c00040          UBFX     r0,r0,#1,#1           ;915
0001b2  2800              CMP      r0,#0                 ;915
0001b4  d0e6              BEQ      |L13.388|
0001b6  6820              LDR      r0,[r4,#0]            ;931
0001b8  f8c08020          STR      r8,[r0,#0x20]         ;931
0001bc  6820              LDR      r0,[r4,#0]            ;933
0001be  f8c09048          STR      r9,[r0,#0x48]         ;933
0001c2  6820              LDR      r0,[r4,#0]            ;935
0001c4  6880              LDR      r0,[r0,#8]            ;935
0001c6  f4407000          ORR      r0,r0,#0x200          ;935
0001ca  6821              LDR      r1,[r4,#0]            ;935
0001cc  6088              STR      r0,[r1,#8]            ;935
                  |L13.462|
0001ce  bf00              NOP                            ;939
0001d0  20ff              MOVS     r0,#0xff              ;939
0001d2  6821              LDR      r1,[r4,#0]            ;939
0001d4  6248              STR      r0,[r1,#0x24]         ;939
0001d6  bf00              NOP                            ;939
0001d8  2001              MOVS     r0,#1                 ;942
0001da  7760              STRB     r0,[r4,#0x1d]         ;942
0001dc  bf00              NOP                            ;945
0001de  2000              MOVS     r0,#0                 ;945
0001e0  7720              STRB     r0,[r4,#0x1c]         ;945
0001e2  bf00              NOP                            ;945
0001e4  bf00              NOP                            ;947
0001e6  e718              B        |L13.26|
;;;949    
                          ENDP


                          AREA ||i.HAL_RTC_SetAlarm_IT||, CODE, READONLY, ALIGN=2

                  HAL_RTC_SetAlarm_IT PROC
;;;960      */
;;;961    HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;962    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;963      uint32_t tickstart = 0;
00000a  2700              MOVS     r7,#0
;;;964      uint32_t tmpreg = 0, subsecondtmpreg = 0;
00000c  46b8              MOV      r8,r7
00000e  46b9              MOV      r9,r7
;;;965      
;;;966      /* Check the parameters */
;;;967      assert_param(IS_RTC_FORMAT(Format));
;;;968      assert_param(IS_RTC_ALARM(sAlarm->Alarm));
;;;969      assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
;;;970      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
;;;971      assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
;;;972      assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
;;;973          
;;;974      /* Process Locked */ 
;;;975      __HAL_LOCK(hrtc);
000010  bf00              NOP      
000012  7f20              LDRB     r0,[r4,#0x1c]
000014  2801              CMP      r0,#1
000016  d102              BNE      |L14.30|
000018  2002              MOVS     r0,#2
                  |L14.26|
;;;976      
;;;977      hrtc->State = HAL_RTC_STATE_BUSY;
;;;978      
;;;979      if(Format == RTC_FORMAT_BIN)
;;;980      {
;;;981        if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
;;;982        {
;;;983          assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
;;;984          assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
;;;985        } 
;;;986        else
;;;987        {
;;;988          sAlarm->AlarmTime.TimeFormat = 0x00;
;;;989          assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
;;;990        }
;;;991        assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
;;;992        assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
;;;993        
;;;994        if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
;;;995        {
;;;996          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
;;;997        }
;;;998        else
;;;999        {
;;;1000         assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
;;;1001       }
;;;1002       tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
;;;1003                 ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
;;;1004                 ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
;;;1005                 ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
;;;1006                 ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
;;;1007                 ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
;;;1008                 ((uint32_t)sAlarm->AlarmMask)); 
;;;1009     }
;;;1010     else
;;;1011     {
;;;1012       if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
;;;1013       {
;;;1014         tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
;;;1015         assert_param(IS_RTC_HOUR12(tmpreg));
;;;1016         assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
;;;1017       } 
;;;1018       else
;;;1019       {
;;;1020         sAlarm->AlarmTime.TimeFormat = 0x00;
;;;1021         assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
;;;1022       }
;;;1023       
;;;1024       assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
;;;1025       assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
;;;1026       
;;;1027       if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
;;;1028       {
;;;1029         tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
;;;1030         assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
;;;1031       }
;;;1032       else
;;;1033       {
;;;1034         tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
;;;1035         assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
;;;1036       }
;;;1037       tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
;;;1038                 ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
;;;1039                 ((uint32_t) sAlarm->AlarmTime.Seconds) | \
;;;1040                 ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
;;;1041                 ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
;;;1042                 ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
;;;1043                 ((uint32_t)sAlarm->AlarmMask));     
;;;1044     }
;;;1045     /* Configure the Alarm A or Alarm B Sub Second registers */
;;;1046     subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
;;;1047     
;;;1048     /* Disable the write protection for RTC registers */
;;;1049     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;1050     
;;;1051     /* Configure the Alarm register */
;;;1052     if(sAlarm->Alarm == RTC_ALARM_A)
;;;1053     {
;;;1054       /* Disable the Alarm A interrupt */
;;;1055       __HAL_RTC_ALARMA_DISABLE(hrtc);
;;;1056   
;;;1057       /* Clear flag alarm A */
;;;1058       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
;;;1059   
;;;1060       /* Get tick */
;;;1061       tickstart = HAL_GetTick();
;;;1062   
;;;1063       /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
;;;1064       while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
;;;1065       {
;;;1066         if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
;;;1067         {
;;;1068           /* Enable the write protection for RTC registers */
;;;1069           __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1070           
;;;1071           hrtc->State = HAL_RTC_STATE_TIMEOUT; 
;;;1072           
;;;1073           /* Process Unlocked */ 
;;;1074           __HAL_UNLOCK(hrtc);
;;;1075           
;;;1076           return HAL_TIMEOUT;
;;;1077         }  
;;;1078       }
;;;1079       
;;;1080       hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
;;;1081       /* Configure the Alarm A Sub Second register */
;;;1082       hrtc->Instance->ALRMASSR = subsecondtmpreg;
;;;1083       /* Configure the Alarm state: Enable Alarm */
;;;1084       __HAL_RTC_ALARMA_ENABLE(hrtc);
;;;1085       /* Configure the Alarm interrupt */
;;;1086       __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
;;;1087     }
;;;1088     else
;;;1089     {
;;;1090       /* Disable the Alarm B interrupt */
;;;1091       __HAL_RTC_ALARMB_DISABLE(hrtc);
;;;1092   
;;;1093       /* Clear flag alarm B */
;;;1094       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
;;;1095   
;;;1096       /* Get tick */
;;;1097       tickstart = HAL_GetTick();
;;;1098   
;;;1099       /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
;;;1100       while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
;;;1101       {
;;;1102         if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
;;;1103         {
;;;1104           /* Enable the write protection for RTC registers */
;;;1105           __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;1106           
;;;1107           hrtc->State = HAL_RTC_STATE_TIMEOUT; 
;;;1108           
;;;1109           /* Process Unlocked */ 
;;;1110           __HAL_UNLOCK(hrtc);
;;;1111           
;;;1112           return HAL_TIMEOUT;
;;;1113         }  
;;;1114       }
;;;1115   
;;;1116       hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
;;;1117       /* Configure the Alarm B Sub Second register */
;;;1118       hrtc->Instance->ALRMBSSR = subsecondtmpreg;
;;;1119       /* Configure the Alarm state: Enable Alarm */
;;;1120       __HAL_RTC_ALARMB_ENABLE(hrtc);
;;;1121       /* Configure the Alarm interrupt */
;;;1122       __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
;;;1123     }
;;;1124   
;;;1125     /* RTC Alarm Interrupt Configuration: EXTI configuration */
;;;1126     __HAL_RTC_ALARM_EXTI_ENABLE_IT();
;;;1127     
;;;1128     EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
;;;1129     
;;;1130     /* Enable the write protection for RTC registers */
;;;1131     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
;;;1132     
;;;1133     hrtc->State = HAL_RTC_STATE_READY; 
;;;1134     
;;;1135     /* Process Unlocked */ 
;;;1136     __HAL_UNLOCK(hrtc);  
;;;1137     
;;;1138     return HAL_OK;
;;;1139   }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L14.30|
00001e  2001              MOVS     r0,#1                 ;975
000020  7720              STRB     r0,[r4,#0x1c]         ;975
000022  bf00              NOP                            ;975
000024  2002              MOVS     r0,#2                 ;977
000026  7760              STRB     r0,[r4,#0x1d]         ;977
000028  bb46              CBNZ     r6,|L14.124|
00002a  6820              LDR      r0,[r4,#0]            ;981
00002c  6880              LDR      r0,[r0,#8]            ;981
00002e  f0000040          AND      r0,r0,#0x40           ;981
000032  b100              CBZ      r0,|L14.54|
000034  e002              B        |L14.60|
                  |L14.54|
000036  2000              MOVS     r0,#0                 ;988
000038  70e8              STRB     r0,[r5,#3]            ;988
00003a  bf00              NOP                            ;989
                  |L14.60|
00003c  69e8              LDR      r0,[r5,#0x1c]         ;994
00003e  b900              CBNZ     r0,|L14.66|
000040  e000              B        |L14.68|
                  |L14.66|
000042  bf00              NOP                            ;1000
                  |L14.68|
000044  7828              LDRB     r0,[r5,#0]            ;1002
000046  f7fffffe          BL       RTC_ByteToBcd2
00004a  0403              LSLS     r3,r0,#16             ;1002
00004c  7868              LDRB     r0,[r5,#1]            ;1002
00004e  f7fffffe          BL       RTC_ByteToBcd2
000052  ea432300          ORR      r3,r3,r0,LSL #8       ;1002
000056  78a8              LDRB     r0,[r5,#2]            ;1002
000058  f7fffffe          BL       RTC_ByteToBcd2
00005c  4303              ORRS     r3,r3,r0              ;1002
00005e  78e8              LDRB     r0,[r5,#3]            ;1002
000060  ea434300          ORR      r3,r3,r0,LSL #16      ;1002
000064  f8950020          LDRB     r0,[r5,#0x20]         ;1002
000068  f7fffffe          BL       RTC_ByteToBcd2
00006c  ea436000          ORR      r0,r3,r0,LSL #24      ;1002
000070  69e9              LDR      r1,[r5,#0x1c]         ;1002
000072  4308              ORRS     r0,r0,r1              ;1002
000074  6969              LDR      r1,[r5,#0x14]         ;1002
000076  ea400801          ORR      r8,r0,r1              ;1002
00007a  e02d              B        |L14.216|
                  |L14.124|
00007c  6820              LDR      r0,[r4,#0]            ;1012
00007e  6880              LDR      r0,[r0,#8]            ;1012
000080  f0000040          AND      r0,r0,#0x40           ;1012
000084  b120              CBZ      r0,|L14.144|
000086  7828              LDRB     r0,[r5,#0]            ;1014
000088  f7fffffe          BL       RTC_Bcd2ToByte
00008c  4680              MOV      r8,r0                 ;1014
00008e  e002              B        |L14.150|
                  |L14.144|
000090  2000              MOVS     r0,#0                 ;1020
000092  70e8              STRB     r0,[r5,#3]            ;1020
000094  bf00              NOP                            ;1021
                  |L14.150|
000096  69e8              LDR      r0,[r5,#0x1c]         ;1027
000098  b928              CBNZ     r0,|L14.166|
00009a  f8950020          LDRB     r0,[r5,#0x20]         ;1029
00009e  f7fffffe          BL       RTC_Bcd2ToByte
0000a2  4680              MOV      r8,r0                 ;1029
0000a4  e005              B        |L14.178|
                  |L14.166|
0000a6  f8950020          LDRB     r0,[r5,#0x20]         ;1034
0000aa  f7fffffe          BL       RTC_Bcd2ToByte
0000ae  4680              MOV      r8,r0                 ;1034
0000b0  bf00              NOP                            ;1035
                  |L14.178|
0000b2  7828              LDRB     r0,[r5,#0]            ;1037
0000b4  0400              LSLS     r0,r0,#16             ;1037
0000b6  7869              LDRB     r1,[r5,#1]            ;1037
0000b8  ea402001          ORR      r0,r0,r1,LSL #8       ;1037
0000bc  78a9              LDRB     r1,[r5,#2]            ;1037
0000be  4308              ORRS     r0,r0,r1              ;1037
0000c0  78e9              LDRB     r1,[r5,#3]            ;1037
0000c2  ea404001          ORR      r0,r0,r1,LSL #16      ;1037
0000c6  f8951020          LDRB     r1,[r5,#0x20]         ;1037
0000ca  ea406001          ORR      r0,r0,r1,LSL #24      ;1037
0000ce  69e9              LDR      r1,[r5,#0x1c]         ;1037
0000d0  4308              ORRS     r0,r0,r1              ;1037
0000d2  6969              LDR      r1,[r5,#0x14]         ;1037
0000d4  ea400801          ORR      r8,r0,r1              ;1037
                  |L14.216|
0000d8  69a9              LDR      r1,[r5,#0x18]         ;1046
0000da  6868              LDR      r0,[r5,#4]            ;1046
0000dc  ea400901          ORR      r9,r0,r1              ;1046
0000e0  bf00              NOP                            ;1049
0000e2  20ca              MOVS     r0,#0xca              ;1049
0000e4  6821              LDR      r1,[r4,#0]            ;1049
0000e6  6248              STR      r0,[r1,#0x24]         ;1049
0000e8  2053              MOVS     r0,#0x53              ;1049
0000ea  6821              LDR      r1,[r4,#0]            ;1049
0000ec  6248              STR      r0,[r1,#0x24]         ;1049
0000ee  bf00              NOP                            ;1049
0000f0  6a68              LDR      r0,[r5,#0x24]         ;1052
0000f2  f5b07f80          CMP      r0,#0x100             ;1052
0000f6  d13d              BNE      |L14.372|
0000f8  6820              LDR      r0,[r4,#0]            ;1055
0000fa  6880              LDR      r0,[r0,#8]            ;1055
0000fc  f4207080          BIC      r0,r0,#0x100          ;1055
000100  6821              LDR      r1,[r4,#0]            ;1055
000102  6088              STR      r0,[r1,#8]            ;1055
000104  6820              LDR      r0,[r4,#0]            ;1058
000106  68c0              LDR      r0,[r0,#0xc]          ;1058
000108  f0000080          AND      r0,r0,#0x80           ;1058
00010c  f46070c0          ORN      r0,r0,#0x180          ;1058
000110  6821              LDR      r1,[r4,#0]            ;1058
000112  60c8              STR      r0,[r1,#0xc]          ;1058
000114  f7fffffe          BL       HAL_GetTick
000118  4607              MOV      r7,r0                 ;1061
00011a  e012              B        |L14.322|
                  |L14.284|
00011c  f7fffffe          BL       HAL_GetTick
000120  1bc0              SUBS     r0,r0,r7              ;1066
000122  f5b07f7a          CMP      r0,#0x3e8             ;1066
000126  d90c              BLS      |L14.322|
000128  bf00              NOP                            ;1069
00012a  20ff              MOVS     r0,#0xff              ;1069
00012c  6821              LDR      r1,[r4,#0]            ;1069
00012e  6248              STR      r0,[r1,#0x24]         ;1069
000130  bf00              NOP                            ;1069
000132  2003              MOVS     r0,#3                 ;1071
000134  7760              STRB     r0,[r4,#0x1d]         ;1071
000136  bf00              NOP                            ;1074
000138  2000              MOVS     r0,#0                 ;1074
00013a  7720              STRB     r0,[r4,#0x1c]         ;1074
00013c  bf00              NOP                            ;1074
00013e  2003              MOVS     r0,#3                 ;1076
000140  e76b              B        |L14.26|
                  |L14.322|
000142  6820              LDR      r0,[r4,#0]            ;1064
000144  68c0              LDR      r0,[r0,#0xc]          ;1064
000146  f0000001          AND      r0,r0,#1              ;1064
00014a  2800              CMP      r0,#0                 ;1064
00014c  d0e6              BEQ      |L14.284|
00014e  6820              LDR      r0,[r4,#0]            ;1080
000150  f8c0801c          STR      r8,[r0,#0x1c]         ;1080
000154  6820              LDR      r0,[r4,#0]            ;1082
000156  f8c09044          STR      r9,[r0,#0x44]         ;1082
00015a  6820              LDR      r0,[r4,#0]            ;1084
00015c  6880              LDR      r0,[r0,#8]            ;1084
00015e  f4407080          ORR      r0,r0,#0x100          ;1084
000162  6821              LDR      r1,[r4,#0]            ;1084
000164  6088              STR      r0,[r1,#8]            ;1084
000166  6820              LDR      r0,[r4,#0]            ;1086
000168  6880              LDR      r0,[r0,#8]            ;1086
00016a  f4405080          ORR      r0,r0,#0x1000         ;1086
00016e  6821              LDR      r1,[r4,#0]            ;1086
000170  6088              STR      r0,[r1,#8]            ;1086
000172  e03c              B        |L14.494|
                  |L14.372|
000174  6820              LDR      r0,[r4,#0]            ;1091
000176  6880              LDR      r0,[r0,#8]            ;1091
000178  f4207000          BIC      r0,r0,#0x200          ;1091
00017c  6821              LDR      r1,[r4,#0]            ;1091
00017e  6088              STR      r0,[r1,#8]            ;1091
000180  6820              LDR      r0,[r4,#0]            ;1094
000182  68c0              LDR      r0,[r0,#0xc]          ;1094
000184  f0000080          AND      r0,r0,#0x80           ;1094
000188  f4607020          ORN      r0,r0,#0x280          ;1094
00018c  6821              LDR      r1,[r4,#0]            ;1094
00018e  60c8              STR      r0,[r1,#0xc]          ;1094
000190  f7fffffe          BL       HAL_GetTick
000194  4607              MOV      r7,r0                 ;1097
000196  e012              B        |L14.446|
                  |L14.408|
000198  f7fffffe          BL       HAL_GetTick
00019c  1bc0              SUBS     r0,r0,r7              ;1102
00019e  f5b07f7a          CMP      r0,#0x3e8             ;1102
0001a2  d90c              BLS      |L14.446|
0001a4  bf00              NOP                            ;1105
0001a6  20ff              MOVS     r0,#0xff              ;1105
0001a8  6821              LDR      r1,[r4,#0]            ;1105
0001aa  6248              STR      r0,[r1,#0x24]         ;1105
0001ac  bf00              NOP                            ;1105
0001ae  2003              MOVS     r0,#3                 ;1107
0001b0  7760              STRB     r0,[r4,#0x1d]         ;1107
0001b2  bf00              NOP                            ;1110
0001b4  2000              MOVS     r0,#0                 ;1110
0001b6  7720              STRB     r0,[r4,#0x1c]         ;1110
0001b8  bf00              NOP                            ;1110
0001ba  2003              MOVS     r0,#3                 ;1112
0001bc  e72d              B        |L14.26|
                  |L14.446|
0001be  6820              LDR      r0,[r4,#0]            ;1100
0001c0  68c0              LDR      r0,[r0,#0xc]          ;1100
0001c2  f3c00040          UBFX     r0,r0,#1,#1           ;1100
0001c6  2800              CMP      r0,#0                 ;1100
0001c8  d0e6              BEQ      |L14.408|
0001ca  6820              LDR      r0,[r4,#0]            ;1116
0001cc  f8c08020          STR      r8,[r0,#0x20]         ;1116
0001d0  6820              LDR      r0,[r4,#0]            ;1118
0001d2  f8c09048          STR      r9,[r0,#0x48]         ;1118
0001d6  6820              LDR      r0,[r4,#0]            ;1120
0001d8  6880              LDR      r0,[r0,#8]            ;1120
0001da  f4407000          ORR      r0,r0,#0x200          ;1120
0001de  6821              LDR      r1,[r4,#0]            ;1120
0001e0  6088              STR      r0,[r1,#8]            ;1120
0001e2  6820              LDR      r0,[r4,#0]            ;1122
0001e4  6880              LDR      r0,[r0,#8]            ;1122
0001e6  f4405000          ORR      r0,r0,#0x2000         ;1122
0001ea  6821              LDR      r1,[r4,#0]            ;1122
0001ec  6088              STR      r0,[r1,#8]            ;1122
                  |L14.494|
0001ee  480d              LDR      r0,|L14.548|
0001f0  6800              LDR      r0,[r0,#0]            ;1126
0001f2  f4403000          ORR      r0,r0,#0x20000        ;1126
0001f6  490b              LDR      r1,|L14.548|
0001f8  6008              STR      r0,[r1,#0]            ;1126
0001fa  480a              LDR      r0,|L14.548|
0001fc  3008              ADDS     r0,r0,#8              ;1128
0001fe  6800              LDR      r0,[r0,#0]            ;1128
000200  f4403000          ORR      r0,r0,#0x20000        ;1128
000204  4907              LDR      r1,|L14.548|
000206  3108              ADDS     r1,r1,#8              ;1128
000208  6008              STR      r0,[r1,#0]            ;1128
00020a  bf00              NOP                            ;1131
00020c  20ff              MOVS     r0,#0xff              ;1131
00020e  6821              LDR      r1,[r4,#0]            ;1131
000210  6248              STR      r0,[r1,#0x24]         ;1131
000212  bf00              NOP                            ;1131
000214  2001              MOVS     r0,#1                 ;1133
000216  7760              STRB     r0,[r4,#0x1d]         ;1133
000218  bf00              NOP                            ;1136
00021a  2000              MOVS     r0,#0                 ;1136
00021c  7720              STRB     r0,[r4,#0x1c]         ;1136
00021e  bf00              NOP                            ;1136
000220  bf00              NOP                            ;1138
000222  e6fa              B        |L14.26|
;;;1140   
                          ENDP

                  |L14.548|
                          DCD      0x40013c00

                          AREA ||i.HAL_RTC_SetDate||, CODE, READONLY, ALIGN=2

                  HAL_RTC_SetDate PROC
;;;607      */
;;;608    HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;609    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;610      uint32_t datetmpreg = 0;
00000a  2700              MOVS     r7,#0
;;;611      
;;;612     /* Check the parameters */
;;;613      assert_param(IS_RTC_FORMAT(Format));
;;;614      
;;;615     /* Process Locked */ 
;;;616     __HAL_LOCK(hrtc);
00000c  bf00              NOP      
00000e  7f20              LDRB     r0,[r4,#0x1c]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L15.26|
000014  2002              MOVS     r0,#2
                  |L15.22|
;;;617      
;;;618      hrtc->State = HAL_RTC_STATE_BUSY; 
;;;619      
;;;620      if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
;;;621      {
;;;622        sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
;;;623      }
;;;624      
;;;625      assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
;;;626      
;;;627      if(Format == RTC_FORMAT_BIN)
;;;628      {   
;;;629        assert_param(IS_RTC_YEAR(sDate->Year));
;;;630        assert_param(IS_RTC_MONTH(sDate->Month));
;;;631        assert_param(IS_RTC_DATE(sDate->Date)); 
;;;632        
;;;633       datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
;;;634                     ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
;;;635                     ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
;;;636                     ((uint32_t)sDate->WeekDay << 13));   
;;;637      }
;;;638      else
;;;639      {   
;;;640        assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
;;;641        datetmpreg = RTC_Bcd2ToByte(sDate->Month);
;;;642        assert_param(IS_RTC_MONTH(datetmpreg));
;;;643        datetmpreg = RTC_Bcd2ToByte(sDate->Date);
;;;644        assert_param(IS_RTC_DATE(datetmpreg));
;;;645        
;;;646        datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
;;;647                      (((uint32_t)sDate->Month) << 8) | \
;;;648                      ((uint32_t)sDate->Date) | \
;;;649                      (((uint32_t)sDate->WeekDay) << 13));  
;;;650      }
;;;651    
;;;652      /* Disable the write protection for RTC registers */
;;;653      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;654      
;;;655      /* Set Initialization mode */
;;;656      if(RTC_EnterInitMode(hrtc) != HAL_OK)
;;;657      {
;;;658        /* Enable the write protection for RTC registers */
;;;659        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
;;;660        
;;;661        /* Set RTC state*/
;;;662        hrtc->State = HAL_RTC_STATE_ERROR;
;;;663        
;;;664        /* Process Unlocked */ 
;;;665        __HAL_UNLOCK(hrtc);
;;;666        
;;;667        return HAL_ERROR;
;;;668      } 
;;;669      else
;;;670      {
;;;671        /* Set the RTC_DR register */
;;;672        hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
;;;673        
;;;674        /* Exit Initialization mode */
;;;675        hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
;;;676        
;;;677        /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
;;;678        if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
;;;679        {
;;;680          if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
;;;681          { 
;;;682            /* Enable the write protection for RTC registers */
;;;683            __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
;;;684            
;;;685            hrtc->State = HAL_RTC_STATE_ERROR;
;;;686            
;;;687            /* Process Unlocked */ 
;;;688            __HAL_UNLOCK(hrtc);
;;;689            
;;;690            return HAL_ERROR;
;;;691          }
;;;692        }
;;;693        
;;;694        /* Enable the write protection for RTC registers */
;;;695        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
;;;696        
;;;697        hrtc->State = HAL_RTC_STATE_READY ;
;;;698        
;;;699        /* Process Unlocked */ 
;;;700        __HAL_UNLOCK(hrtc);
;;;701        
;;;702        return HAL_OK;    
;;;703      }
;;;704    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L15.26|
00001a  2001              MOVS     r0,#1                 ;616
00001c  7720              STRB     r0,[r4,#0x1c]         ;616
00001e  bf00              NOP                            ;616
000020  2002              MOVS     r0,#2                 ;618
000022  7760              STRB     r0,[r4,#0x1d]         ;618
000024  b94e              CBNZ     r6,|L15.58|
000026  7868              LDRB     r0,[r5,#1]            ;620
000028  f0000010          AND      r0,r0,#0x10           ;620
00002c  2810              CMP      r0,#0x10              ;620
00002e  d104              BNE      |L15.58|
000030  7868              LDRB     r0,[r5,#1]            ;622
000032  f00000ef          AND      r0,r0,#0xef           ;622
000036  300a              ADDS     r0,r0,#0xa            ;622
000038  7068              STRB     r0,[r5,#1]            ;622
                  |L15.58|
00003a  b986              CBNZ     r6,|L15.94|
00003c  78e8              LDRB     r0,[r5,#3]            ;633
00003e  f7fffffe          BL       RTC_ByteToBcd2
000042  0403              LSLS     r3,r0,#16             ;633
000044  7868              LDRB     r0,[r5,#1]            ;633
000046  f7fffffe          BL       RTC_ByteToBcd2
00004a  ea432300          ORR      r3,r3,r0,LSL #8       ;633
00004e  78a8              LDRB     r0,[r5,#2]            ;633
000050  f7fffffe          BL       RTC_ByteToBcd2
000054  4303              ORRS     r3,r3,r0              ;633
000056  7828              LDRB     r0,[r5,#0]            ;633
000058  ea433740          ORR      r7,r3,r0,LSL #13      ;633
00005c  e011              B        |L15.130|
                  |L15.94|
00005e  7868              LDRB     r0,[r5,#1]            ;641
000060  f7fffffe          BL       RTC_Bcd2ToByte
000064  4607              MOV      r7,r0                 ;641
000066  78a8              LDRB     r0,[r5,#2]            ;643
000068  f7fffffe          BL       RTC_Bcd2ToByte
00006c  4607              MOV      r7,r0                 ;643
00006e  78e8              LDRB     r0,[r5,#3]            ;646
000070  0400              LSLS     r0,r0,#16             ;646
000072  7869              LDRB     r1,[r5,#1]            ;646
000074  ea402001          ORR      r0,r0,r1,LSL #8       ;646
000078  78a9              LDRB     r1,[r5,#2]            ;646
00007a  4308              ORRS     r0,r0,r1              ;646
00007c  7829              LDRB     r1,[r5,#0]            ;646
00007e  ea403741          ORR      r7,r0,r1,LSL #13      ;646
                  |L15.130|
000082  bf00              NOP                            ;653
000084  20ca              MOVS     r0,#0xca              ;653
000086  6821              LDR      r1,[r4,#0]            ;653
000088  6248              STR      r0,[r1,#0x24]         ;653
00008a  2053              MOVS     r0,#0x53              ;653
00008c  6821              LDR      r1,[r4,#0]            ;653
00008e  6248              STR      r0,[r1,#0x24]         ;653
000090  bf00              NOP                            ;653
000092  4620              MOV      r0,r4                 ;656
000094  f7fffffe          BL       RTC_EnterInitMode
000098  b160              CBZ      r0,|L15.180|
00009a  bf00              NOP                            ;659
00009c  20ff              MOVS     r0,#0xff              ;659
00009e  6821              LDR      r1,[r4,#0]            ;659
0000a0  6248              STR      r0,[r1,#0x24]         ;659
0000a2  bf00              NOP                            ;659
0000a4  2004              MOVS     r0,#4                 ;662
0000a6  7760              STRB     r0,[r4,#0x1d]         ;662
0000a8  bf00              NOP                            ;665
0000aa  2000              MOVS     r0,#0                 ;665
0000ac  7720              STRB     r0,[r4,#0x1c]         ;665
0000ae  bf00              NOP                            ;665
0000b0  2001              MOVS     r0,#1                 ;667
0000b2  e7b0              B        |L15.22|
                  |L15.180|
0000b4  4816              LDR      r0,|L15.272|
0000b6  4038              ANDS     r0,r0,r7              ;672
0000b8  6821              LDR      r1,[r4,#0]            ;672
0000ba  6048              STR      r0,[r1,#4]            ;672
0000bc  6820              LDR      r0,[r4,#0]            ;675
0000be  68c0              LDR      r0,[r0,#0xc]          ;675
0000c0  f0200080          BIC      r0,r0,#0x80           ;675
0000c4  6821              LDR      r1,[r4,#0]            ;675
0000c6  60c8              STR      r0,[r1,#0xc]          ;675
0000c8  6820              LDR      r0,[r4,#0]            ;678
0000ca  6880              LDR      r0,[r0,#8]            ;678
0000cc  f0000020          AND      r0,r0,#0x20           ;678
0000d0  b980              CBNZ     r0,|L15.244|
0000d2  4620              MOV      r0,r4                 ;680
0000d4  f7fffffe          BL       HAL_RTC_WaitForSynchro
0000d8  b160              CBZ      r0,|L15.244|
0000da  bf00              NOP                            ;683
0000dc  20ff              MOVS     r0,#0xff              ;683
0000de  6821              LDR      r1,[r4,#0]            ;683
0000e0  6248              STR      r0,[r1,#0x24]         ;683
0000e2  bf00              NOP                            ;683
0000e4  2004              MOVS     r0,#4                 ;685
0000e6  7760              STRB     r0,[r4,#0x1d]         ;685
0000e8  bf00              NOP                            ;688
0000ea  2000              MOVS     r0,#0                 ;688
0000ec  7720              STRB     r0,[r4,#0x1c]         ;688
0000ee  bf00              NOP                            ;688
0000f0  2001              MOVS     r0,#1                 ;690
0000f2  e790              B        |L15.22|
                  |L15.244|
0000f4  bf00              NOP                            ;695
0000f6  20ff              MOVS     r0,#0xff              ;695
0000f8  6821              LDR      r1,[r4,#0]            ;695
0000fa  6248              STR      r0,[r1,#0x24]         ;695
0000fc  bf00              NOP                            ;695
0000fe  2001              MOVS     r0,#1                 ;697
000100  7760              STRB     r0,[r4,#0x1d]         ;697
000102  bf00              NOP                            ;700
000104  2000              MOVS     r0,#0                 ;700
000106  7720              STRB     r0,[r4,#0x1c]         ;700
000108  bf00              NOP                            ;700
00010a  bf00              NOP                            ;702
00010c  e783              B        |L15.22|
;;;705    
                          ENDP

00010e  0000              DCW      0x0000
                  |L15.272|
                          DCD      0x00ffff3f

                          AREA ||i.HAL_RTC_SetTime||, CODE, READONLY, ALIGN=2

                  HAL_RTC_SetTime PROC
;;;430      */
;;;431    HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;432    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;433      uint32_t tmpreg = 0;
00000a  2700              MOVS     r7,#0
;;;434      
;;;435     /* Check the parameters */
;;;436      assert_param(IS_RTC_FORMAT(Format));
;;;437      assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
;;;438      assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
;;;439      
;;;440      /* Process Locked */ 
;;;441      __HAL_LOCK(hrtc);
00000c  bf00              NOP      
00000e  7f20              LDRB     r0,[r4,#0x1c]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L16.26|
000014  2002              MOVS     r0,#2
                  |L16.22|
;;;442      
;;;443      hrtc->State = HAL_RTC_STATE_BUSY;
;;;444      
;;;445      if(Format == RTC_FORMAT_BIN)
;;;446      {
;;;447        if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
;;;448        {
;;;449          assert_param(IS_RTC_HOUR12(sTime->Hours));
;;;450          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
;;;451        } 
;;;452        else
;;;453        {
;;;454          sTime->TimeFormat = 0x00;
;;;455          assert_param(IS_RTC_HOUR24(sTime->Hours));
;;;456        }
;;;457        assert_param(IS_RTC_MINUTES(sTime->Minutes));
;;;458        assert_param(IS_RTC_SECONDS(sTime->Seconds));
;;;459        
;;;460        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
;;;461                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
;;;462                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
;;;463                            (((uint32_t)sTime->TimeFormat) << 16));  
;;;464      }
;;;465      else
;;;466      {
;;;467        if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
;;;468        {
;;;469          tmpreg = RTC_Bcd2ToByte(sTime->Hours);
;;;470          assert_param(IS_RTC_HOUR12(tmpreg));
;;;471          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
;;;472        } 
;;;473        else
;;;474        {
;;;475          sTime->TimeFormat = 0x00;
;;;476          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
;;;477        }
;;;478        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
;;;479        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
;;;480        tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
;;;481                  ((uint32_t)(sTime->Minutes) << 8) | \
;;;482                  ((uint32_t)sTime->Seconds) | \
;;;483                  ((uint32_t)(sTime->TimeFormat) << 16));   
;;;484      }
;;;485      
;;;486      /* Disable the write protection for RTC registers */
;;;487      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
;;;488      
;;;489      /* Set Initialization mode */
;;;490      if(RTC_EnterInitMode(hrtc) != HAL_OK)
;;;491      {
;;;492        /* Enable the write protection for RTC registers */
;;;493        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
;;;494        
;;;495        /* Set RTC state */
;;;496        hrtc->State = HAL_RTC_STATE_ERROR;
;;;497        
;;;498        /* Process Unlocked */ 
;;;499        __HAL_UNLOCK(hrtc);
;;;500        
;;;501        return HAL_ERROR;
;;;502      } 
;;;503      else
;;;504      {
;;;505        /* Set the RTC_TR register */
;;;506        hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
;;;507         
;;;508        /* Clear the bits to be configured */
;;;509        hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
;;;510        
;;;511        /* Configure the RTC_CR register */
;;;512        hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
;;;513        
;;;514        /* Exit Initialization mode */
;;;515        hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
;;;516        
;;;517        /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
;;;518        if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
;;;519        {
;;;520          if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
;;;521          {        
;;;522            /* Enable the write protection for RTC registers */
;;;523            __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
;;;524            
;;;525            hrtc->State = HAL_RTC_STATE_ERROR;
;;;526            
;;;527            /* Process Unlocked */ 
;;;528            __HAL_UNLOCK(hrtc);
;;;529            
;;;530            return HAL_ERROR;
;;;531          }
;;;532        }
;;;533        
;;;534        /* Enable the write protection for RTC registers */
;;;535        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
;;;536        
;;;537       hrtc->State = HAL_RTC_STATE_READY;
;;;538      
;;;539       __HAL_UNLOCK(hrtc); 
;;;540         
;;;541       return HAL_OK;
;;;542      }
;;;543    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L16.26|
00001a  2001              MOVS     r0,#1                 ;441
00001c  7720              STRB     r0,[r4,#0x1c]         ;441
00001e  bf00              NOP                            ;441
000020  2002              MOVS     r0,#2                 ;443
000022  7760              STRB     r0,[r4,#0x1d]         ;443
000024  b9ce              CBNZ     r6,|L16.90|
000026  6820              LDR      r0,[r4,#0]            ;447
000028  6880              LDR      r0,[r0,#8]            ;447
00002a  f0000040          AND      r0,r0,#0x40           ;447
00002e  b100              CBZ      r0,|L16.50|
000030  e002              B        |L16.56|
                  |L16.50|
000032  2000              MOVS     r0,#0                 ;454
000034  70e8              STRB     r0,[r5,#3]            ;454
000036  bf00              NOP                            ;455
                  |L16.56|
000038  7828              LDRB     r0,[r5,#0]            ;460
00003a  f7fffffe          BL       RTC_ByteToBcd2
00003e  0403              LSLS     r3,r0,#16             ;460
000040  7868              LDRB     r0,[r5,#1]            ;460
000042  f7fffffe          BL       RTC_ByteToBcd2
000046  ea432300          ORR      r3,r3,r0,LSL #8       ;460
00004a  78a8              LDRB     r0,[r5,#2]            ;460
00004c  f7fffffe          BL       RTC_ByteToBcd2
000050  4303              ORRS     r3,r3,r0              ;460
000052  78e8              LDRB     r0,[r5,#3]            ;460
000054  ea434700          ORR      r7,r3,r0,LSL #16      ;460
000058  e016              B        |L16.136|
                  |L16.90|
00005a  6820              LDR      r0,[r4,#0]            ;467
00005c  6880              LDR      r0,[r0,#8]            ;467
00005e  f0000040          AND      r0,r0,#0x40           ;467
000062  b120              CBZ      r0,|L16.110|
000064  7828              LDRB     r0,[r5,#0]            ;469
000066  f7fffffe          BL       RTC_Bcd2ToByte
00006a  4607              MOV      r7,r0                 ;469
00006c  e002              B        |L16.116|
                  |L16.110|
00006e  2000              MOVS     r0,#0                 ;475
000070  70e8              STRB     r0,[r5,#3]            ;475
000072  bf00              NOP                            ;476
                  |L16.116|
000074  7828              LDRB     r0,[r5,#0]            ;480
000076  0400              LSLS     r0,r0,#16             ;480
000078  7869              LDRB     r1,[r5,#1]            ;480
00007a  ea402001          ORR      r0,r0,r1,LSL #8       ;480
00007e  78a9              LDRB     r1,[r5,#2]            ;480
000080  4308              ORRS     r0,r0,r1              ;480
000082  78e9              LDRB     r1,[r5,#3]            ;480
000084  ea404701          ORR      r7,r0,r1,LSL #16      ;480
                  |L16.136|
000088  bf00              NOP                            ;487
00008a  20ca              MOVS     r0,#0xca              ;487
00008c  6821              LDR      r1,[r4,#0]            ;487
00008e  6248              STR      r0,[r1,#0x24]         ;487
000090  2053              MOVS     r0,#0x53              ;487
000092  6821              LDR      r1,[r4,#0]            ;487
000094  6248              STR      r0,[r1,#0x24]         ;487
000096  bf00              NOP                            ;487
000098  4620              MOV      r0,r4                 ;490
00009a  f7fffffe          BL       RTC_EnterInitMode
00009e  b160              CBZ      r0,|L16.186|
0000a0  bf00              NOP                            ;493
0000a2  20ff              MOVS     r0,#0xff              ;493
0000a4  6821              LDR      r1,[r4,#0]            ;493
0000a6  6248              STR      r0,[r1,#0x24]         ;493
0000a8  bf00              NOP                            ;493
0000aa  2004              MOVS     r0,#4                 ;496
0000ac  7760              STRB     r0,[r4,#0x1d]         ;496
0000ae  bf00              NOP                            ;499
0000b0  2000              MOVS     r0,#0                 ;499
0000b2  7720              STRB     r0,[r4,#0x1c]         ;499
0000b4  bf00              NOP                            ;499
0000b6  2001              MOVS     r0,#1                 ;501
0000b8  e7ad              B        |L16.22|
                  |L16.186|
0000ba  481d              LDR      r0,|L16.304|
0000bc  4038              ANDS     r0,r0,r7              ;506
0000be  6821              LDR      r1,[r4,#0]            ;506
0000c0  6008              STR      r0,[r1,#0]            ;506
0000c2  6820              LDR      r0,[r4,#0]            ;509
0000c4  6880              LDR      r0,[r0,#8]            ;509
0000c6  f4202080          BIC      r0,r0,#0x40000        ;509
0000ca  6821              LDR      r1,[r4,#0]            ;509
0000cc  6088              STR      r0,[r1,#8]            ;509
0000ce  e9d50103          LDRD     r0,r1,[r5,#0xc]       ;512
0000d2  4308              ORRS     r0,r0,r1              ;512
0000d4  6821              LDR      r1,[r4,#0]            ;512
0000d6  6889              LDR      r1,[r1,#8]            ;512
0000d8  4308              ORRS     r0,r0,r1              ;512
0000da  6821              LDR      r1,[r4,#0]            ;512
0000dc  6088              STR      r0,[r1,#8]            ;512
0000de  6820              LDR      r0,[r4,#0]            ;515
0000e0  68c0              LDR      r0,[r0,#0xc]          ;515
0000e2  f0200080          BIC      r0,r0,#0x80           ;515
0000e6  6821              LDR      r1,[r4,#0]            ;515
0000e8  60c8              STR      r0,[r1,#0xc]          ;515
0000ea  6820              LDR      r0,[r4,#0]            ;518
0000ec  6880              LDR      r0,[r0,#8]            ;518
0000ee  f0000020          AND      r0,r0,#0x20           ;518
0000f2  b980              CBNZ     r0,|L16.278|
0000f4  4620              MOV      r0,r4                 ;520
0000f6  f7fffffe          BL       HAL_RTC_WaitForSynchro
0000fa  b160              CBZ      r0,|L16.278|
0000fc  bf00              NOP                            ;523
0000fe  20ff              MOVS     r0,#0xff              ;523
000100  6821              LDR      r1,[r4,#0]            ;523
000102  6248              STR      r0,[r1,#0x24]         ;523
000104  bf00              NOP                            ;523
000106  2004              MOVS     r0,#4                 ;525
000108  7760              STRB     r0,[r4,#0x1d]         ;525
00010a  bf00              NOP                            ;528
00010c  2000              MOVS     r0,#0                 ;528
00010e  7720              STRB     r0,[r4,#0x1c]         ;528
000110  bf00              NOP                            ;528
000112  2001              MOVS     r0,#1                 ;530
000114  e77f              B        |L16.22|
                  |L16.278|
000116  bf00              NOP                            ;535
000118  20ff              MOVS     r0,#0xff              ;535
00011a  6821              LDR      r1,[r4,#0]            ;535
00011c  6248              STR      r0,[r1,#0x24]         ;535
00011e  bf00              NOP                            ;535
000120  2001              MOVS     r0,#1                 ;537
000122  7760              STRB     r0,[r4,#0x1d]         ;537
000124  bf00              NOP                            ;539
000126  2000              MOVS     r0,#0                 ;539
000128  7720              STRB     r0,[r4,#0x1c]         ;539
00012a  bf00              NOP                            ;539
00012c  bf00              NOP                            ;541
00012e  e772              B        |L16.22|
;;;544    
                          ENDP

                  |L16.304|
                          DCD      0x007f7f7f

                          AREA ||i.HAL_RTC_WaitForSynchro||, CODE, READONLY, ALIGN=1

                  HAL_RTC_WaitForSynchro PROC
;;;1417     */
;;;1418   HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
000000  b570              PUSH     {r4-r6,lr}
;;;1419   {
000002  4604              MOV      r4,r0
;;;1420     uint32_t tickstart = 0;
000004  2500              MOVS     r5,#0
;;;1421   
;;;1422     /* Clear RSF flag */
;;;1423     hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
000006  6820              LDR      r0,[r4,#0]
000008  68c0              LDR      r0,[r0,#0xc]
00000a  f02000a0          BIC      r0,r0,#0xa0
00000e  6821              LDR      r1,[r4,#0]
000010  60c8              STR      r0,[r1,#0xc]
;;;1424   
;;;1425       /* Get tick */
;;;1426       tickstart = HAL_GetTick();
000012  f7fffffe          BL       HAL_GetTick
000016  4605              MOV      r5,r0
;;;1427   
;;;1428     /* Wait the registers to be synchronised */
;;;1429     while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
000018  e007              B        |L17.42|
                  |L17.26|
;;;1430     {
;;;1431       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
00001a  f7fffffe          BL       HAL_GetTick
00001e  1b40              SUBS     r0,r0,r5
000020  f5b07f7a          CMP      r0,#0x3e8
000024  d901              BLS      |L17.42|
;;;1432       {       
;;;1433         return HAL_TIMEOUT;
000026  2003              MOVS     r0,#3
                  |L17.40|
;;;1434       } 
;;;1435     }
;;;1436   
;;;1437     return HAL_OK;
;;;1438   }
000028  bd70              POP      {r4-r6,pc}
                  |L17.42|
00002a  6820              LDR      r0,[r4,#0]            ;1429
00002c  68c0              LDR      r0,[r0,#0xc]          ;1429
00002e  f0000020          AND      r0,r0,#0x20           ;1429
000032  2800              CMP      r0,#0                 ;1429
000034  d0f1              BEQ      |L17.26|
000036  2000              MOVS     r0,#0                 ;1437
000038  e7f6              B        |L17.40|
;;;1439   
                          ENDP


                          AREA ||i.RTC_Bcd2ToByte||, CODE, READONLY, ALIGN=1

                  RTC_Bcd2ToByte PROC
;;;1530     */
;;;1531   uint8_t RTC_Bcd2ToByte(uint8_t Value)
000000  4601              MOV      r1,r0
;;;1532   {
;;;1533     uint32_t tmp = 0;
000002  bf00              NOP      
;;;1534     tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
000004  0908              LSRS     r0,r1,#4
000006  eb000080          ADD      r0,r0,r0,LSL #2
00000a  0042              LSLS     r2,r0,#1
;;;1535     return (tmp + (Value & (uint8_t)0x0F));
00000c  f001000f          AND      r0,r1,#0xf
000010  4410              ADD      r0,r0,r2
000012  b2c0              UXTB     r0,r0
;;;1536   }
000014  4770              BX       lr
;;;1537   
                          ENDP


                          AREA ||i.RTC_ByteToBcd2||, CODE, READONLY, ALIGN=1

                  RTC_ByteToBcd2 PROC
;;;1512     */
;;;1513   uint8_t RTC_ByteToBcd2(uint8_t Value)
000000  4601              MOV      r1,r0
;;;1514   {
;;;1515     uint32_t bcdhigh = 0;
000002  2200              MOVS     r2,#0
;;;1516     
;;;1517     while(Value >= 10)
000004  e003              B        |L19.14|
                  |L19.6|
;;;1518     {
;;;1519       bcdhigh++;
000006  1c52              ADDS     r2,r2,#1
;;;1520       Value -= 10;
000008  f1a1000a          SUB      r0,r1,#0xa
00000c  b2c1              UXTB     r1,r0
                  |L19.14|
00000e  290a              CMP      r1,#0xa               ;1517
000010  daf9              BGE      |L19.6|
;;;1521     }
;;;1522     
;;;1523     return  ((uint8_t)(bcdhigh << 4) | Value);
000012  0710              LSLS     r0,r2,#28
000014  ea416010          ORR      r0,r1,r0,LSR #24
;;;1524   }
000018  4770              BX       lr
;;;1525   
                          ENDP


                          AREA ||i.RTC_EnterInitMode||, CODE, READONLY, ALIGN=1

                  RTC_EnterInitMode PROC
;;;1480     */
;;;1481   HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
000000  b570              PUSH     {r4-r6,lr}
;;;1482   {
000002  4604              MOV      r4,r0
;;;1483     uint32_t tickstart = 0; 
000004  2500              MOVS     r5,#0
;;;1484     
;;;1485     /* Check if the Initialization mode is set */
;;;1486     if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
000006  6820              LDR      r0,[r4,#0]
000008  68c0              LDR      r0,[r0,#0xc]
00000a  f0000040          AND      r0,r0,#0x40
00000e  b9a0              CBNZ     r0,|L20.58|
;;;1487     {
;;;1488       /* Set the Initialization mode */
;;;1489       hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
000010  1e68              SUBS     r0,r5,#1
000012  6821              LDR      r1,[r4,#0]
000014  60c8              STR      r0,[r1,#0xc]
;;;1490   
;;;1491       /* Get tick */
;;;1492       tickstart = HAL_GetTick();
000016  f7fffffe          BL       HAL_GetTick
00001a  4605              MOV      r5,r0
;;;1493   
;;;1494       /* Wait till RTC is in INIT state and if Time out is reached exit */
;;;1495       while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
00001c  e007              B        |L20.46|
                  |L20.30|
;;;1496       {
;;;1497         if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
00001e  f7fffffe          BL       HAL_GetTick
000022  1b40              SUBS     r0,r0,r5
000024  f5b07f7a          CMP      r0,#0x3e8
000028  d901              BLS      |L20.46|
;;;1498         {       
;;;1499           return HAL_TIMEOUT;
00002a  2003              MOVS     r0,#3
                  |L20.44|
;;;1500         } 
;;;1501       }
;;;1502     }
;;;1503     
;;;1504     return HAL_OK;  
;;;1505   }
00002c  bd70              POP      {r4-r6,pc}
                  |L20.46|
00002e  6820              LDR      r0,[r4,#0]            ;1495
000030  68c0              LDR      r0,[r0,#0xc]          ;1495
000032  f0000040          AND      r0,r0,#0x40           ;1495
000036  2800              CMP      r0,#0                 ;1495
000038  d0f1              BEQ      |L20.30|
                  |L20.58|
00003a  2000              MOVS     r0,#0                 ;1504
00003c  e7f6              B        |L20.44|
;;;1506   
                          ENDP


;*** Start embedded assembler ***

#line 1 "HALLIB\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rtc_c_c7052556____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___19_stm32f4xx_hal_rtc_c_c7052556____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rtc_c_c7052556____REVSH|
#line 402
|__asm___19_stm32f4xx_hal_rtc_c_c7052556____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rtc_c_c7052556____RRX|
#line 587
|__asm___19_stm32f4xx_hal_rtc_c_c7052556____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
