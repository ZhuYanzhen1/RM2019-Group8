; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\referee_decode.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\referee_decode.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -IC:\Users\blx\Desktop\RM19\RM2019-Group8\ÏÂÎ»»ú\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0 -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\referee_decode.crf App\Referee_Decode.c]
                          THUMB

                          AREA ||i.Referee_Decode||, CODE, READONLY, ALIGN=2

                  Referee_Decode PROC
;;;12     
;;;13     void Referee_Decode(uint8_t data)
000000  b510              PUSH     {r4,lr}
;;;14     {
000002  4604              MOV      r4,r0
;;;15     	switch(Process)
000004  4852              LDR      r0,|L1.336|
000006  7800              LDRB     r0,[r0,#0]  ; Process
000008  280b              CMP      r0,#0xb
00000a  d212              BCS      |L1.50|
00000c  e8dff000          TBB      [pc,r0]
000010  06121d2f          DCB      0x06,0x12,0x1d,0x2f
000014  38414c63          DCB      0x38,0x41,0x4c,0x63
000018  808b9500          DCB      0x80,0x8b,0x95,0x00
;;;16     	{
;;;17     		case PROCESS_FIND_SOF:
;;;18     		{
;;;19     			if(data == SOF){
00001c  2ca5              CMP      r4,#0xa5
00001e  d103              BNE      |L1.40|
;;;20     				Process = PROCESS_DATA_LENGTH_LOW;
000020  2001              MOVS     r0,#1
000022  494b              LDR      r1,|L1.336|
000024  7008              STRB     r0,[r1,#0]
000026  e004              B        |L1.50|
                  |L1.40|
;;;21     			}else{
;;;22     				Process = PROCESS_FIND_SOF;
000028  2000              MOVS     r0,#0
00002a  4949              LDR      r1,|L1.336|
00002c  7008              STRB     r0,[r1,#0]
;;;23     				Recv_Cnt = 0;
00002e  4949              LDR      r1,|L1.340|
000030  7008              STRB     r0,[r1,#0]
                  |L1.50|
;;;24     			}
;;;25     		}break;
000032  e08b              B        |L1.332|
;;;26     		
;;;27     		case PROCESS_DATA_LENGTH_LOW:
;;;28     		{
;;;29     			Data_Length = 0;
000034  2000              MOVS     r0,#0
000036  4948              LDR      r1,|L1.344|
000038  8008              STRH     r0,[r1,#0]
;;;30     			Data_Length = Data_Length | data;
00003a  4608              MOV      r0,r1
00003c  8800              LDRH     r0,[r0,#0]  ; Data_Length
00003e  4320              ORRS     r0,r0,r4
000040  8008              STRH     r0,[r1,#0]
;;;31     			Process = PROCESS_DATA_LENGTH_HIGH;
000042  2002              MOVS     r0,#2
000044  4942              LDR      r1,|L1.336|
000046  7008              STRB     r0,[r1,#0]
;;;32     		}break;
000048  e080              B        |L1.332|
;;;33     		
;;;34     		case PROCESS_DATA_LENGTH_HIGH:
;;;35     		{
;;;36     			Data_Length = Data_Length | data<<8;
00004a  4843              LDR      r0,|L1.344|
00004c  8800              LDRH     r0,[r0,#0]  ; Data_Length
00004e  ea402004          ORR      r0,r0,r4,LSL #8
000052  4941              LDR      r1,|L1.344|
000054  8008              STRH     r0,[r1,#0]
;;;37     			if(Data_Length == sizeof(Summer_Camp_Info))
000056  4608              MOV      r0,r1
000058  8800              LDRH     r0,[r0,#0]  ; Data_Length
00005a  2857              CMP      r0,#0x57
00005c  d103              BNE      |L1.102|
;;;38     			{
;;;39     				Process = PROCESS_DATA_SEQ_NUM;
00005e  2003              MOVS     r0,#3
000060  493b              LDR      r1,|L1.336|
000062  7008              STRB     r0,[r1,#0]
000064  e002              B        |L1.108|
                  |L1.102|
;;;40     			}
;;;41     			else
;;;42     			{
;;;43     				Process = PROCESS_FIND_SOF;
000066  2000              MOVS     r0,#0
000068  4939              LDR      r1,|L1.336|
00006a  7008              STRB     r0,[r1,#0]
                  |L1.108|
;;;44     			}
;;;45     		}break;
00006c  e06e              B        |L1.332|
;;;46     		
;;;47     		case PROCESS_DATA_SEQ_NUM:
;;;48     		{
;;;49     			Seq_Num = 0;
00006e  2000              MOVS     r0,#0
000070  493a              LDR      r1,|L1.348|
000072  7008              STRB     r0,[r1,#0]
;;;50     			Seq_Num = data;
000074  4608              MOV      r0,r1
000076  7004              STRB     r4,[r0,#0]
;;;51     			Process = PROCESS_CRC8;
000078  2004              MOVS     r0,#4
00007a  4935              LDR      r1,|L1.336|
00007c  7008              STRB     r0,[r1,#0]
;;;52     		}break;
00007e  e065              B        |L1.332|
;;;53     		
;;;54     		case PROCESS_CRC8:
;;;55     		{
;;;56     			CRC8 = 0;
000080  2000              MOVS     r0,#0
000082  4937              LDR      r1,|L1.352|
000084  7008              STRB     r0,[r1,#0]
;;;57     			CRC8 = data;
000086  4608              MOV      r0,r1
000088  7004              STRB     r4,[r0,#0]
;;;58     			Process = PROCESS_CMD_ID_LOW;
00008a  2005              MOVS     r0,#5
00008c  4930              LDR      r1,|L1.336|
00008e  7008              STRB     r0,[r1,#0]
;;;59     		}break;
000090  e05c              B        |L1.332|
;;;60     		
;;;61     		case PROCESS_CMD_ID_LOW:
;;;62     		{
;;;63     			CMD_ID = 0;
000092  2000              MOVS     r0,#0
000094  4933              LDR      r1,|L1.356|
000096  7008              STRB     r0,[r1,#0]
;;;64     			CMD_ID = CMD_ID | data;
000098  4608              MOV      r0,r1
00009a  7800              LDRB     r0,[r0,#0]  ; CMD_ID
00009c  4320              ORRS     r0,r0,r4
00009e  7008              STRB     r0,[r1,#0]
;;;65     			Process = PROCESS_CMD_ID_HIGH;
0000a0  2006              MOVS     r0,#6
0000a2  492b              LDR      r1,|L1.336|
0000a4  7008              STRB     r0,[r1,#0]
;;;66     		}break;
0000a6  e051              B        |L1.332|
;;;67     		
;;;68     		case PROCESS_CMD_ID_HIGH:
;;;69     		{
;;;70     			CMD_ID = CMD_ID | data<<8;
0000a8  482e              LDR      r0,|L1.356|
0000aa  7800              LDRB     r0,[r0,#0]  ; CMD_ID
0000ac  ea402004          ORR      r0,r0,r4,LSL #8
0000b0  492c              LDR      r1,|L1.356|
0000b2  7008              STRB     r0,[r1,#0]
;;;71     			
;;;72     			if(CMD_ID != 0x01)
0000b4  4608              MOV      r0,r1
0000b6  7800              LDRB     r0,[r0,#0]  ; CMD_ID
0000b8  2801              CMP      r0,#1
0000ba  d005              BEQ      |L1.200|
;;;73     			{
;;;74     				Process = PROCESS_FIND_SOF;
0000bc  2000              MOVS     r0,#0
0000be  4924              LDR      r1,|L1.336|
0000c0  7008              STRB     r0,[r1,#0]
;;;75     				Recv_Cnt = 0;
0000c2  4924              LDR      r1,|L1.340|
0000c4  7008              STRB     r0,[r1,#0]
0000c6  e005              B        |L1.212|
                  |L1.200|
;;;76     			}
;;;77     			else
;;;78     			{
;;;79     				Process = PROCESS_DATA;
0000c8  2007              MOVS     r0,#7
0000ca  4921              LDR      r1,|L1.336|
0000cc  7008              STRB     r0,[r1,#0]
;;;80     				Recv_Cnt = 0;
0000ce  2000              MOVS     r0,#0
0000d0  4920              LDR      r1,|L1.340|
0000d2  7008              STRB     r0,[r1,#0]
                  |L1.212|
;;;81     			}
;;;82     		}break;
0000d4  e03a              B        |L1.332|
;;;83     		
;;;84     		case PROCESS_DATA:
;;;85     		{
;;;86     			if((Recv_Cnt+1)<=Data_Length)
0000d6  481f              LDR      r0,|L1.340|
0000d8  7800              LDRB     r0,[r0,#0]  ; Recv_Cnt
0000da  1c40              ADDS     r0,r0,#1
0000dc  491e              LDR      r1,|L1.344|
0000de  8809              LDRH     r1,[r1,#0]  ; Data_Length
0000e0  4288              CMP      r0,r1
0000e2  dc08              BGT      |L1.246|
;;;87     			{
;;;88     				Buffer[Recv_Cnt] = data;
0000e4  4820              LDR      r0,|L1.360|
0000e6  491b              LDR      r1,|L1.340|
0000e8  7809              LDRB     r1,[r1,#0]  ; Recv_Cnt
0000ea  5444              STRB     r4,[r0,r1]
;;;89     				Recv_Cnt++;
0000ec  4819              LDR      r0,|L1.340|
0000ee  7800              LDRB     r0,[r0,#0]  ; Recv_Cnt
0000f0  1c40              ADDS     r0,r0,#1
0000f2  4918              LDR      r1,|L1.340|
0000f4  7008              STRB     r0,[r1,#0]
                  |L1.246|
;;;90     			}
;;;91     			if((Recv_Cnt)==Data_Length)
0000f6  4817              LDR      r0,|L1.340|
0000f8  7800              LDRB     r0,[r0,#0]  ; Recv_Cnt
0000fa  4917              LDR      r1,|L1.344|
0000fc  8809              LDRH     r1,[r1,#0]  ; Data_Length
0000fe  4288              CMP      r0,r1
000100  d105              BNE      |L1.270|
;;;92     			{
;;;93     				Recv_Cnt = 0;
000102  2000              MOVS     r0,#0
000104  4913              LDR      r1,|L1.340|
000106  7008              STRB     r0,[r1,#0]
;;;94     				Process = PROCESS_CRC16_LOW;
000108  2008              MOVS     r0,#8
00010a  4911              LDR      r1,|L1.336|
00010c  7008              STRB     r0,[r1,#0]
                  |L1.270|
;;;95     			}
;;;96     		}break;
00010e  e01d              B        |L1.332|
;;;97     		
;;;98     		case PROCESS_CRC16_LOW:
;;;99     		{
;;;100    			CRC16 = 0;
000110  2000              MOVS     r0,#0
000112  4916              LDR      r1,|L1.364|
000114  7008              STRB     r0,[r1,#0]
;;;101    			CRC16 = CRC16 | data;
000116  4608              MOV      r0,r1
000118  7800              LDRB     r0,[r0,#0]  ; CRC16
00011a  4320              ORRS     r0,r0,r4
00011c  7008              STRB     r0,[r1,#0]
;;;102    			Process = PROCESS_CRC16_HIGH;
00011e  2009              MOVS     r0,#9
000120  490b              LDR      r1,|L1.336|
000122  7008              STRB     r0,[r1,#0]
;;;103    
;;;104    		}break;
000124  e012              B        |L1.332|
;;;105    		
;;;106    		case PROCESS_CRC16_HIGH:
;;;107    		{
;;;108    			CRC16 = CRC16 | data<<8;
000126  4811              LDR      r0,|L1.364|
000128  7800              LDRB     r0,[r0,#0]  ; CRC16
00012a  ea402004          ORR      r0,r0,r4,LSL #8
00012e  490f              LDR      r1,|L1.364|
000130  7008              STRB     r0,[r1,#0]
;;;109    			Process = PROCESS_FINISH;
000132  200a              MOVS     r0,#0xa
000134  4906              LDR      r1,|L1.336|
000136  7008              STRB     r0,[r1,#0]
;;;110    		}break;
000138  e008              B        |L1.332|
;;;111    		
;;;112    		case PROCESS_FINISH:
;;;113    		{
;;;114    			memcpy(&Summer_Camp_Info,Buffer,sizeof(Summer_Camp_Info));
00013a  2257              MOVS     r2,#0x57
00013c  490a              LDR      r1,|L1.360|
00013e  480c              LDR      r0,|L1.368|
000140  f7fffffe          BL       __aeabi_memcpy
;;;115    			Process = PROCESS_FIND_SOF;
000144  2000              MOVS     r0,#0
000146  4902              LDR      r1,|L1.336|
000148  7008              STRB     r0,[r1,#0]
;;;116    		}break;
00014a  bf00              NOP      
                  |L1.332|
00014c  bf00              NOP                            ;25
;;;117    	}
;;;118    }
00014e  bd10              POP      {r4,pc}
                          ENDP

                  |L1.336|
                          DCD      Process
                  |L1.340|
                          DCD      Recv_Cnt
                  |L1.344|
                          DCD      Data_Length
                  |L1.348|
                          DCD      Seq_Num
                  |L1.352|
                          DCD      CRC8
                  |L1.356|
                          DCD      CMD_ID
                  |L1.360|
                          DCD      Buffer
                  |L1.364|
                          DCD      CRC16
                  |L1.368|
                          DCD      Summer_Camp_Info

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Buffer
                          %        87

                          AREA ||.data||, DATA, ALIGN=1

                  Process
000000  0000              DCB      0x00,0x00
                  Data_Length
000002  0000              DCW      0x0000
                  Seq_Num
000004  00                DCB      0x00
                  CRC8
000005  00                DCB      0x00
                  CMD_ID
000006  00                DCB      0x00
                  Recv_Cnt
000007  00                DCB      0x00
                  CRC16
000008  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "App\\Referee_Decode.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_Referee_Decode_c_Process____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___16_Referee_Decode_c_Process____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_Referee_Decode_c_Process____REVSH|
#line 402
|__asm___16_Referee_Decode_c_Process____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_Referee_Decode_c_Process____RRX|
#line 587
|__asm___16_Referee_Decode_c_Process____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
