; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_hal_pwr.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm32f4xx_hal_pwr.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm32f4xx_hal_pwr.crf HALLIB\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pwr.c]
                          THUMB

                          AREA ||i.HAL_PWR_ConfigPVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_ConfigPVD PROC
;;;269      */
;;;270    void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
000000  492a              LDR      r1,|L1.172|
;;;271    {
;;;272      /* Check the parameters */
;;;273      assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
;;;274      assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
;;;275      
;;;276      /* Set PLS[7:5] bits according to PVDLevel value */
;;;277      MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
000002  6809              LDR      r1,[r1,#0]
000004  f02101e0          BIC      r1,r1,#0xe0
000008  6802              LDR      r2,[r0,#0]
00000a  4311              ORRS     r1,r1,r2
00000c  4a27              LDR      r2,|L1.172|
00000e  6011              STR      r1,[r2,#0]
;;;278      
;;;279      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
;;;280      __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
000010  4927              LDR      r1,|L1.176|
000012  6809              LDR      r1,[r1,#0]
000014  f4213180          BIC      r1,r1,#0x10000
000018  4a25              LDR      r2,|L1.176|
00001a  6011              STR      r1,[r2,#0]
;;;281      __HAL_PWR_PVD_EXTI_DISABLE_IT();
00001c  1f11              SUBS     r1,r2,#4
00001e  6809              LDR      r1,[r1,#0]
000020  f4213180          BIC      r1,r1,#0x10000
000024  1f12              SUBS     r2,r2,#4
000026  6011              STR      r1,[r2,#0]
;;;282      __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
000028  4921              LDR      r1,|L1.176|
00002a  1d09              ADDS     r1,r1,#4
00002c  6809              LDR      r1,[r1,#0]
00002e  f4213180          BIC      r1,r1,#0x10000
000032  4a1f              LDR      r2,|L1.176|
000034  1d12              ADDS     r2,r2,#4
000036  6011              STR      r1,[r2,#0]
;;;283      __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
000038  1d11              ADDS     r1,r2,#4
00003a  6809              LDR      r1,[r1,#0]
00003c  f4213180          BIC      r1,r1,#0x10000
000040  1d12              ADDS     r2,r2,#4
000042  6011              STR      r1,[r2,#0]
;;;284    
;;;285      /* Configure interrupt mode */
;;;286      if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
000044  6841              LDR      r1,[r0,#4]
000046  f4013180          AND      r1,r1,#0x10000
00004a  f5b13f80          CMP      r1,#0x10000
00004e  d107              BNE      |L1.96|
;;;287      {
;;;288        __HAL_PWR_PVD_EXTI_ENABLE_IT();
000050  4917              LDR      r1,|L1.176|
000052  1f09              SUBS     r1,r1,#4
000054  6809              LDR      r1,[r1,#0]
000056  f4413180          ORR      r1,r1,#0x10000
00005a  4a15              LDR      r2,|L1.176|
00005c  1f12              SUBS     r2,r2,#4
00005e  6011              STR      r1,[r2,#0]
                  |L1.96|
;;;289      }
;;;290      
;;;291      /* Configure event mode */
;;;292      if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
000060  6841              LDR      r1,[r0,#4]
000062  f4013100          AND      r1,r1,#0x20000
000066  f5b13f00          CMP      r1,#0x20000
00006a  d105              BNE      |L1.120|
;;;293      {
;;;294        __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
00006c  4910              LDR      r1,|L1.176|
00006e  6809              LDR      r1,[r1,#0]
000070  f4413180          ORR      r1,r1,#0x10000
000074  4a0e              LDR      r2,|L1.176|
000076  6011              STR      r1,[r2,#0]
                  |L1.120|
;;;295      }
;;;296      
;;;297      /* Configure the edge */
;;;298      if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
000078  7901              LDRB     r1,[r0,#4]
00007a  f0010101          AND      r1,r1,#1
00007e  b139              CBZ      r1,|L1.144|
;;;299      {
;;;300        __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
000080  490b              LDR      r1,|L1.176|
000082  1d09              ADDS     r1,r1,#4
000084  6809              LDR      r1,[r1,#0]
000086  f4413180          ORR      r1,r1,#0x10000
00008a  4a09              LDR      r2,|L1.176|
00008c  1d12              ADDS     r2,r2,#4
00008e  6011              STR      r1,[r2,#0]
                  |L1.144|
;;;301      }
;;;302      
;;;303      if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
000090  7901              LDRB     r1,[r0,#4]
000092  f0010102          AND      r1,r1,#2
000096  2902              CMP      r1,#2
000098  d107              BNE      |L1.170|
;;;304      {
;;;305        __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
00009a  4905              LDR      r1,|L1.176|
00009c  3108              ADDS     r1,r1,#8
00009e  6809              LDR      r1,[r1,#0]
0000a0  f4413180          ORR      r1,r1,#0x10000
0000a4  4a02              LDR      r2,|L1.176|
0000a6  3208              ADDS     r2,r2,#8
0000a8  6011              STR      r1,[r2,#0]
                  |L1.170|
;;;306      }
;;;307    }
0000aa  4770              BX       lr
;;;308    
                          ENDP

                  |L1.172|
                          DCD      0x40007000
                  |L1.176|
                          DCD      0x40013c04

                          AREA ||i.HAL_PWR_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DeInit PROC
;;;109      */
;;;110    void HAL_PWR_DeInit(void)
000000  4805              LDR      r0,|L2.24|
;;;111    {
;;;112      __HAL_RCC_PWR_FORCE_RESET();
000002  6800              LDR      r0,[r0,#0]
000004  f0405080          ORR      r0,r0,#0x10000000
000008  4903              LDR      r1,|L2.24|
00000a  6008              STR      r0,[r1,#0]
;;;113      __HAL_RCC_PWR_RELEASE_RESET();
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]
000010  f0205080          BIC      r0,r0,#0x10000000
000014  6008              STR      r0,[r1,#0]
;;;114    }
000016  4770              BX       lr
;;;115    
                          ENDP

                  |L2.24|
                          DCD      0x40023820

                          AREA ||i.HAL_PWR_DisableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableBkUpAccess PROC
;;;134      */
;;;135    void HAL_PWR_DisableBkUpAccess(void)
000000  2000              MOVS     r0,#0
;;;136    {
;;;137      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
000002  f44f7180          MOV      r1,#0x100
000006  fa91f1a1          RBIT     r1,r1
00000a  fab1f181          CLZ      r1,r1
00000e  4a02              LDR      r2,|L3.24|
000010  f8420021          STR      r0,[r2,r1,LSL #2]
;;;138    }
000014  4770              BX       lr
;;;139    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_DisablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisablePVD PROC
;;;321      */
;;;322    void HAL_PWR_DisablePVD(void)
000000  2000              MOVS     r0,#0
;;;323    {
;;;324      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
000002  2110              MOVS     r1,#0x10
000004  fa91f1a1          RBIT     r1,r1
000008  fab1f181          CLZ      r1,r1
00000c  4a01              LDR      r2,|L4.20|
00000e  f8420021          STR      r0,[r2,r1,LSL #2]
;;;325    }
000012  4770              BX       lr
;;;326    
                          ENDP

                  |L4.20|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_DisableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSEVOnPend PROC
;;;556      */
;;;557    void HAL_PWR_DisableSEVOnPend(void)
000000  4803              LDR      r0,|L5.16|
;;;558    {
;;;559      /* Clear SEVONPEND bit of Cortex System Control Register */
;;;560      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6800              LDR      r0,[r0,#0]
000004  f0200010          BIC      r0,r0,#0x10
000008  4901              LDR      r1,|L5.16|
00000a  6008              STR      r0,[r1,#0]
;;;561    }
00000c  4770              BX       lr
;;;562    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSleepOnExit PROC
;;;532      */
;;;533    void HAL_PWR_DisableSleepOnExit(void)
000000  4803              LDR      r0,|L6.16|
;;;534    {
;;;535      /* Clear SLEEPONEXIT bit of Cortex System Control Register */
;;;536      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6800              LDR      r0,[r0,#0]
000004  f0200002          BIC      r0,r0,#2
000008  4901              LDR      r1,|L6.16|
00000a  6008              STR      r0,[r1,#0]
;;;537    }
00000c  4770              BX       lr
;;;538    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableWakeUpPin PROC
;;;353      */
;;;354    void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
000000  4902              LDR      r1,|L7.12|
;;;355    {
;;;356      /* Check the parameter */
;;;357      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  
;;;358    
;;;359      /* Disable the wake up pin */
;;;360      CLEAR_BIT(PWR->CSR, WakeUpPinx);
000002  6849              LDR      r1,[r1,#4]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L7.12|
000008  6051              STR      r1,[r2,#4]
;;;361    }
00000a  4770              BX       lr
;;;362      
                          ENDP

                  |L7.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableBkUpAccess PROC
;;;122      */
;;;123    void HAL_PWR_EnableBkUpAccess(void)
000000  2001              MOVS     r0,#1
;;;124    {
;;;125      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
000002  0201              LSLS     r1,r0,#8
000004  fa91f1a1          RBIT     r1,r1
000008  fab1f181          CLZ      r1,r1
00000c  4a01              LDR      r2,|L8.20|
00000e  f8420021          STR      r0,[r2,r1,LSL #2]
;;;126    }
000012  4770              BX       lr
;;;127    
                          ENDP

                  |L8.20|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnablePVD PROC
;;;312      */
;;;313    void HAL_PWR_EnablePVD(void)
000000  2001              MOVS     r0,#1
;;;314    {
;;;315      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
000002  2110              MOVS     r1,#0x10
000004  fa91f1a1          RBIT     r1,r1
000008  fab1f181          CLZ      r1,r1
00000c  4a01              LDR      r2,|L9.20|
00000e  f8420021          STR      r0,[r2,r1,LSL #2]
;;;316    }
000012  4770              BX       lr
;;;317    
                          ENDP

                  |L9.20|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSEVOnPend PROC
;;;544      */
;;;545    void HAL_PWR_EnableSEVOnPend(void)
000000  4803              LDR      r0,|L10.16|
;;;546    {
;;;547      /* Set SEVONPEND bit of Cortex System Control Register */
;;;548      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6800              LDR      r0,[r0,#0]
000004  f0400010          ORR      r0,r0,#0x10
000008  4901              LDR      r1,|L10.16|
00000a  6008              STR      r0,[r1,#0]
;;;549    }
00000c  4770              BX       lr
;;;550    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSleepOnExit PROC
;;;520      */
;;;521    void HAL_PWR_EnableSleepOnExit(void)
000000  4803              LDR      r0,|L11.16|
;;;522    {
;;;523      /* Set SLEEPONEXIT bit of Cortex System Control Register */
;;;524      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6800              LDR      r0,[r0,#0]
000004  f0400002          ORR      r0,r0,#2
000008  4901              LDR      r1,|L11.16|
00000a  6008              STR      r0,[r1,#0]
;;;525    }
00000c  4770              BX       lr
;;;526    
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableWakeUpPin PROC
;;;335      */
;;;336    void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
000000  4902              LDR      r1,|L12.12|
;;;337    {
;;;338      /* Check the parameter */
;;;339      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;340    
;;;341      /* Enable the wake up pin */
;;;342      SET_BIT(PWR->CSR, WakeUpPinx);
000002  6849              LDR      r1,[r1,#4]
000004  4301              ORRS     r1,r1,r0
000006  4a01              LDR      r2,|L12.12|
000008  6051              STR      r1,[r2,#4]
;;;343    }
00000a  4770              BX       lr
;;;344    
                          ENDP

                  |L12.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnterSLEEPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSLEEPMode PROC
;;;382      */
;;;383    void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
000000  4a06              LDR      r2,|L13.28|
;;;384    {
;;;385      /* Check the parameters */
;;;386      assert_param(IS_PWR_REGULATOR(Regulator));
;;;387      assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
;;;388    
;;;389      /* Clear SLEEPDEEP bit of Cortex System Control Register */
;;;390      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000002  6812              LDR      r2,[r2,#0]
000004  f0220204          BIC      r2,r2,#4
000008  4b04              LDR      r3,|L13.28|
00000a  601a              STR      r2,[r3,#0]
;;;391    
;;;392      /* Select SLEEP mode entry -------------------------------------------------*/
;;;393      if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
00000c  2901              CMP      r1,#1
00000e  d101              BNE      |L13.20|
;;;394      {   
;;;395        /* Request Wait For Interrupt */
;;;396        __WFI();
000010  bf30              WFI      
000012  e002              B        |L13.26|
                  |L13.20|
;;;397      }
;;;398      else
;;;399      {
;;;400        /* Request Wait For Event */
;;;401        __SEV();
000014  bf40              SEV      
;;;402        __WFE();
000016  bf20              WFE      
;;;403        __WFE();
000018  bf20              WFE      
                  |L13.26|
;;;404      }
;;;405    }
00001a  4770              BX       lr
;;;406    
                          ENDP

                  |L13.28|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTANDBYMode PROC
;;;464      */
;;;465    void HAL_PWR_EnterSTANDBYMode(void)
000000  4807              LDR      r0,|L14.32|
;;;466    {
;;;467      /* Select Standby mode */
;;;468      SET_BIT(PWR->CR, PWR_CR_PDDS);
000002  6800              LDR      r0,[r0,#0]
000004  f0400002          ORR      r0,r0,#2
000008  4905              LDR      r1,|L14.32|
00000a  6008              STR      r0,[r1,#0]
;;;469    
;;;470      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;471      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000c  4805              LDR      r0,|L14.36|
00000e  6800              LDR      r0,[r0,#0]
000010  f0400004          ORR      r0,r0,#4
000014  4903              LDR      r1,|L14.36|
000016  6008              STR      r0,[r1,#0]
;;;472      
;;;473      /* This option is used to ensure that store operations are completed */
;;;474    #if defined ( __CC_ARM)
;;;475      __force_stores();
000018  bf00              NOP      
00001a  bf00              NOP      
;;;476    #endif
;;;477      /* Request Wait For Interrupt */
;;;478      __WFI();
00001c  bf30              WFI      
;;;479    }
00001e  4770              BX       lr
;;;480    
                          ENDP

                  |L14.32|
                          DCD      0x40007000
                  |L14.36|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTOPMode PROC
;;;425      */
;;;426    void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
000000  4a0d              LDR      r2,|L15.56|
;;;427    {
;;;428      /* Check the parameters */
;;;429      assert_param(IS_PWR_REGULATOR(Regulator));
;;;430      assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
;;;431      
;;;432      /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
;;;433      MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
000002  6812              LDR      r2,[r2,#0]
000004  f0220203          BIC      r2,r2,#3
000008  4302              ORRS     r2,r2,r0
00000a  4b0b              LDR      r3,|L15.56|
00000c  601a              STR      r2,[r3,#0]
;;;434      
;;;435      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;436      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000e  4a0b              LDR      r2,|L15.60|
000010  6812              LDR      r2,[r2,#0]
000012  f0420204          ORR      r2,r2,#4
000016  4b09              LDR      r3,|L15.60|
000018  601a              STR      r2,[r3,#0]
;;;437      
;;;438      /* Select Stop mode entry --------------------------------------------------*/
;;;439      if(STOPEntry == PWR_STOPENTRY_WFI)
00001a  2901              CMP      r1,#1
00001c  d101              BNE      |L15.34|
;;;440      {   
;;;441        /* Request Wait For Interrupt */
;;;442        __WFI();
00001e  bf30              WFI      
000020  e002              B        |L15.40|
                  |L15.34|
;;;443      }
;;;444      else
;;;445      {
;;;446        /* Request Wait For Event */
;;;447        __SEV();
000022  bf40              SEV      
;;;448        __WFE();
000024  bf20              WFE      
;;;449        __WFE();
000026  bf20              WFE      
                  |L15.40|
;;;450      }
;;;451      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;452      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
000028  4a04              LDR      r2,|L15.60|
00002a  6812              LDR      r2,[r2,#0]
00002c  f0220204          BIC      r2,r2,#4
000030  4b02              LDR      r3,|L15.60|
000032  601a              STR      r2,[r3,#0]
;;;453    }
000034  4770              BX       lr
;;;454    
                          ENDP

000036  0000              DCW      0x0000
                  |L15.56|
                          DCD      0x40007000
                  |L15.60|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_PVDCallback||, CODE, READONLY, ALIGN=1

                  HAL_PWR_PVDCallback PROC
;;;502      */
;;;503    __weak void HAL_PWR_PVDCallback(void)
000000  b508              PUSH     {r3,lr}
;;;504    {
;;;505      /* Prevent unused argument(s) compilation warning */
;;;506      __IO uint32_t tmpreg = 0x00;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;507      UNUSED(tmpreg);
000006  bf00              NOP      
;;;508      /* NOTE : This function Should not be modified, when the callback is needed,
;;;509                the HAL_PWR_PVDCallback could be implemented in the user file
;;;510       */ 
;;;511    }
000008  bd08              POP      {r3,pc}
;;;512    
                          ENDP


                          AREA ||i.HAL_PWR_PVD_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_PWR_PVD_IRQHandler PROC
;;;485      */
;;;486    void HAL_PWR_PVD_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;487    {
;;;488      /* Check PWR Exti flag */
;;;489      if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
000002  4806              LDR      r0,|L17.28|
000004  6800              LDR      r0,[r0,#0]
000006  f4003080          AND      r0,r0,#0x10000
00000a  b128              CBZ      r0,|L17.24|
;;;490      {
;;;491        /* PWR PVD interrupt user callback */
;;;492        HAL_PWR_PVDCallback();
00000c  f7fffffe          BL       HAL_PWR_PVDCallback
;;;493        
;;;494        /* Clear PWR Exti pending bit */
;;;495        __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
000010  f44f3080          MOV      r0,#0x10000
000014  4901              LDR      r1,|L17.28|
000016  6008              STR      r0,[r1,#0]
                  |L17.24|
;;;496      }
;;;497    }
000018  bd10              POP      {r4,pc}
;;;498    
                          ENDP

00001a  0000              DCW      0x0000
                  |L17.28|
                          DCD      0x40013c14

;*** Start embedded assembler ***

#line 1 "HALLIB\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____REVSH|
#line 402
|__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____RRX|
#line 587
|__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
