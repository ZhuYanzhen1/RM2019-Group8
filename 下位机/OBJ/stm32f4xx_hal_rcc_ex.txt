; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_hal_rcc_ex.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm32f4xx_hal_rcc_ex.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm32f4xx_hal_rcc_ex.crf HALLIB\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rcc_ex.c]
                          THUMB

                          AREA ||i.HAL_RCCEx_GetPeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKConfig PROC
;;;1502     */
;;;1503   void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  223f              MOVS     r2,#0x3f
;;;1504   {
;;;1505     uint32_t tempreg;
;;;1506     
;;;1507     /* Set all possible values for the extended clock type parameter------------*/
;;;1508     PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_SAI_PLLSAI | RCC_PERIPHCLK_SAI_PLLI2S | RCC_PERIPHCLK_LTDC | RCC_PERIPHCLK_TIM | RCC_PERIPHCLK_RTC;
000002  6002              STR      r2,[r0,#0]
;;;1509     
;;;1510     /* Get the PLLI2S Clock configuration -----------------------------------------------*/
;;;1511     PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
000004  4a40              LDR      r2,|L1.264|
000006  6812              LDR      r2,[r2,#0]
000008  f64773c0          MOV      r3,#0x7fc0
00000c  401a              ANDS     r2,r2,r3
00000e  fa93f3a3          RBIT     r3,r3
000012  fab3f383          CLZ      r3,r3
000016  40da              LSRS     r2,r2,r3
000018  6042              STR      r2,[r0,#4]
;;;1512     PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
00001a  4a3b              LDR      r2,|L1.264|
00001c  6812              LDR      r2,[r2,#0]
00001e  f00242e0          AND      r2,r2,#0x70000000
000022  f04f43e0          MOV      r3,#0x70000000
000026  fa93f3a3          RBIT     r3,r3
00002a  fab3f383          CLZ      r3,r3
00002e  40da              LSRS     r2,r2,r3
000030  6082              STR      r2,[r0,#8]
;;;1513     PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
000032  4a35              LDR      r2,|L1.264|
000034  6812              LDR      r2,[r2,#0]
000036  f0026270          AND      r2,r2,#0xf000000
00003a  f04f6370          MOV      r3,#0xf000000
00003e  fa93f3a3          RBIT     r3,r3
000042  fab3f383          CLZ      r3,r3
000046  40da              LSRS     r2,r2,r3
000048  60c2              STR      r2,[r0,#0xc]
;;;1514     /* Get the PLLSAI Clock configuration -----------------------------------------------*/
;;;1515     PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
00004a  4a2f              LDR      r2,|L1.264|
00004c  1d12              ADDS     r2,r2,#4
00004e  6812              LDR      r2,[r2,#0]
000050  f64773c0          MOV      r3,#0x7fc0
000054  401a              ANDS     r2,r2,r3
000056  fa93f3a3          RBIT     r3,r3
00005a  fab3f383          CLZ      r3,r3
00005e  40da              LSRS     r2,r2,r3
000060  6102              STR      r2,[r0,#0x10]
;;;1516     PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
000062  4a29              LDR      r2,|L1.264|
000064  1d12              ADDS     r2,r2,#4
000066  6812              LDR      r2,[r2,#0]
000068  f00242e0          AND      r2,r2,#0x70000000
00006c  f04f43e0          MOV      r3,#0x70000000
000070  fa93f3a3          RBIT     r3,r3
000074  fab3f383          CLZ      r3,r3
000078  40da              LSRS     r2,r2,r3
00007a  6182              STR      r2,[r0,#0x18]
;;;1517     PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
00007c  4a22              LDR      r2,|L1.264|
00007e  1d12              ADDS     r2,r2,#4
000080  6812              LDR      r2,[r2,#0]
000082  f0026270          AND      r2,r2,#0xf000000
000086  f04f6370          MOV      r3,#0xf000000
00008a  fa93f3a3          RBIT     r3,r3
00008e  fab3f383          CLZ      r3,r3
000092  40da              LSRS     r2,r2,r3
000094  6142              STR      r2,[r0,#0x14]
;;;1518     /* Get the PLLSAI/PLLI2S division factors -----------------------------------------------*/
;;;1519     PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR_PLLI2SDIVQ));
000096  4a1c              LDR      r2,|L1.264|
000098  3208              ADDS     r2,r2,#8
00009a  6812              LDR      r2,[r2,#0]
00009c  f002021f          AND      r2,r2,#0x1f
0000a0  231f              MOVS     r3,#0x1f
0000a2  fa93f3a3          RBIT     r3,r3
0000a6  fab3f383          CLZ      r3,r3
0000aa  40da              LSRS     r2,r2,r3
0000ac  61c2              STR      r2,[r0,#0x1c]
;;;1520     PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR_PLLSAIDIVQ));
0000ae  4a16              LDR      r2,|L1.264|
0000b0  3208              ADDS     r2,r2,#8
0000b2  6812              LDR      r2,[r2,#0]
0000b4  f40252f8          AND      r2,r2,#0x1f00
0000b8  f44f53f8          MOV      r3,#0x1f00
0000bc  fa93f3a3          RBIT     r3,r3
0000c0  fab3f383          CLZ      r3,r3
0000c4  40da              LSRS     r2,r2,r3
0000c6  6202              STR      r2,[r0,#0x20]
;;;1521     PeriphClkInit->PLLSAIDivR = (uint32_t)(RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVR);
0000c8  4a0f              LDR      r2,|L1.264|
0000ca  3208              ADDS     r2,r2,#8
0000cc  6812              LDR      r2,[r2,#0]
0000ce  f4023240          AND      r2,r2,#0x30000
0000d2  6242              STR      r2,[r0,#0x24]
;;;1522     /* Get the RTC Clock configuration -----------------------------------------------*/
;;;1523     tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
0000d4  4a0c              LDR      r2,|L1.264|
0000d6  3a7c              SUBS     r2,r2,#0x7c
0000d8  6812              LDR      r2,[r2,#0]
0000da  f40211f8          AND      r1,r2,#0x1f0000
;;;1524     PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
0000de  4a0a              LDR      r2,|L1.264|
0000e0  3a14              SUBS     r2,r2,#0x14
0000e2  6812              LDR      r2,[r2,#0]
0000e4  f4027240          AND      r2,r2,#0x300
0000e8  430a              ORRS     r2,r2,r1
0000ea  6282              STR      r2,[r0,#0x28]
;;;1525     
;;;1526     if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
0000ec  4a06              LDR      r2,|L1.264|
0000ee  3208              ADDS     r2,r2,#8
0000f0  6812              LDR      r2,[r2,#0]
0000f2  f0027280          AND      r2,r2,#0x1000000
0000f6  b91a              CBNZ     r2,|L1.256|
;;;1527     {
;;;1528       PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
0000f8  2200              MOVS     r2,#0
0000fa  f880202c          STRB     r2,[r0,#0x2c]
0000fe  e002              B        |L1.262|
                  |L1.256|
;;;1529     }
;;;1530     else
;;;1531     {
;;;1532       PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
000100  2201              MOVS     r2,#1
000102  f880202c          STRB     r2,[r0,#0x2c]
                  |L1.262|
;;;1533     }
;;;1534   }
000106  4770              BX       lr
;;;1535   
                          ENDP

                  |L1.264|
                          DCD      0x40023884

                          AREA ||i.HAL_RCCEx_PeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_PeriphCLKConfig PROC
;;;1281     */
;;;1282   HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1283   {
000002  4604              MOV      r4,r0
;;;1284     uint32_t tickstart = 0;
000004  2500              MOVS     r5,#0
;;;1285     uint32_t tmpreg1 = 0;
000006  2600              MOVS     r6,#0
;;;1286       
;;;1287     /* Check the parameters */
;;;1288     assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
;;;1289     
;;;1290     /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
;;;1291     /*----------------------- Common configuration SAI/I2S ----------------------*/
;;;1292     /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division   
;;;1293        factor is common parameters for both peripherals */ 
;;;1294     if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
000008  7820              LDRB     r0,[r4,#0]
00000a  f0000001          AND      r0,r0,#1
00000e  b920              CBNZ     r0,|L2.26|
;;;1295        (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
000010  7820              LDRB     r0,[r4,#0]
000012  f0000002          AND      r0,r0,#2
000016  2802              CMP      r0,#2
000018  d166              BNE      |L2.232|
                  |L2.26|
;;;1296     {
;;;1297       /* check for Parameters */
;;;1298       assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
;;;1299           
;;;1300       /* Disable the PLLI2S */
;;;1301       __HAL_RCC_PLLI2S_DISABLE();    
00001a  2000              MOVS     r0,#0
00001c  49cc              LDR      r1,|L2.848|
00001e  6688              STR      r0,[r1,#0x68]
;;;1302       /* Get tick */
;;;1303       tickstart = HAL_GetTick();
000020  f7fffffe          BL       HAL_GetTick
000024  4605              MOV      r5,r0
;;;1304       /* Wait till PLLI2S is disabled */
;;;1305       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
000026  e006              B        |L2.54|
                  |L2.40|
;;;1306       {
;;;1307         if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
000028  f7fffffe          BL       HAL_GetTick
00002c  1b40              SUBS     r0,r0,r5
00002e  2864              CMP      r0,#0x64
000030  d901              BLS      |L2.54|
;;;1308         {
;;;1309           /* return in case of Timeout detected */
;;;1310           return HAL_TIMEOUT;
000032  2003              MOVS     r0,#3
                  |L2.52|
;;;1311         }
;;;1312       }
;;;1313       
;;;1314       /*---------------------------- I2S configuration -------------------------------*/
;;;1315       /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added   
;;;1316         only for I2S configuration */     
;;;1317       if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
;;;1318       {
;;;1319         /* check for Parameters */
;;;1320         assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
;;;1321         /* Configure the PLLI2S division factors */
;;;1322         /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
;;;1323         /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
;;;1324         __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
;;;1325       }
;;;1326     
;;;1327       /*---------------------------- SAI configuration -------------------------------*/ 
;;;1328       /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must  
;;;1329          be added only for SAI configuration */     
;;;1330       if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
;;;1331       {
;;;1332         /* Check the PLLI2S division factors */
;;;1333         assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
;;;1334         assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
;;;1335         
;;;1336         /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
;;;1337         tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
;;;1338         /* Configure the PLLI2S division factors */      
;;;1339         /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
;;;1340         /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;1341         /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
;;;1342         __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
;;;1343         /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
;;;1344         __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
;;;1345       }
;;;1346       
;;;1347       /* Enable the PLLI2S */
;;;1348       __HAL_RCC_PLLI2S_ENABLE();
;;;1349       /* Get tick */
;;;1350       tickstart = HAL_GetTick();
;;;1351       /* Wait till PLLI2S is ready */
;;;1352       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
;;;1353       {
;;;1354         if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
;;;1355         {
;;;1356           /* return in case of Timeout detected */
;;;1357           return HAL_TIMEOUT;
;;;1358         }
;;;1359       }
;;;1360     }
;;;1361     /*--------------------------------------------------------------------------*/
;;;1362       
;;;1363     /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
;;;1364     /*----------------------- Common configuration SAI/LTDC --------------------*/
;;;1365     /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
;;;1366        factor is common parameters for both peripherals */ 
;;;1367     if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
;;;1368        (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
;;;1369     {
;;;1370       /* Check the PLLSAI division factors */
;;;1371       assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
;;;1372    
;;;1373       /* Disable PLLSAI Clock */
;;;1374       __HAL_RCC_PLLSAI_DISABLE(); 
;;;1375       /* Get tick */
;;;1376       tickstart = HAL_GetTick();
;;;1377       /* Wait till PLLSAI is disabled */
;;;1378       while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
;;;1379       {
;;;1380         if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
;;;1381         { 
;;;1382           /* return in case of Timeout detected */
;;;1383           return HAL_TIMEOUT;
;;;1384         }
;;;1385       }
;;;1386       
;;;1387       /*---------------------------- SAI configuration -------------------------*/
;;;1388       /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must  
;;;1389          be added only for SAI configuration */     
;;;1390       if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
;;;1391       {
;;;1392         assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
;;;1393         assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
;;;1394         
;;;1395         /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
;;;1396         tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
;;;1397         /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
;;;1398         /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;1399         /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
;;;1400         __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
;;;1401         /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
;;;1402         __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
;;;1403       }
;;;1404       
;;;1405       /*---------------------------- LTDC configuration ------------------------*/
;;;1406       if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
;;;1407       {
;;;1408         assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
;;;1409         assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
;;;1410         
;;;1411         /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
;;;1412         tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
;;;1413         /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
;;;1414         /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;1415         /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
;;;1416         __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
;;;1417         /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
;;;1418         __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
;;;1419       }    
;;;1420       /* Enable PLLSAI Clock */
;;;1421       __HAL_RCC_PLLSAI_ENABLE();
;;;1422       /* Get tick */
;;;1423       tickstart = HAL_GetTick();
;;;1424       /* Wait till PLLSAI is ready */
;;;1425       while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
;;;1426       {
;;;1427         if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
;;;1428         { 
;;;1429           /* return in case of Timeout detected */
;;;1430           return HAL_TIMEOUT;
;;;1431         }
;;;1432       }  
;;;1433     }
;;;1434     /*--------------------------------------------------------------------------*/
;;;1435       
;;;1436     /*---------------------------- RTC configuration ---------------------------*/
;;;1437     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
;;;1438     {
;;;1439       /* Enable Power Clock*/
;;;1440       __HAL_RCC_PWR_CLK_ENABLE();
;;;1441         
;;;1442       /* Enable write access to Backup domain */
;;;1443       PWR->CR |= PWR_CR_DBP;
;;;1444         
;;;1445       /* Get tick */
;;;1446       tickstart = HAL_GetTick();
;;;1447         
;;;1448       while((PWR->CR & PWR_CR_DBP) == RESET)
;;;1449       {
;;;1450         if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
;;;1451         {
;;;1452           return HAL_TIMEOUT;
;;;1453         }
;;;1454       }
;;;1455         
;;;1456       /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
;;;1457       if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
;;;1458       {
;;;1459         
;;;1460         /* Store the content of BDCR register before the reset of Backup Domain */
;;;1461         tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
;;;1462         /* RTC Clock selection can be changed only if the Backup Domain is reset */
;;;1463         __HAL_RCC_BACKUPRESET_FORCE();
;;;1464         __HAL_RCC_BACKUPRESET_RELEASE();
;;;1465         /* Restore the Content of BDCR register */
;;;1466         RCC->BDCR = tmpreg1;
;;;1467         
;;;1468         /* Wait for LSERDY if LSE was enabled */
;;;1469         if(HAL_IS_BIT_SET(tmpreg1, RCC_BDCR_LSERDY))
;;;1470         {
;;;1471           /* Get tick */
;;;1472           tickstart = HAL_GetTick();
;;;1473           
;;;1474           /* Wait till LSE is ready */
;;;1475           while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;1476           {
;;;1477             if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;1478             {
;;;1479               return HAL_TIMEOUT;
;;;1480             }
;;;1481           }
;;;1482         }
;;;1483         __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
;;;1484       }
;;;1485     }
;;;1486     /*--------------------------------------------------------------------------*/
;;;1487   
;;;1488     /*---------------------------- TIM configuration ---------------------------*/
;;;1489     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
;;;1490     {
;;;1491       __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
;;;1492     }
;;;1493     return HAL_OK;
;;;1494   }
000034  bdf8              POP      {r3-r7,pc}
                  |L2.54|
000036  48c7              LDR      r0,|L2.852|
000038  6800              LDR      r0,[r0,#0]            ;1305
00003a  f3c060c0          UBFX     r0,r0,#27,#1          ;1305
00003e  2800              CMP      r0,#0                 ;1305
000040  d1f2              BNE      |L2.40|
000042  7820              LDRB     r0,[r4,#0]            ;1317
000044  f0000001          AND      r0,r0,#1              ;1317
000048  b198              CBZ      r0,|L2.114|
00004a  f64771c0          MOV      r1,#0x7fc0            ;1324
00004e  fa91f1a1          RBIT     r1,r1                 ;1324
000052  fab1f181          CLZ      r1,r1                 ;1324
000056  6860              LDR      r0,[r4,#4]            ;1324
000058  4088              LSLS     r0,r0,r1              ;1324
00005a  f04f42e0          MOV      r2,#0x70000000        ;1324
00005e  fa92f2a2          RBIT     r2,r2                 ;1324
000062  fab2f282          CLZ      r2,r2                 ;1324
000066  68a1              LDR      r1,[r4,#8]            ;1324
000068  4091              LSLS     r1,r1,r2              ;1324
00006a  4308              ORRS     r0,r0,r1              ;1324
00006c  49b9              LDR      r1,|L2.852|
00006e  3184              ADDS     r1,r1,#0x84           ;1324
000070  6008              STR      r0,[r1,#0]            ;1324
                  |L2.114|
000072  7820              LDRB     r0,[r4,#0]            ;1330
000074  f0000002          AND      r0,r0,#2              ;1330
000078  2802              CMP      r0,#2                 ;1330
00007a  d121              BNE      |L2.192|
00007c  48b5              LDR      r0,|L2.852|
00007e  3084              ADDS     r0,r0,#0x84           ;1337
000080  6800              LDR      r0,[r0,#0]            ;1337
000082  f00040e0          AND      r0,r0,#0x70000000     ;1337
000086  f04f41e0          MOV      r1,#0x70000000        ;1337
00008a  fa91f1a1          RBIT     r1,r1                 ;1337
00008e  fab1f181          CLZ      r1,r1                 ;1337
000092  fa20f601          LSR      r6,r0,r1              ;1337
000096  6860              LDR      r0,[r4,#4]            ;1342
000098  0181              LSLS     r1,r0,#6              ;1342
00009a  7b20              LDRB     r0,[r4,#0xc]          ;1342
00009c  ea416000          ORR      r0,r1,r0,LSL #24      ;1342
0000a0  ea407006          ORR      r0,r0,r6,LSL #28      ;1342
0000a4  49ab              LDR      r1,|L2.852|
0000a6  3184              ADDS     r1,r1,#0x84           ;1342
0000a8  6008              STR      r0,[r1,#0]            ;1342
0000aa  48aa              LDR      r0,|L2.852|
0000ac  308c              ADDS     r0,r0,#0x8c           ;1344
0000ae  6800              LDR      r0,[r0,#0]            ;1344
0000b0  f020001f          BIC      r0,r0,#0x1f           ;1344
0000b4  69e1              LDR      r1,[r4,#0x1c]         ;1344
0000b6  1e49              SUBS     r1,r1,#1              ;1344
0000b8  4308              ORRS     r0,r0,r1              ;1344
0000ba  49a6              LDR      r1,|L2.852|
0000bc  318c              ADDS     r1,r1,#0x8c           ;1344
0000be  6008              STR      r0,[r1,#0]            ;1344
                  |L2.192|
0000c0  2001              MOVS     r0,#1                 ;1348
0000c2  49a3              LDR      r1,|L2.848|
0000c4  6688              STR      r0,[r1,#0x68]         ;1348
0000c6  f7fffffe          BL       HAL_GetTick
0000ca  4605              MOV      r5,r0                 ;1350
0000cc  e006              B        |L2.220|
                  |L2.206|
0000ce  f7fffffe          BL       HAL_GetTick
0000d2  1b40              SUBS     r0,r0,r5              ;1354
0000d4  2864              CMP      r0,#0x64              ;1354
0000d6  d901              BLS      |L2.220|
0000d8  2003              MOVS     r0,#3                 ;1357
0000da  e7ab              B        |L2.52|
                  |L2.220|
0000dc  489d              LDR      r0,|L2.852|
0000de  6800              LDR      r0,[r0,#0]            ;1352
0000e0  f3c060c0          UBFX     r0,r0,#27,#1          ;1352
0000e4  2800              CMP      r0,#0                 ;1352
0000e6  d0f2              BEQ      |L2.206|
                  |L2.232|
0000e8  7820              LDRB     r0,[r4,#0]            ;1367
0000ea  f0000004          AND      r0,r0,#4              ;1367
0000ee  2804              CMP      r0,#4                 ;1367
0000f0  d004              BEQ      |L2.252|
0000f2  7820              LDRB     r0,[r4,#0]            ;1368
0000f4  f0000008          AND      r0,r0,#8              ;1368
0000f8  2808              CMP      r0,#8                 ;1368
0000fa  d17d              BNE      |L2.504|
                  |L2.252|
0000fc  2000              MOVS     r0,#0                 ;1374
0000fe  4994              LDR      r1,|L2.848|
000100  6708              STR      r0,[r1,#0x70]         ;1374
000102  f7fffffe          BL       HAL_GetTick
000106  4605              MOV      r5,r0                 ;1376
000108  e006              B        |L2.280|
                  |L2.266|
00010a  f7fffffe          BL       HAL_GetTick
00010e  1b40              SUBS     r0,r0,r5              ;1380
000110  2864              CMP      r0,#0x64              ;1380
000112  d901              BLS      |L2.280|
000114  2003              MOVS     r0,#3                 ;1383
000116  e78d              B        |L2.52|
                  |L2.280|
000118  488e              LDR      r0,|L2.852|
00011a  6800              LDR      r0,[r0,#0]            ;1378
00011c  f3c07040          UBFX     r0,r0,#29,#1          ;1378
000120  2800              CMP      r0,#0                 ;1378
000122  d1f2              BNE      |L2.266|
000124  7820              LDRB     r0,[r4,#0]            ;1390
000126  f0000004          AND      r0,r0,#4              ;1390
00012a  2804              CMP      r0,#4                 ;1390
00012c  d134              BNE      |L2.408|
00012e  4889              LDR      r0,|L2.852|
000130  3088              ADDS     r0,r0,#0x88           ;1396
000132  6800              LDR      r0,[r0,#0]            ;1396
000134  f00040e0          AND      r0,r0,#0x70000000     ;1396
000138  f04f41e0          MOV      r1,#0x70000000        ;1396
00013c  fa91f1a1          RBIT     r1,r1                 ;1396
000140  fab1f181          CLZ      r1,r1                 ;1396
000144  fa20f601          LSR      r6,r0,r1              ;1396
000148  f64771c0          MOV      r1,#0x7fc0            ;1400
00014c  fa91f1a1          RBIT     r1,r1                 ;1400
000150  fab1f181          CLZ      r1,r1                 ;1400
000154  6920              LDR      r0,[r4,#0x10]         ;1400
000156  4088              LSLS     r0,r0,r1              ;1400
000158  f04f6270          MOV      r2,#0xf000000         ;1400
00015c  fa92f2a2          RBIT     r2,r2                 ;1400
000160  fab2f282          CLZ      r2,r2                 ;1400
000164  6961              LDR      r1,[r4,#0x14]         ;1400
000166  4091              LSLS     r1,r1,r2              ;1400
000168  4308              ORRS     r0,r0,r1              ;1400
00016a  f04f41e0          MOV      r1,#0x70000000        ;1400
00016e  fa91f1a1          RBIT     r1,r1                 ;1400
000172  fab1f181          CLZ      r1,r1                 ;1400
000176  fa06f101          LSL      r1,r6,r1              ;1400
00017a  4308              ORRS     r0,r0,r1              ;1400
00017c  4975              LDR      r1,|L2.852|
00017e  3188              ADDS     r1,r1,#0x88           ;1400
000180  6008              STR      r0,[r1,#0]            ;1400
000182  1d08              ADDS     r0,r1,#4              ;1402
000184  6800              LDR      r0,[r0,#0]            ;1402
000186  f42051f8          BIC      r1,r0,#0x1f00         ;1402
00018a  6a20              LDR      r0,[r4,#0x20]         ;1402
00018c  1e40              SUBS     r0,r0,#1              ;1402
00018e  ea412000          ORR      r0,r1,r0,LSL #8       ;1402
000192  4970              LDR      r1,|L2.852|
000194  318c              ADDS     r1,r1,#0x8c           ;1402
000196  6008              STR      r0,[r1,#0]            ;1402
                  |L2.408|
000198  7820              LDRB     r0,[r4,#0]            ;1406
00019a  f0000008          AND      r0,r0,#8              ;1406
00019e  2808              CMP      r0,#8                 ;1406
0001a0  d134              BNE      |L2.524|
0001a2  486c              LDR      r0,|L2.852|
0001a4  3088              ADDS     r0,r0,#0x88           ;1412
0001a6  6800              LDR      r0,[r0,#0]            ;1412
0001a8  f0006070          AND      r0,r0,#0xf000000      ;1412
0001ac  f04f6170          MOV      r1,#0xf000000         ;1412
0001b0  fa91f1a1          RBIT     r1,r1                 ;1412
0001b4  fab1f181          CLZ      r1,r1                 ;1412
0001b8  fa20f601          LSR      r6,r0,r1              ;1412
0001bc  f64771c0          MOV      r1,#0x7fc0            ;1416
0001c0  fa91f1a1          RBIT     r1,r1                 ;1416
0001c4  fab1f181          CLZ      r1,r1                 ;1416
0001c8  6920              LDR      r0,[r4,#0x10]         ;1416
0001ca  4088              LSLS     r0,r0,r1              ;1416
0001cc  f04f6170          MOV      r1,#0xf000000         ;1416
0001d0  fa91f1a1          RBIT     r1,r1                 ;1416
0001d4  fab1f181          CLZ      r1,r1                 ;1416
0001d8  fa06f101          LSL      r1,r6,r1              ;1416
0001dc  4308              ORRS     r0,r0,r1              ;1416
0001de  f04f42e0          MOV      r2,#0x70000000        ;1416
0001e2  fa92f2a2          RBIT     r2,r2                 ;1416
0001e6  fab2f282          CLZ      r2,r2                 ;1416
0001ea  69a1              LDR      r1,[r4,#0x18]         ;1416
0001ec  4091              LSLS     r1,r1,r2              ;1416
0001ee  4308              ORRS     r0,r0,r1              ;1416
0001f0  4958              LDR      r1,|L2.852|
0001f2  3188              ADDS     r1,r1,#0x88           ;1416
0001f4  6008              STR      r0,[r1,#0]            ;1416
0001f6  e000              B        |L2.506|
                  |L2.504|
0001f8  e01c              B        |L2.564|
                  |L2.506|
0001fa  1d08              ADDS     r0,r1,#4              ;1418
0001fc  6800              LDR      r0,[r0,#0]            ;1418
0001fe  f4203040          BIC      r0,r0,#0x30000        ;1418
000202  6a61              LDR      r1,[r4,#0x24]         ;1418
000204  4308              ORRS     r0,r0,r1              ;1418
000206  4953              LDR      r1,|L2.852|
000208  318c              ADDS     r1,r1,#0x8c           ;1418
00020a  6008              STR      r0,[r1,#0]            ;1418
                  |L2.524|
00020c  2001              MOVS     r0,#1                 ;1421
00020e  4950              LDR      r1,|L2.848|
000210  6708              STR      r0,[r1,#0x70]         ;1421
000212  f7fffffe          BL       HAL_GetTick
000216  4605              MOV      r5,r0                 ;1423
000218  e006              B        |L2.552|
                  |L2.538|
00021a  f7fffffe          BL       HAL_GetTick
00021e  1b40              SUBS     r0,r0,r5              ;1427
000220  2864              CMP      r0,#0x64              ;1427
000222  d901              BLS      |L2.552|
000224  2003              MOVS     r0,#3                 ;1430
000226  e705              B        |L2.52|
                  |L2.552|
000228  484a              LDR      r0,|L2.852|
00022a  6800              LDR      r0,[r0,#0]            ;1425
00022c  f3c07040          UBFX     r0,r0,#29,#1          ;1425
000230  2800              CMP      r0,#0                 ;1425
000232  d0f2              BEQ      |L2.538|
                  |L2.564|
000234  7820              LDRB     r0,[r4,#0]            ;1437
000236  f0000020          AND      r0,r0,#0x20           ;1437
00023a  2820              CMP      r0,#0x20              ;1437
00023c  d17d              BNE      |L2.826|
00023e  bf00              NOP                            ;1440
000240  2000              MOVS     r0,#0                 ;1440
000242  9000              STR      r0,[sp,#0]            ;1440
000244  4843              LDR      r0,|L2.852|
000246  3040              ADDS     r0,r0,#0x40           ;1440
000248  6800              LDR      r0,[r0,#0]            ;1440
00024a  f0405080          ORR      r0,r0,#0x10000000     ;1440
00024e  4941              LDR      r1,|L2.852|
000250  3140              ADDS     r1,r1,#0x40           ;1440
000252  6008              STR      r0,[r1,#0]            ;1440
000254  4608              MOV      r0,r1                 ;1440
000256  6800              LDR      r0,[r0,#0]            ;1440
000258  f0005080          AND      r0,r0,#0x10000000     ;1440
00025c  9000              STR      r0,[sp,#0]            ;1440
00025e  bf00              NOP                            ;1440
000260  bf00              NOP                            ;1440
000262  483d              LDR      r0,|L2.856|
000264  6800              LDR      r0,[r0,#0]            ;1443
000266  f4407080          ORR      r0,r0,#0x100          ;1443
00026a  493b              LDR      r1,|L2.856|
00026c  6008              STR      r0,[r1,#0]            ;1443
00026e  f7fffffe          BL       HAL_GetTick
000272  4605              MOV      r5,r0                 ;1446
000274  e006              B        |L2.644|
                  |L2.630|
000276  f7fffffe          BL       HAL_GetTick
00027a  1b40              SUBS     r0,r0,r5              ;1450
00027c  2864              CMP      r0,#0x64              ;1450
00027e  d901              BLS      |L2.644|
000280  2003              MOVS     r0,#3                 ;1452
000282  e6d7              B        |L2.52|
                  |L2.644|
000284  4834              LDR      r0,|L2.856|
000286  6800              LDR      r0,[r0,#0]            ;1448
000288  f4007080          AND      r0,r0,#0x100          ;1448
00028c  2800              CMP      r0,#0                 ;1448
00028e  d0f2              BEQ      |L2.630|
000290  4830              LDR      r0,|L2.852|
000292  3070              ADDS     r0,r0,#0x70           ;1457
000294  6800              LDR      r0,[r0,#0]            ;1457
000296  f4007040          AND      r0,r0,#0x300          ;1457
00029a  8d21              LDRH     r1,[r4,#0x28]         ;1457
00029c  f4017140          AND      r1,r1,#0x300          ;1457
0002a0  4288              CMP      r0,r1                 ;1457
0002a2  d04a              BEQ      |L2.826|
0002a4  482b              LDR      r0,|L2.852|
0002a6  3070              ADDS     r0,r0,#0x70           ;1461
0002a8  6800              LDR      r0,[r0,#0]            ;1461
0002aa  f4207640          BIC      r6,r0,#0x300          ;1461
0002ae  2001              MOVS     r0,#1                 ;1463
0002b0  492a              LDR      r1,|L2.860|
0002b2  6008              STR      r0,[r1,#0]            ;1463
0002b4  2000              MOVS     r0,#0                 ;1464
0002b6  6008              STR      r0,[r1,#0]            ;1464
0002b8  4826              LDR      r0,|L2.852|
0002ba  3070              ADDS     r0,r0,#0x70           ;1466
0002bc  6006              STR      r6,[r0,#0]            ;1466
0002be  f0060002          AND      r0,r6,#2              ;1469
0002c2  b198              CBZ      r0,|L2.748|
0002c4  f7fffffe          BL       HAL_GetTick
0002c8  4605              MOV      r5,r0                 ;1472
0002ca  e008              B        |L2.734|
                  |L2.716|
0002cc  f7fffffe          BL       HAL_GetTick
0002d0  1b40              SUBS     r0,r0,r5              ;1477
0002d2  f2413188          MOV      r1,#0x1388            ;1477
0002d6  4288              CMP      r0,r1                 ;1477
0002d8  d901              BLS      |L2.734|
0002da  2003              MOVS     r0,#3                 ;1479
0002dc  e6aa              B        |L2.52|
                  |L2.734|
0002de  481d              LDR      r0,|L2.852|
0002e0  3070              ADDS     r0,r0,#0x70           ;1475
0002e2  6800              LDR      r0,[r0,#0]            ;1475
0002e4  f3c00040          UBFX     r0,r0,#1,#1           ;1475
0002e8  2800              CMP      r0,#0                 ;1475
0002ea  d0ef              BEQ      |L2.716|
                  |L2.748|
0002ec  bf00              NOP                            ;1483
0002ee  8d20              LDRH     r0,[r4,#0x28]         ;1483
0002f0  f4007040          AND      r0,r0,#0x300          ;1483
0002f4  f5b07f40          CMP      r0,#0x300             ;1483
0002f8  d10c              BNE      |L2.788|
0002fa  4816              LDR      r0,|L2.852|
0002fc  3008              ADDS     r0,r0,#8              ;1483
0002fe  6800              LDR      r0,[r0,#0]            ;1483
000300  f42010f8          BIC      r0,r0,#0x1f0000       ;1483
000304  4a16              LDR      r2,|L2.864|
000306  6aa1              LDR      r1,[r4,#0x28]         ;1483
000308  4011              ANDS     r1,r1,r2              ;1483
00030a  4308              ORRS     r0,r0,r1              ;1483
00030c  4911              LDR      r1,|L2.852|
00030e  3108              ADDS     r1,r1,#8              ;1483
000310  6008              STR      r0,[r1,#0]            ;1483
000312  e007              B        |L2.804|
                  |L2.788|
000314  480f              LDR      r0,|L2.852|
000316  3008              ADDS     r0,r0,#8              ;1483
000318  6800              LDR      r0,[r0,#0]            ;1483
00031a  f42010f8          BIC      r0,r0,#0x1f0000       ;1483
00031e  490d              LDR      r1,|L2.852|
000320  3108              ADDS     r1,r1,#8              ;1483
000322  6008              STR      r0,[r1,#0]            ;1483
                  |L2.804|
000324  480b              LDR      r0,|L2.852|
000326  3070              ADDS     r0,r0,#0x70           ;1483
000328  6800              LDR      r0,[r0,#0]            ;1483
00032a  8d21              LDRH     r1,[r4,#0x28]         ;1483
00032c  f3c1010b          UBFX     r1,r1,#0,#12          ;1483
000330  4308              ORRS     r0,r0,r1              ;1483
000332  4908              LDR      r1,|L2.852|
000334  3170              ADDS     r1,r1,#0x70           ;1483
000336  6008              STR      r0,[r1,#0]            ;1483
000338  bf00              NOP                            ;1483
                  |L2.826|
00033a  7820              LDRB     r0,[r4,#0]            ;1489
00033c  f0000010          AND      r0,r0,#0x10           ;1489
000340  2810              CMP      r0,#0x10              ;1489
000342  d103              BNE      |L2.844|
000344  f894002c          LDRB     r0,[r4,#0x2c]         ;1491
000348  4906              LDR      r1,|L2.868|
00034a  6008              STR      r0,[r1,#0]            ;1491
                  |L2.844|
00034c  2000              MOVS     r0,#0                 ;1493
00034e  e671              B        |L2.52|
;;;1495   
                          ENDP

                  |L2.848|
                          DCD      0x42470000
                  |L2.852|
                          DCD      0x40023800
                  |L2.856|
                          DCD      0x40007000
                  |L2.860|
                          DCD      0x42470e40
                  |L2.864|
                          DCD      0x0ffffcff
                  |L2.868|
                          DCD      0x424711e0

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;107      */
;;;108    void HAL_RCC_DeInit(void)
000000  4817              LDR      r0,|L3.96|
;;;109    {
;;;110      /* Set HSION bit */
;;;111      SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
000002  6800              LDR      r0,[r0,#0]
000004  f0400081          ORR      r0,r0,#0x81
000008  4915              LDR      r1,|L3.96|
00000a  6008              STR      r0,[r1,#0]
;;;112      
;;;113      /* Reset CFGR register */
;;;114      CLEAR_REG(RCC->CFGR);
00000c  2000              MOVS     r0,#0
00000e  4914              LDR      r1,|L3.96|
000010  3108              ADDS     r1,r1,#8
000012  6008              STR      r0,[r1,#0]
;;;115      
;;;116      /* Reset HSEON, CSSON, PLLON, PLLI2S */
;;;117      CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON| RCC_CR_PLLI2SON); 
000014  4812              LDR      r0,|L3.96|
000016  6800              LDR      r0,[r0,#0]
000018  4912              LDR      r1,|L3.100|
00001a  4008              ANDS     r0,r0,r1
00001c  4910              LDR      r1,|L3.96|
00001e  6008              STR      r0,[r1,#0]
;;;118      
;;;119      /* Reset PLLCFGR register */
;;;120      CLEAR_REG(RCC->PLLCFGR);
000020  2000              MOVS     r0,#0
000022  1d09              ADDS     r1,r1,#4
000024  6008              STR      r0,[r1,#0]
;;;121      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2); 
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]
00002a  490f              LDR      r1,|L3.104|
00002c  4308              ORRS     r0,r0,r1
00002e  490c              LDR      r1,|L3.96|
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;122      
;;;123      /* Reset PLLI2SCFGR register */
;;;124      CLEAR_REG(RCC->PLLI2SCFGR);
000034  2000              MOVS     r0,#0
000036  490a              LDR      r1,|L3.96|
000038  3184              ADDS     r1,r1,#0x84
00003a  6008              STR      r0,[r1,#0]
;;;125      SET_BIT(RCC->PLLI2SCFGR,  RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1);
00003c  4608              MOV      r0,r1
00003e  6800              LDR      r0,[r0,#0]
000040  490a              LDR      r1,|L3.108|
000042  4308              ORRS     r0,r0,r1
000044  4906              LDR      r1,|L3.96|
000046  3184              ADDS     r1,r1,#0x84
000048  6008              STR      r0,[r1,#0]
;;;126      
;;;127      /* Reset HSEBYP bit */
;;;128      CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
00004a  4805              LDR      r0,|L3.96|
00004c  6800              LDR      r0,[r0,#0]
00004e  f4202080          BIC      r0,r0,#0x40000
000052  4903              LDR      r1,|L3.96|
000054  6008              STR      r0,[r1,#0]
;;;129      
;;;130      /* Disable all interrupts */
;;;131      CLEAR_REG(RCC->CIR); 
000056  2000              MOVS     r0,#0
000058  4901              LDR      r1,|L3.96|
00005a  310c              ADDS     r1,r1,#0xc
00005c  6008              STR      r0,[r1,#0]
;;;132    }
00005e  4770              BX       lr
;;;133    #endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx || STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx ||
                          ENDP

                  |L3.96|
                          DCD      0x40023800
                  |L3.100|
                          DCD      0xfaf6ffff
                  |L3.104|
                          DCD      0x04003010
                  |L3.108|
                          DCD      0x20003000

;*** Start embedded assembler ***

#line 1 "HALLIB\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_rcc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_b7071a4b____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_rcc_ex_c_b7071a4b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_b7071a4b____REVSH|
#line 402
|__asm___22_stm32f4xx_hal_rcc_ex_c_b7071a4b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_b7071a4b____RRX|
#line 587
|__asm___22_stm32f4xx_hal_rcc_ex_c_b7071a4b____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
