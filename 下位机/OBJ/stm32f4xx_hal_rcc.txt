; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_hal_rcc.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm32f4xx_hal_rcc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm32f4xx_hal_rcc.crf HALLIB\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rcc.c]
                          THUMB

                          AREA ||i.HAL_RCC_CSSCallback||, CODE, READONLY, ALIGN=1

                  HAL_RCC_CSSCallback PROC
;;;1188     */
;;;1189   __weak void HAL_RCC_CSSCallback(void)
000000  b508              PUSH     {r3,lr}
;;;1190   {
;;;1191     /* Prevent unused argument(s) compilation warning */
;;;1192     __IO uint32_t tmpreg = 0x00;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;1193     UNUSED(tmpreg);
000006  bf00              NOP      
;;;1194     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1195               the HAL_RCC_CSSCallback could be implemented in the user file
;;;1196      */ 
;;;1197   }
000008  bd08              POP      {r3,pc}
;;;1198   
                          ENDP


                          AREA ||i.HAL_RCC_ClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_ClockConfig PROC
;;;585      */
;;;586    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
000000  b570              PUSH     {r4-r6,lr}
;;;587    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;588      uint32_t tickstart = 0;   
000006  2500              MOVS     r5,#0
;;;589     
;;;590      /* Check the parameters */
;;;591      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;592      assert_param(IS_FLASH_LATENCY(FLatency));
;;;593     
;;;594      /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
;;;595        must be correctly programmed according to the frequency of the CPU clock 
;;;596        (HCLK) and the supply voltage of the device. */
;;;597      
;;;598      /* Increasing the CPU frequency */
;;;599      if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
000008  48a7              LDR      r0,|L2.680|
00000a  6800              LDR      r0,[r0,#0]
00000c  f000000f          AND      r0,r0,#0xf
000010  42b0              CMP      r0,r6
000012  d26f              BCS      |L2.244|
;;;600      {    
;;;601        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;602        __HAL_FLASH_SET_LATENCY(FLatency);
000014  49a4              LDR      r1,|L2.680|
000016  700e              STRB     r6,[r1,#0]
;;;603        
;;;604        /* Check that the new number of wait states is taken into account to access the Flash
;;;605        memory by reading the FLASH_ACR register */
;;;606        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  f000000f          AND      r0,r0,#0xf
000020  42b0              CMP      r0,r6
000022  d001              BEQ      |L2.40|
;;;607        {
;;;608          return HAL_ERROR;
000024  2001              MOVS     r0,#1
                  |L2.38|
;;;609        }
;;;610    
;;;611        /*-------------------------- HCLK Configuration --------------------------*/
;;;612        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;613        {
;;;614          assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;615          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;616        }
;;;617    
;;;618        /*------------------------- SYSCLK Configuration ---------------------------*/ 
;;;619        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;620        {    
;;;621          assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;622          
;;;623          /* HSE is selected as System Clock Source */
;;;624          if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;625          {
;;;626            /* Check the HSE ready flag */  
;;;627            if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;628            {
;;;629              return HAL_ERROR;
;;;630            }
;;;631          }
;;;632          /* PLL is selected as System Clock Source */
;;;633          else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
;;;634                  (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
;;;635          {
;;;636            /* Check the PLL ready flag */  
;;;637            if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;638            {
;;;639              return HAL_ERROR;
;;;640            }
;;;641          }
;;;642          /* HSI is selected as System Clock Source */
;;;643          else
;;;644          {
;;;645            /* Check the HSI ready flag */  
;;;646            if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;647            {
;;;648              return HAL_ERROR;
;;;649            }
;;;650          }
;;;651    
;;;652          __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;653          /* Get Start Tick*/
;;;654          tickstart = HAL_GetTick();
;;;655          
;;;656          if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;657          {
;;;658            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
;;;659            {
;;;660              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;661              {
;;;662                return HAL_TIMEOUT;
;;;663              }
;;;664            }
;;;665          }
;;;666          else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;667          {
;;;668            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;669            {
;;;670              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;671              {
;;;672                return HAL_TIMEOUT;
;;;673              }
;;;674            }
;;;675          }
;;;676          else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
;;;677          {
;;;678            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
;;;679            {
;;;680              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;681              {
;;;682                return HAL_TIMEOUT;
;;;683              }
;;;684            }
;;;685          }
;;;686          else
;;;687          {
;;;688            while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
;;;689            {
;;;690              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;691              {
;;;692                return HAL_TIMEOUT;
;;;693              }
;;;694            }
;;;695          }
;;;696        }    
;;;697      }
;;;698      /* Decreasing the CPU frequency */
;;;699      else
;;;700      {
;;;701        /*-------------------------- HCLK Configuration --------------------------*/
;;;702        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;703        {
;;;704          assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;705          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;706        }
;;;707    
;;;708        /*------------------------- SYSCLK Configuration -------------------------*/
;;;709        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;710        {    
;;;711          assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;712          
;;;713          /* HSE is selected as System Clock Source */
;;;714          if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;715          {
;;;716            /* Check the HSE ready flag */  
;;;717            if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;718            {
;;;719              return HAL_ERROR;
;;;720            }
;;;721          }
;;;722          /* PLL is selected as System Clock Source */
;;;723          else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
;;;724                  (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
;;;725          {
;;;726            /* Check the PLL ready flag */  
;;;727            if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;728            {
;;;729              return HAL_ERROR;
;;;730            }
;;;731          }
;;;732          /* HSI is selected as System Clock Source */
;;;733          else
;;;734          {
;;;735            /* Check the HSI ready flag */  
;;;736            if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;737            {
;;;738              return HAL_ERROR;
;;;739            }
;;;740          }
;;;741          __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;742          /* Get Start Tick*/
;;;743          tickstart = HAL_GetTick();
;;;744          
;;;745          if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;746          {
;;;747            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
;;;748            {
;;;749              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;750              {
;;;751                return HAL_TIMEOUT;
;;;752              } 
;;;753            }
;;;754          }
;;;755          else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;756          {
;;;757            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;758            {
;;;759              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;760              {
;;;761                return HAL_TIMEOUT;
;;;762              } 
;;;763            }
;;;764          }
;;;765          else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
;;;766          {
;;;767            while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
;;;768            {
;;;769              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;770              {
;;;771                return HAL_TIMEOUT;
;;;772              } 
;;;773            }
;;;774          }
;;;775          else
;;;776          {
;;;777            while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
;;;778            {
;;;779              if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;780              {
;;;781                return HAL_TIMEOUT;
;;;782              }
;;;783            }
;;;784          }
;;;785        }
;;;786        
;;;787        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;788        __HAL_FLASH_SET_LATENCY(FLatency);
;;;789        
;;;790        /* Check that the new number of wait states is taken into account to access the Flash
;;;791        memory by reading the FLASH_ACR register */
;;;792        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
;;;793        {
;;;794          return HAL_ERROR;
;;;795        }
;;;796     }
;;;797    
;;;798      /*-------------------------- PCLK1 Configuration ---------------------------*/ 
;;;799      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;800      {
;;;801        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;802        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
;;;803      }
;;;804      
;;;805      /*-------------------------- PCLK2 Configuration ---------------------------*/ 
;;;806      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;807      {
;;;808        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
;;;809        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
;;;810      }
;;;811    
;;;812      /* Configure the source of time base considering new system clocks settings*/
;;;813      HAL_InitTick (TICK_INT_PRIORITY);
;;;814      
;;;815      return HAL_OK;
;;;816    }
000026  bd70              POP      {r4-r6,pc}
                  |L2.40|
000028  7820              LDRB     r0,[r4,#0]            ;612
00002a  f0000002          AND      r0,r0,#2              ;612
00002e  2802              CMP      r0,#2                 ;612
000030  d107              BNE      |L2.66|
000032  489e              LDR      r0,|L2.684|
000034  6800              LDR      r0,[r0,#0]            ;615
000036  f02000f0          BIC      r0,r0,#0xf0           ;615
00003a  68a1              LDR      r1,[r4,#8]            ;615
00003c  4308              ORRS     r0,r0,r1              ;615
00003e  499b              LDR      r1,|L2.684|
000040  6008              STR      r0,[r1,#0]            ;615
                  |L2.66|
000042  7820              LDRB     r0,[r4,#0]            ;619
000044  f0000001          AND      r0,r0,#1              ;619
000048  2800              CMP      r0,#0                 ;619
00004a  d03e              BEQ      |L2.202|
00004c  6860              LDR      r0,[r4,#4]            ;624
00004e  2801              CMP      r0,#1                 ;624
000050  d107              BNE      |L2.98|
000052  4896              LDR      r0,|L2.684|
000054  3808              SUBS     r0,r0,#8              ;627
000056  6800              LDR      r0,[r0,#0]            ;627
000058  f3c04040          UBFX     r0,r0,#17,#1          ;627
00005c  b9b8              CBNZ     r0,|L2.142|
00005e  2001              MOVS     r0,#1                 ;629
000060  e7e1              B        |L2.38|
                  |L2.98|
000062  6860              LDR      r0,[r4,#4]            ;633
000064  2802              CMP      r0,#2                 ;633
000066  d002              BEQ      |L2.110|
000068  6860              LDR      r0,[r4,#4]            ;634
00006a  2803              CMP      r0,#3                 ;634
00006c  d107              BNE      |L2.126|
                  |L2.110|
00006e  488f              LDR      r0,|L2.684|
000070  3808              SUBS     r0,r0,#8              ;637
000072  6800              LDR      r0,[r0,#0]            ;637
000074  f3c06040          UBFX     r0,r0,#25,#1          ;637
000078  b948              CBNZ     r0,|L2.142|
00007a  2001              MOVS     r0,#1                 ;639
00007c  e7d3              B        |L2.38|
                  |L2.126|
00007e  488b              LDR      r0,|L2.684|
000080  3808              SUBS     r0,r0,#8              ;646
000082  6800              LDR      r0,[r0,#0]            ;646
000084  f3c00040          UBFX     r0,r0,#1,#1           ;646
000088  b908              CBNZ     r0,|L2.142|
00008a  2001              MOVS     r0,#1                 ;648
00008c  e7cb              B        |L2.38|
                  |L2.142|
00008e  4887              LDR      r0,|L2.684|
000090  6800              LDR      r0,[r0,#0]            ;652
000092  f0200003          BIC      r0,r0,#3              ;652
000096  6861              LDR      r1,[r4,#4]            ;652
000098  4308              ORRS     r0,r0,r1              ;652
00009a  4984              LDR      r1,|L2.684|
00009c  6008              STR      r0,[r1,#0]            ;652
00009e  f7fffffe          BL       HAL_GetTick
0000a2  4605              MOV      r5,r0                 ;654
0000a4  6860              LDR      r0,[r4,#4]            ;656
0000a6  2801              CMP      r0,#1                 ;656
0000a8  d110              BNE      |L2.204|
0000aa  e008              B        |L2.190|
                  |L2.172|
0000ac  f7fffffe          BL       HAL_GetTick
0000b0  1b40              SUBS     r0,r0,r5              ;660
0000b2  f2413188          MOV      r1,#0x1388            ;660
0000b6  4288              CMP      r0,r1                 ;660
0000b8  d901              BLS      |L2.190|
0000ba  2003              MOVS     r0,#3                 ;662
0000bc  e7b3              B        |L2.38|
                  |L2.190|
0000be  487b              LDR      r0,|L2.684|
0000c0  6800              LDR      r0,[r0,#0]            ;658
0000c2  f000000c          AND      r0,r0,#0xc            ;658
0000c6  2804              CMP      r0,#4                 ;658
0000c8  d1f0              BNE      |L2.172|
                  |L2.202|
0000ca  e0cd              B        |L2.616|
                  |L2.204|
0000cc  6860              LDR      r0,[r4,#4]            ;666
0000ce  2802              CMP      r0,#2                 ;666
0000d0  d111              BNE      |L2.246|
0000d2  e008              B        |L2.230|
                  |L2.212|
0000d4  f7fffffe          BL       HAL_GetTick
0000d8  1b40              SUBS     r0,r0,r5              ;670
0000da  f2413188          MOV      r1,#0x1388            ;670
0000de  4288              CMP      r0,r1                 ;670
0000e0  d901              BLS      |L2.230|
0000e2  2003              MOVS     r0,#3                 ;672
0000e4  e79f              B        |L2.38|
                  |L2.230|
0000e6  4871              LDR      r0,|L2.684|
0000e8  6800              LDR      r0,[r0,#0]            ;668
0000ea  f000000c          AND      r0,r0,#0xc            ;668
0000ee  2808              CMP      r0,#8                 ;668
0000f0  d1f0              BNE      |L2.212|
0000f2  e0b9              B        |L2.616|
                  |L2.244|
0000f4  e024              B        |L2.320|
                  |L2.246|
0000f6  6860              LDR      r0,[r4,#4]            ;676
0000f8  2803              CMP      r0,#3                 ;676
0000fa  d110              BNE      |L2.286|
0000fc  e008              B        |L2.272|
                  |L2.254|
0000fe  f7fffffe          BL       HAL_GetTick
000102  1b40              SUBS     r0,r0,r5              ;680
000104  f2413188          MOV      r1,#0x1388            ;680
000108  4288              CMP      r0,r1                 ;680
00010a  d901              BLS      |L2.272|
00010c  2003              MOVS     r0,#3                 ;682
00010e  e78a              B        |L2.38|
                  |L2.272|
000110  4866              LDR      r0,|L2.684|
000112  6800              LDR      r0,[r0,#0]            ;678
000114  f000000c          AND      r0,r0,#0xc            ;678
000118  2803              CMP      r0,#3                 ;678
00011a  d1f0              BNE      |L2.254|
00011c  e0a4              B        |L2.616|
                  |L2.286|
00011e  e008              B        |L2.306|
                  |L2.288|
000120  f7fffffe          BL       HAL_GetTick
000124  1b40              SUBS     r0,r0,r5              ;690
000126  f2413188          MOV      r1,#0x1388            ;690
00012a  4288              CMP      r0,r1                 ;690
00012c  d901              BLS      |L2.306|
00012e  2003              MOVS     r0,#3                 ;692
000130  e779              B        |L2.38|
                  |L2.306|
000132  485e              LDR      r0,|L2.684|
000134  6800              LDR      r0,[r0,#0]            ;688
000136  f000000c          AND      r0,r0,#0xc            ;688
00013a  2800              CMP      r0,#0                 ;688
00013c  d1f0              BNE      |L2.288|
00013e  e093              B        |L2.616|
                  |L2.320|
000140  7820              LDRB     r0,[r4,#0]            ;702
000142  f0000002          AND      r0,r0,#2              ;702
000146  2802              CMP      r0,#2                 ;702
000148  d107              BNE      |L2.346|
00014a  4858              LDR      r0,|L2.684|
00014c  6800              LDR      r0,[r0,#0]            ;705
00014e  f02000f0          BIC      r0,r0,#0xf0           ;705
000152  68a1              LDR      r1,[r4,#8]            ;705
000154  4308              ORRS     r0,r0,r1              ;705
000156  4955              LDR      r1,|L2.684|
000158  6008              STR      r0,[r1,#0]            ;705
                  |L2.346|
00015a  7820              LDRB     r0,[r4,#0]            ;709
00015c  f0000001          AND      r0,r0,#1              ;709
000160  2800              CMP      r0,#0                 ;709
000162  d077              BEQ      |L2.596|
000164  6860              LDR      r0,[r4,#4]            ;714
000166  2801              CMP      r0,#1                 ;714
000168  d107              BNE      |L2.378|
00016a  4850              LDR      r0,|L2.684|
00016c  3808              SUBS     r0,r0,#8              ;717
00016e  6800              LDR      r0,[r0,#0]            ;717
000170  f3c04040          UBFX     r0,r0,#17,#1          ;717
000174  b9b8              CBNZ     r0,|L2.422|
000176  2001              MOVS     r0,#1                 ;719
000178  e755              B        |L2.38|
                  |L2.378|
00017a  6860              LDR      r0,[r4,#4]            ;723
00017c  2802              CMP      r0,#2                 ;723
00017e  d002              BEQ      |L2.390|
000180  6860              LDR      r0,[r4,#4]            ;724
000182  2803              CMP      r0,#3                 ;724
000184  d107              BNE      |L2.406|
                  |L2.390|
000186  4849              LDR      r0,|L2.684|
000188  3808              SUBS     r0,r0,#8              ;727
00018a  6800              LDR      r0,[r0,#0]            ;727
00018c  f3c06040          UBFX     r0,r0,#25,#1          ;727
000190  b948              CBNZ     r0,|L2.422|
000192  2001              MOVS     r0,#1                 ;729
000194  e747              B        |L2.38|
                  |L2.406|
000196  4845              LDR      r0,|L2.684|
000198  3808              SUBS     r0,r0,#8              ;736
00019a  6800              LDR      r0,[r0,#0]            ;736
00019c  f3c00040          UBFX     r0,r0,#1,#1           ;736
0001a0  b908              CBNZ     r0,|L2.422|
0001a2  2001              MOVS     r0,#1                 ;738
0001a4  e73f              B        |L2.38|
                  |L2.422|
0001a6  4841              LDR      r0,|L2.684|
0001a8  6800              LDR      r0,[r0,#0]            ;741
0001aa  f0200003          BIC      r0,r0,#3              ;741
0001ae  6861              LDR      r1,[r4,#4]            ;741
0001b0  4308              ORRS     r0,r0,r1              ;741
0001b2  493e              LDR      r1,|L2.684|
0001b4  6008              STR      r0,[r1,#0]            ;741
0001b6  f7fffffe          BL       HAL_GetTick
0001ba  4605              MOV      r5,r0                 ;743
0001bc  6860              LDR      r0,[r4,#4]            ;745
0001be  2801              CMP      r0,#1                 ;745
0001c0  d110              BNE      |L2.484|
0001c2  e008              B        |L2.470|
                  |L2.452|
0001c4  f7fffffe          BL       HAL_GetTick
0001c8  1b40              SUBS     r0,r0,r5              ;749
0001ca  f2413188          MOV      r1,#0x1388            ;749
0001ce  4288              CMP      r0,r1                 ;749
0001d0  d901              BLS      |L2.470|
0001d2  2003              MOVS     r0,#3                 ;751
0001d4  e727              B        |L2.38|
                  |L2.470|
0001d6  4835              LDR      r0,|L2.684|
0001d8  6800              LDR      r0,[r0,#0]            ;747
0001da  f000000c          AND      r0,r0,#0xc            ;747
0001de  2804              CMP      r0,#4                 ;747
0001e0  d1f0              BNE      |L2.452|
0001e2  e037              B        |L2.596|
                  |L2.484|
0001e4  6860              LDR      r0,[r4,#4]            ;755
0001e6  2802              CMP      r0,#2                 ;755
0001e8  d110              BNE      |L2.524|
0001ea  e008              B        |L2.510|
                  |L2.492|
0001ec  f7fffffe          BL       HAL_GetTick
0001f0  1b40              SUBS     r0,r0,r5              ;759
0001f2  f2413188          MOV      r1,#0x1388            ;759
0001f6  4288              CMP      r0,r1                 ;759
0001f8  d901              BLS      |L2.510|
0001fa  2003              MOVS     r0,#3                 ;761
0001fc  e713              B        |L2.38|
                  |L2.510|
0001fe  482b              LDR      r0,|L2.684|
000200  6800              LDR      r0,[r0,#0]            ;757
000202  f000000c          AND      r0,r0,#0xc            ;757
000206  2808              CMP      r0,#8                 ;757
000208  d1f0              BNE      |L2.492|
00020a  e023              B        |L2.596|
                  |L2.524|
00020c  6860              LDR      r0,[r4,#4]            ;765
00020e  2803              CMP      r0,#3                 ;765
000210  d110              BNE      |L2.564|
000212  e008              B        |L2.550|
                  |L2.532|
000214  f7fffffe          BL       HAL_GetTick
000218  1b40              SUBS     r0,r0,r5              ;769
00021a  f2413188          MOV      r1,#0x1388            ;769
00021e  4288              CMP      r0,r1                 ;769
000220  d901              BLS      |L2.550|
000222  2003              MOVS     r0,#3                 ;771
000224  e6ff              B        |L2.38|
                  |L2.550|
000226  4821              LDR      r0,|L2.684|
000228  6800              LDR      r0,[r0,#0]            ;767
00022a  f000000c          AND      r0,r0,#0xc            ;767
00022e  2803              CMP      r0,#3                 ;767
000230  d1f0              BNE      |L2.532|
000232  e00f              B        |L2.596|
                  |L2.564|
000234  e008              B        |L2.584|
                  |L2.566|
000236  f7fffffe          BL       HAL_GetTick
00023a  1b40              SUBS     r0,r0,r5              ;779
00023c  f2413188          MOV      r1,#0x1388            ;779
000240  4288              CMP      r0,r1                 ;779
000242  d901              BLS      |L2.584|
000244  2003              MOVS     r0,#3                 ;781
000246  e6ee              B        |L2.38|
                  |L2.584|
000248  4818              LDR      r0,|L2.684|
00024a  6800              LDR      r0,[r0,#0]            ;777
00024c  f000000c          AND      r0,r0,#0xc            ;777
000250  2800              CMP      r0,#0                 ;777
000252  d1f0              BNE      |L2.566|
                  |L2.596|
000254  4914              LDR      r1,|L2.680|
000256  700e              STRB     r6,[r1,#0]            ;788
000258  4608              MOV      r0,r1                 ;792
00025a  6800              LDR      r0,[r0,#0]            ;792
00025c  f000000f          AND      r0,r0,#0xf            ;792
000260  42b0              CMP      r0,r6                 ;792
000262  d001              BEQ      |L2.616|
000264  2001              MOVS     r0,#1                 ;794
000266  e6de              B        |L2.38|
                  |L2.616|
000268  7820              LDRB     r0,[r4,#0]            ;799
00026a  f0000004          AND      r0,r0,#4              ;799
00026e  2804              CMP      r0,#4                 ;799
000270  d107              BNE      |L2.642|
000272  480e              LDR      r0,|L2.684|
000274  6800              LDR      r0,[r0,#0]            ;802
000276  f42050e0          BIC      r0,r0,#0x1c00         ;802
00027a  68e1              LDR      r1,[r4,#0xc]          ;802
00027c  4308              ORRS     r0,r0,r1              ;802
00027e  490b              LDR      r1,|L2.684|
000280  6008              STR      r0,[r1,#0]            ;802
                  |L2.642|
000282  7820              LDRB     r0,[r4,#0]            ;806
000284  f0000008          AND      r0,r0,#8              ;806
000288  2808              CMP      r0,#8                 ;806
00028a  d108              BNE      |L2.670|
00028c  4807              LDR      r0,|L2.684|
00028e  6800              LDR      r0,[r0,#0]            ;809
000290  f4204060          BIC      r0,r0,#0xe000         ;809
000294  6921              LDR      r1,[r4,#0x10]         ;809
000296  ea4000c1          ORR      r0,r0,r1,LSL #3       ;809
00029a  4904              LDR      r1,|L2.684|
00029c  6008              STR      r0,[r1,#0]            ;809
                  |L2.670|
00029e  200f              MOVS     r0,#0xf               ;813
0002a0  f7fffffe          BL       HAL_InitTick
0002a4  2000              MOVS     r0,#0                 ;815
0002a6  e6be              B        |L2.38|
;;;817    
                          ENDP

                  |L2.680|
                          DCD      0x40023c00
                  |L2.684|
                          DCD      0x40023808

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_RCC_DeInit PROC
;;;222      */
;;;223    __weak void HAL_RCC_DeInit(void)
000000  4770              BX       lr
;;;224    {}
;;;225    
                          ENDP


                          AREA ||i.HAL_RCC_DisableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DisableCSS PROC
;;;938      */
;;;939    void HAL_RCC_DisableCSS(void)
000000  2000              MOVS     r0,#0
;;;940    {
;;;941      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
000002  4901              LDR      r1,|L4.8|
000004  64c8              STR      r0,[r1,#0x4c]
;;;942    }
000006  4770              BX       lr
;;;943    
                          ENDP

                  |L4.8|
                          DCD      0x42470000

                          AREA ||i.HAL_RCC_EnableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_EnableCSS PROC
;;;929      */
;;;930    void HAL_RCC_EnableCSS(void)
000000  2001              MOVS     r0,#1
;;;931    {
;;;932      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L5.8|
000004  64c8              STR      r0,[r1,#0x4c]
;;;933    }
000006  4770              BX       lr
;;;934    
                          ENDP

                  |L5.8|
                          DCD      0x42470000

                          AREA ||i.HAL_RCC_GetClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetClockConfig PROC
;;;1145     */
;;;1146   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
000000  220f              MOVS     r2,#0xf
;;;1147   {
;;;1148     /* Set all possible values for the Clock type parameter --------------------*/
;;;1149     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
000002  6002              STR      r2,[r0,#0]
;;;1150      
;;;1151     /* Get the SYSCLK configuration --------------------------------------------*/ 
;;;1152     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
000004  4a0d              LDR      r2,|L6.60|
000006  6812              LDR      r2,[r2,#0]
000008  f0020203          AND      r2,r2,#3
00000c  6042              STR      r2,[r0,#4]
;;;1153     
;;;1154     /* Get the HCLK configuration ----------------------------------------------*/ 
;;;1155     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
00000e  4a0b              LDR      r2,|L6.60|
000010  6812              LDR      r2,[r2,#0]
000012  f00202f0          AND      r2,r2,#0xf0
000016  6082              STR      r2,[r0,#8]
;;;1156     
;;;1157     /* Get the APB1 configuration ----------------------------------------------*/ 
;;;1158     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
000018  4a08              LDR      r2,|L6.60|
00001a  6812              LDR      r2,[r2,#0]
00001c  f40252e0          AND      r2,r2,#0x1c00
000020  60c2              STR      r2,[r0,#0xc]
;;;1159     
;;;1160     /* Get the APB2 configuration ----------------------------------------------*/ 
;;;1161     RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
000022  4a06              LDR      r2,|L6.60|
000024  6812              LDR      r2,[r2,#0]
000026  f4024260          AND      r2,r2,#0xe000
00002a  08d2              LSRS     r2,r2,#3
00002c  6102              STR      r2,[r0,#0x10]
;;;1162     
;;;1163     /* Get the Flash Wait State (Latency) configuration ------------------------*/   
;;;1164     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
00002e  4a04              LDR      r2,|L6.64|
000030  6812              LDR      r2,[r2,#0]
000032  f002020f          AND      r2,r2,#0xf
000036  600a              STR      r2,[r1,#0]
;;;1165   }
000038  4770              BX       lr
;;;1166   
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
                          DCD      0x40023808
                  |L6.64|
                          DCD      0x40023c00

                          AREA ||i.HAL_RCC_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetHCLKFreq PROC
;;;1029     */
;;;1030   uint32_t HAL_RCC_GetHCLKFreq(void)
000000  b510              PUSH     {r4,lr}
;;;1031   {
;;;1032     SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
000002  f7fffffe          BL       HAL_RCC_GetSysClockFreq
000006  4909              LDR      r1,|L7.44|
000008  6809              LDR      r1,[r1,#0]
00000a  f00101f0          AND      r1,r1,#0xf0
00000e  22f0              MOVS     r2,#0xf0
000010  fa92f2a2          RBIT     r2,r2
000014  fab2f282          CLZ      r2,r2
000018  40d1              LSRS     r1,r1,r2
00001a  4a05              LDR      r2,|L7.48|
00001c  5c51              LDRB     r1,[r2,r1]
00001e  40c8              LSRS     r0,r0,r1
000020  4904              LDR      r1,|L7.52|
000022  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;1033     return SystemCoreClock;
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;1034   }
000028  bd10              POP      {r4,pc}
;;;1035   
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      0x40023808
                  |L7.48|
                          DCD      APBAHBPrescTable
                  |L7.52|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_GetOscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetOscConfig PROC
;;;1066     */
;;;1067   __weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  210f              MOVS     r1,#0xf
;;;1068   {
;;;1069     /* Set all possible values for the Oscillator type parameter ---------------*/
;;;1070     RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
000002  6001              STR      r1,[r0,#0]
;;;1071     
;;;1072     /* Get the HSE configuration -----------------------------------------------*/
;;;1073     if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000004  4946              LDR      r1,|L8.288|
000006  6809              LDR      r1,[r1,#0]
000008  f4012180          AND      r1,r1,#0x40000
00000c  f5b12f80          CMP      r1,#0x40000
000010  d102              BNE      |L8.24|
;;;1074     {
;;;1075       RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
000012  2105              MOVS     r1,#5
000014  6041              STR      r1,[r0,#4]
000016  e00b              B        |L8.48|
                  |L8.24|
;;;1076     }
;;;1077     else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
000018  4941              LDR      r1,|L8.288|
00001a  6809              LDR      r1,[r1,#0]
00001c  f4013180          AND      r1,r1,#0x10000
000020  f5b13f80          CMP      r1,#0x10000
000024  d102              BNE      |L8.44|
;;;1078     {
;;;1079       RCC_OscInitStruct->HSEState = RCC_HSE_ON;
000026  2101              MOVS     r1,#1
000028  6041              STR      r1,[r0,#4]
00002a  e001              B        |L8.48|
                  |L8.44|
;;;1080     }
;;;1081     else
;;;1082     {
;;;1083       RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
00002c  2100              MOVS     r1,#0
00002e  6041              STR      r1,[r0,#4]
                  |L8.48|
;;;1084     }
;;;1085     
;;;1086     /* Get the HSI configuration -----------------------------------------------*/
;;;1087     if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
000030  493b              LDR      r1,|L8.288|
000032  6809              LDR      r1,[r1,#0]
000034  f0010101          AND      r1,r1,#1
000038  b111              CBZ      r1,|L8.64|
;;;1088     {
;;;1089       RCC_OscInitStruct->HSIState = RCC_HSI_ON;
00003a  2101              MOVS     r1,#1
00003c  60c1              STR      r1,[r0,#0xc]
00003e  e001              B        |L8.68|
                  |L8.64|
;;;1090     }
;;;1091     else
;;;1092     {
;;;1093       RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
000040  2100              MOVS     r1,#0
000042  60c1              STR      r1,[r0,#0xc]
                  |L8.68|
;;;1094     }
;;;1095     
;;;1096     RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
000044  4936              LDR      r1,|L8.288|
000046  6809              LDR      r1,[r1,#0]
000048  f00101f8          AND      r1,r1,#0xf8
00004c  22f8              MOVS     r2,#0xf8
00004e  fa92f2a2          RBIT     r2,r2
000052  fab2f282          CLZ      r2,r2
000056  40d1              LSRS     r1,r1,r2
000058  6101              STR      r1,[r0,#0x10]
;;;1097     
;;;1098     /* Get the LSE configuration -----------------------------------------------*/
;;;1099     if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
00005a  4931              LDR      r1,|L8.288|
00005c  3170              ADDS     r1,r1,#0x70
00005e  6809              LDR      r1,[r1,#0]
000060  f0010104          AND      r1,r1,#4
000064  2904              CMP      r1,#4
000066  d102              BNE      |L8.110|
;;;1100     {
;;;1101       RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
000068  2105              MOVS     r1,#5
00006a  6081              STR      r1,[r0,#8]
00006c  e00a              B        |L8.132|
                  |L8.110|
;;;1102     }
;;;1103     else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
00006e  492c              LDR      r1,|L8.288|
000070  3170              ADDS     r1,r1,#0x70
000072  6809              LDR      r1,[r1,#0]
000074  f0010101          AND      r1,r1,#1
000078  b111              CBZ      r1,|L8.128|
;;;1104     {
;;;1105       RCC_OscInitStruct->LSEState = RCC_LSE_ON;
00007a  2101              MOVS     r1,#1
00007c  6081              STR      r1,[r0,#8]
00007e  e001              B        |L8.132|
                  |L8.128|
;;;1106     }
;;;1107     else
;;;1108     {
;;;1109       RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
000080  2100              MOVS     r1,#0
000082  6081              STR      r1,[r0,#8]
                  |L8.132|
;;;1110     }
;;;1111     
;;;1112     /* Get the LSI configuration -----------------------------------------------*/
;;;1113     if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
000084  4926              LDR      r1,|L8.288|
000086  3174              ADDS     r1,r1,#0x74
000088  6809              LDR      r1,[r1,#0]
00008a  f0010101          AND      r1,r1,#1
00008e  b111              CBZ      r1,|L8.150|
;;;1114     {
;;;1115       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
000090  2101              MOVS     r1,#1
000092  6141              STR      r1,[r0,#0x14]
000094  e001              B        |L8.154|
                  |L8.150|
;;;1116     }
;;;1117     else
;;;1118     {
;;;1119       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
000096  2100              MOVS     r1,#0
000098  6141              STR      r1,[r0,#0x14]
                  |L8.154|
;;;1120     }
;;;1121     
;;;1122     /* Get the PLL configuration -----------------------------------------------*/
;;;1123     if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
00009a  4921              LDR      r1,|L8.288|
00009c  6809              LDR      r1,[r1,#0]
00009e  f0017180          AND      r1,r1,#0x1000000
0000a2  f1b17f80          CMP      r1,#0x1000000
0000a6  d102              BNE      |L8.174|
;;;1124     {
;;;1125       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
0000a8  2102              MOVS     r1,#2
0000aa  6181              STR      r1,[r0,#0x18]
0000ac  e001              B        |L8.178|
                  |L8.174|
;;;1126     }
;;;1127     else
;;;1128     {
;;;1129       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
0000ae  2101              MOVS     r1,#1
0000b0  6181              STR      r1,[r0,#0x18]
                  |L8.178|
;;;1130     }
;;;1131     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
0000b2  491b              LDR      r1,|L8.288|
0000b4  1d09              ADDS     r1,r1,#4
0000b6  6809              LDR      r1,[r1,#0]
0000b8  f4010280          AND      r2,r1,#0x400000
0000bc  61c2              STR      r2,[r0,#0x1c]
;;;1132     RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
0000be  4918              LDR      r1,|L8.288|
0000c0  1d09              ADDS     r1,r1,#4
0000c2  6809              LDR      r1,[r1,#0]
0000c4  f001023f          AND      r2,r1,#0x3f
0000c8  6202              STR      r2,[r0,#0x20]
;;;1133     RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
0000ca  4915              LDR      r1,|L8.288|
0000cc  1d09              ADDS     r1,r1,#4
0000ce  6809              LDR      r1,[r1,#0]
0000d0  f64772c0          MOV      r2,#0x7fc0
0000d4  4011              ANDS     r1,r1,r2
0000d6  fa92f2a2          RBIT     r2,r2
0000da  fab2f282          CLZ      r2,r2
0000de  40d1              LSRS     r1,r1,r2
0000e0  6241              STR      r1,[r0,#0x24]
;;;1134     RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1) >> POSITION_VAL(RCC_PLLCFGR_PLLP));
0000e2  490f              LDR      r1,|L8.288|
0000e4  1d09              ADDS     r1,r1,#4
0000e6  6809              LDR      r1,[r1,#0]
0000e8  f4013140          AND      r1,r1,#0x30000
0000ec  f5013180          ADD      r1,r1,#0x10000
0000f0  0049              LSLS     r1,r1,#1
0000f2  f44f3240          MOV      r2,#0x30000
0000f6  fa92f2a2          RBIT     r2,r2
0000fa  fab2f282          CLZ      r2,r2
0000fe  40d1              LSRS     r1,r1,r2
000100  6281              STR      r1,[r0,#0x28]
;;;1135     RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PLLCFGR_PLLQ));
000102  4907              LDR      r1,|L8.288|
000104  1d09              ADDS     r1,r1,#4
000106  6809              LDR      r1,[r1,#0]
000108  f0016170          AND      r1,r1,#0xf000000
00010c  f04f6270          MOV      r2,#0xf000000
000110  fa92f2a2          RBIT     r2,r2
000114  fab2f282          CLZ      r2,r2
000118  40d1              LSRS     r1,r1,r2
00011a  62c1              STR      r1,[r0,#0x2c]
;;;1136   }
00011c  4770              BX       lr
;;;1137   
                          ENDP

00011e  0000              DCW      0x0000
                  |L8.288|
                          DCD      0x40023800

                          AREA ||i.HAL_RCC_GetPCLK1Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK1Freq PROC
;;;1041     */
;;;1042   uint32_t HAL_RCC_GetPCLK1Freq(void)
000000  b510              PUSH     {r4,lr}
;;;1043   {  
;;;1044     /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;1045     return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4907              LDR      r1,|L9.36|
000008  6809              LDR      r1,[r1,#0]
00000a  f40151e0          AND      r1,r1,#0x1c00
00000e  f44f52e0          MOV      r2,#0x1c00
000012  fa92f2a2          RBIT     r2,r2
000016  fab2f282          CLZ      r2,r2
00001a  40d1              LSRS     r1,r1,r2
00001c  4a02              LDR      r2,|L9.40|
00001e  5c51              LDRB     r1,[r2,r1]
000020  40c8              LSRS     r0,r0,r1
;;;1046   }
000022  bd10              POP      {r4,pc}
;;;1047   
                          ENDP

                  |L9.36|
                          DCD      0x40023808
                  |L9.40|
                          DCD      APBAHBPrescTable

                          AREA ||i.HAL_RCC_GetPCLK2Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK2Freq PROC
;;;1053     */
;;;1054   uint32_t HAL_RCC_GetPCLK2Freq(void)
000000  b510              PUSH     {r4,lr}
;;;1055   {
;;;1056     /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
;;;1057     return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4907              LDR      r1,|L10.36|
000008  6809              LDR      r1,[r1,#0]
00000a  f4014160          AND      r1,r1,#0xe000
00000e  f44f4260          MOV      r2,#0xe000
000012  fa92f2a2          RBIT     r2,r2
000016  fab2f282          CLZ      r2,r2
00001a  40d1              LSRS     r1,r1,r2
00001c  4a02              LDR      r2,|L10.40|
00001e  5c51              LDRB     r1,[r2,r1]
000020  40c8              LSRS     r0,r0,r1
;;;1058   } 
000022  bd10              POP      {r4,pc}
;;;1059   
                          ENDP

                  |L10.36|
                          DCD      0x40023808
                  |L10.40|
                          DCD      APBAHBPrescTable

                          AREA ||i.HAL_RCC_GetSysClockFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetSysClockFreq PROC
;;;973      */
;;;974    __weak uint32_t HAL_RCC_GetSysClockFreq(void)
000000  b570              PUSH     {r4-r6,lr}
;;;975    {
;;;976      uint32_t pllm = 0, pllvco = 0, pllp = 0;
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2300              MOVS     r3,#0
;;;977      uint32_t sysclockfreq = 0;
000008  2000              MOVS     r0,#0
;;;978    
;;;979      /* Get SYSCLK source -------------------------------------------------------*/
;;;980      switch (RCC->CFGR & RCC_CFGR_SWS)
00000a  4c27              LDR      r4,|L11.168|
00000c  6824              LDR      r4,[r4,#0]
00000e  f004040c          AND      r4,r4,#0xc
000012  b124              CBZ      r4,|L11.30|
000014  2c04              CMP      r4,#4
000016  d004              BEQ      |L11.34|
000018  2c08              CMP      r4,#8
00001a  d141              BNE      |L11.160|
00001c  e003              B        |L11.38|
                  |L11.30|
;;;981      {
;;;982        case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
;;;983        {
;;;984          sysclockfreq = HSI_VALUE;
00001e  4823              LDR      r0,|L11.172|
;;;985           break;
000020  e040              B        |L11.164|
                  |L11.34|
;;;986        }
;;;987        case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
;;;988        {
;;;989          sysclockfreq = HSE_VALUE;
000022  4823              LDR      r0,|L11.176|
;;;990          break;
000024  e03e              B        |L11.164|
                  |L11.38|
;;;991        }
;;;992        case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
;;;993        {
;;;994          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
;;;995          SYSCLK = PLL_VCO / PLLP */
;;;996          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
000026  4c20              LDR      r4,|L11.168|
000028  1f24              SUBS     r4,r4,#4
00002a  6824              LDR      r4,[r4,#0]
00002c  f004013f          AND      r1,r4,#0x3f
;;;997          if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
000030  4c1d              LDR      r4,|L11.168|
000032  1f24              SUBS     r4,r4,#4
000034  6824              LDR      r4,[r4,#0]
000036  f4040480          AND      r4,r4,#0x400000
00003a  b184              CBZ      r4,|L11.94|
;;;998          {
;;;999            /* HSE used as PLL clock source */
;;;1000           pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
00003c  4c1c              LDR      r4,|L11.176|
00003e  fbb4f5f1          UDIV     r5,r4,r1
000042  4c19              LDR      r4,|L11.168|
000044  1f24              SUBS     r4,r4,#4
000046  6824              LDR      r4,[r4,#0]
000048  f64776c0          MOV      r6,#0x7fc0
00004c  4034              ANDS     r4,r4,r6
00004e  fa96f6a6          RBIT     r6,r6
000052  fab6f686          CLZ      r6,r6
000056  40f4              LSRS     r4,r4,r6
000058  fb05f204          MUL      r2,r5,r4
00005c  e00f              B        |L11.126|
                  |L11.94|
;;;1001         }
;;;1002         else
;;;1003         {
;;;1004           /* HSI used as PLL clock source */
;;;1005           pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
00005e  4c13              LDR      r4,|L11.172|
000060  fbb4f5f1          UDIV     r5,r4,r1
000064  4c10              LDR      r4,|L11.168|
000066  1f24              SUBS     r4,r4,#4
000068  6824              LDR      r4,[r4,#0]
00006a  f64776c0          MOV      r6,#0x7fc0
00006e  4034              ANDS     r4,r4,r6
000070  fa96f6a6          RBIT     r6,r6
000074  fab6f686          CLZ      r6,r6
000078  40f4              LSRS     r4,r4,r6
00007a  fb05f204          MUL      r2,r5,r4
                  |L11.126|
;;;1006         }
;;;1007         pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
00007e  4c0a              LDR      r4,|L11.168|
000080  1f24              SUBS     r4,r4,#4
000082  6824              LDR      r4,[r4,#0]
000084  f4043440          AND      r4,r4,#0x30000
000088  f44f3540          MOV      r5,#0x30000
00008c  fa95f5a5          RBIT     r5,r5
000090  fab5f585          CLZ      r5,r5
000094  40ec              LSRS     r4,r4,r5
000096  1c64              ADDS     r4,r4,#1
000098  0063              LSLS     r3,r4,#1
;;;1008         
;;;1009         sysclockfreq = pllvco/pllp;
00009a  fbb2f0f3          UDIV     r0,r2,r3
;;;1010         break;
00009e  e001              B        |L11.164|
                  |L11.160|
;;;1011       }
;;;1012       default:
;;;1013       {
;;;1014         sysclockfreq = HSI_VALUE;
0000a0  4802              LDR      r0,|L11.172|
;;;1015         break;
0000a2  bf00              NOP      
                  |L11.164|
0000a4  bf00              NOP                            ;985
;;;1016       }
;;;1017     }
;;;1018     return sysclockfreq;
;;;1019   }
0000a6  bd70              POP      {r4-r6,pc}
;;;1020   
                          ENDP

                  |L11.168|
                          DCD      0x40023808
                  |L11.172|
                          DCD      0x0112a880
                  |L11.176|
                          DCD      0x00b71b00

                          AREA ||i.HAL_RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_MCOConfig PROC
;;;865      */
;;;866    void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
000000  b570              PUSH     {r4-r6,lr}
;;;867    {
000002  b086              SUB      sp,sp,#0x18
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;868      GPIO_InitTypeDef GPIO_InitStruct;
;;;869      /* Check the parameters */
;;;870      assert_param(IS_RCC_MCO(RCC_MCOx));
;;;871      assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;872      /* RCC_MCO1 */
;;;873      if(RCC_MCOx == RCC_MCO1)
00000a  bb46              CBNZ     r6,|L12.94|
;;;874      {
;;;875        assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;876        
;;;877        /* MCO1 Clock Enable */
;;;878        __MCO1_CLK_ENABLE();
00000c  bf00              NOP      
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
000012  4828              LDR      r0,|L12.180|
000014  6800              LDR      r0,[r0,#0]
000016  f0400001          ORR      r0,r0,#1
00001a  4926              LDR      r1,|L12.180|
00001c  6008              STR      r0,[r1,#0]
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  f0000001          AND      r0,r0,#1
000026  9000              STR      r0,[sp,#0]
000028  bf00              NOP      
00002a  bf00              NOP      
;;;879        
;;;880        /* Configure the MCO1 pin in alternate function mode */    
;;;881        GPIO_InitStruct.Pin = MCO1_PIN;
00002c  1588              ASRS     r0,r1,#22
00002e  9001              STR      r0,[sp,#4]
;;;882        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
000030  2002              MOVS     r0,#2
000032  9002              STR      r0,[sp,#8]
;;;883        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
000034  2003              MOVS     r0,#3
000036  9004              STR      r0,[sp,#0x10]
;;;884        GPIO_InitStruct.Pull = GPIO_NOPULL;
000038  2000              MOVS     r0,#0
00003a  9003              STR      r0,[sp,#0xc]
;;;885        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
00003c  9005              STR      r0,[sp,#0x14]
;;;886        HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
00003e  a901              ADD      r1,sp,#4
000040  481d              LDR      r0,|L12.184|
000042  f7fffffe          BL       HAL_GPIO_Init
;;;887        
;;;888        /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
;;;889        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
000046  481b              LDR      r0,|L12.180|
000048  3828              SUBS     r0,r0,#0x28
00004a  6800              LDR      r0,[r0,#0]
00004c  f02060ec          BIC      r0,r0,#0x7600000
000050  ea440105          ORR      r1,r4,r5
000054  4308              ORRS     r0,r0,r1
000056  4917              LDR      r1,|L12.180|
000058  3928              SUBS     r1,r1,#0x28
00005a  6008              STR      r0,[r1,#0]
00005c  e027              B        |L12.174|
                  |L12.94|
;;;890        
;;;891       /* This RCC MCO1 enable feature is available only on STM32F410xx devices */
;;;892    #if defined(RCC_CFGR_MCO1EN)
;;;893        __HAL_RCC_MCO1_ENABLE();
;;;894    #endif /* RCC_CFGR_MCO1EN */    
;;;895      }
;;;896      else
;;;897      {
;;;898        assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
;;;899        
;;;900        /* MCO2 Clock Enable */
;;;901        __MCO2_CLK_ENABLE();
00005e  bf00              NOP      
000060  2000              MOVS     r0,#0
000062  9000              STR      r0,[sp,#0]
000064  4813              LDR      r0,|L12.180|
000066  6800              LDR      r0,[r0,#0]
000068  f0400004          ORR      r0,r0,#4
00006c  4911              LDR      r1,|L12.180|
00006e  6008              STR      r0,[r1,#0]
000070  4608              MOV      r0,r1
000072  6800              LDR      r0,[r0,#0]
000074  f0000004          AND      r0,r0,#4
000078  9000              STR      r0,[sp,#0]
00007a  bf00              NOP      
00007c  bf00              NOP      
;;;902        
;;;903        /* Configure the MCO2 pin in alternate function mode */
;;;904        GPIO_InitStruct.Pin = MCO2_PIN;
00007e  1548              ASRS     r0,r1,#21
000080  9001              STR      r0,[sp,#4]
;;;905        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
000082  2002              MOVS     r0,#2
000084  9002              STR      r0,[sp,#8]
;;;906        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
000086  2003              MOVS     r0,#3
000088  9004              STR      r0,[sp,#0x10]
;;;907        GPIO_InitStruct.Pull = GPIO_NOPULL;
00008a  2000              MOVS     r0,#0
00008c  9003              STR      r0,[sp,#0xc]
;;;908        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
00008e  9005              STR      r0,[sp,#0x14]
;;;909        HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
000090  a901              ADD      r1,sp,#4
000092  480a              LDR      r0,|L12.188|
000094  f7fffffe          BL       HAL_GPIO_Init
;;;910        
;;;911        /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
;;;912        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
000098  4806              LDR      r0,|L12.180|
00009a  3828              SUBS     r0,r0,#0x28
00009c  6800              LDR      r0,[r0,#0]
00009e  f0204078          BIC      r0,r0,#0xf8000000
0000a2  ea4401c5          ORR      r1,r4,r5,LSL #3
0000a6  4308              ORRS     r0,r0,r1
0000a8  4902              LDR      r1,|L12.180|
0000aa  3928              SUBS     r1,r1,#0x28
0000ac  6008              STR      r0,[r1,#0]
                  |L12.174|
;;;913    
;;;914       /* This RCC MCO2 enable feature is available only on STM32F410Rx devices */
;;;915    #if defined(RCC_CFGR_MCO2EN)
;;;916        __HAL_RCC_MCO2_ENABLE();
;;;917    #endif /* RCC_CFGR_MCO2EN */
;;;918      }
;;;919    }
0000ae  b006              ADD      sp,sp,#0x18
0000b0  bd70              POP      {r4-r6,pc}
;;;920    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L12.180|
                          DCD      0x40023830
                  |L12.184|
                          DCD      0x40020000
                  |L12.188|
                          DCD      0x40020800

                          AREA ||i.HAL_RCC_NMI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RCC_NMI_IRQHandler PROC
;;;1171     */
;;;1172   void HAL_RCC_NMI_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1173   {
;;;1174     /* Check RCC CSSF flag  */
;;;1175     if(__HAL_RCC_GET_IT(RCC_IT_CSS))
000002  4806              LDR      r0,|L13.28|
000004  6800              LDR      r0,[r0,#0]
000006  f0000080          AND      r0,r0,#0x80
00000a  2880              CMP      r0,#0x80
00000c  d105              BNE      |L13.26|
;;;1176     {
;;;1177       /* RCC Clock Security System interrupt user callback */
;;;1178       HAL_RCC_CSSCallback();
00000e  f7fffffe          BL       HAL_RCC_CSSCallback
;;;1179   
;;;1180       /* Clear RCC CSS pending bit */
;;;1181       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
000012  2080              MOVS     r0,#0x80
000014  4901              LDR      r1,|L13.28|
000016  1c89              ADDS     r1,r1,#2
000018  7008              STRB     r0,[r1,#0]
                  |L13.26|
;;;1182     }
;;;1183   }
00001a  bd10              POP      {r4,pc}
;;;1184   
                          ENDP

                  |L13.28|
                          DCD      0x4002380c

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;233      */
;;;234    __weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b538              PUSH     {r3-r5,lr}
;;;235    {
000002  4604              MOV      r4,r0
;;;236     uint32_t tickstart = 0;  
000004  2500              MOVS     r5,#0
;;;237     
;;;238      /* Check the parameters */
;;;239      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;240      /*------------------------------- HSE Configuration ------------------------*/ 
;;;241      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
000006  7820              LDRB     r0,[r4,#0]
000008  f0000001          AND      r0,r0,#1
00000c  2800              CMP      r0,#0
00000e  d066              BEQ      |L14.222|
;;;242      {
;;;243        /* Check the parameters */
;;;244        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;245        /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
;;;246        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
000010  48f7              LDR      r0,|L14.1008|
000012  6800              LDR      r0,[r0,#0]
000014  f000000c          AND      r0,r0,#0xc
000018  2804              CMP      r0,#4
00001a  d00d              BEQ      |L14.56|
;;;247          ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
00001c  48f4              LDR      r0,|L14.1008|
00001e  6800              LDR      r0,[r0,#0]
000020  f000000c          AND      r0,r0,#0xc
000024  2808              CMP      r0,#8
000026  d113              BNE      |L14.80|
000028  48f1              LDR      r0,|L14.1008|
00002a  1f00              SUBS     r0,r0,#4
00002c  6800              LDR      r0,[r0,#0]
00002e  f4000080          AND      r0,r0,#0x400000
000032  f5b00f80          CMP      r0,#0x400000
000036  d10b              BNE      |L14.80|
                  |L14.56|
;;;248        {
;;;249          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
000038  48ed              LDR      r0,|L14.1008|
00003a  3808              SUBS     r0,r0,#8
00003c  6800              LDR      r0,[r0,#0]
00003e  f3c04040          UBFX     r0,r0,#17,#1
000042  2800              CMP      r0,#0
000044  d04b              BEQ      |L14.222|
000046  6860              LDR      r0,[r4,#4]
000048  2800              CMP      r0,#0
00004a  d148              BNE      |L14.222|
;;;250          {
;;;251            return HAL_ERROR;
00004c  2001              MOVS     r0,#1
                  |L14.78|
;;;252          }
;;;253        }
;;;254        else
;;;255        {
;;;256          /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
;;;257          __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
;;;258          
;;;259          /* Get Start Tick*/
;;;260          tickstart = HAL_GetTick();
;;;261          
;;;262          /* Wait till HSE is disabled */  
;;;263          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;264          {
;;;265            if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;266            {
;;;267              return HAL_TIMEOUT;
;;;268            }       
;;;269          }
;;;270          
;;;271          /* Set the new HSE configuration ---------------------------------------*/
;;;272          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;273          
;;;274          /* Check the HSE State */
;;;275          if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
;;;276          {
;;;277            /* Get Start Tick*/
;;;278            tickstart = HAL_GetTick();
;;;279          
;;;280            /* Wait till HSE is ready */  
;;;281            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;282            {
;;;283              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;284              {
;;;285                return HAL_TIMEOUT;
;;;286              } 
;;;287            }
;;;288          }
;;;289          else
;;;290          {
;;;291            /* Get Start Tick*/
;;;292            tickstart = HAL_GetTick();
;;;293    
;;;294            /* Wait till HSE is bypassed or disabled */
;;;295            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;296            {
;;;297              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;298              {
;;;299                return HAL_TIMEOUT;
;;;300              } 
;;;301            }
;;;302          }
;;;303        }
;;;304      }
;;;305      /*----------------------------- HSI Configuration --------------------------*/
;;;306      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;307      {
;;;308        /* Check the parameters */
;;;309        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;310        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;311        
;;;312        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
;;;313        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
;;;314          ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
;;;315        {
;;;316          /* When HSI is used as system clock it will not disabled */
;;;317          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;318          {
;;;319            return HAL_ERROR;
;;;320          }
;;;321          /* Otherwise, just the calibration is allowed */
;;;322          else
;;;323          {
;;;324            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;325            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;326          }
;;;327        }
;;;328        else
;;;329        {
;;;330          /* Check the HSI State */
;;;331          if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
;;;332          {
;;;333            /* Enable the Internal High Speed oscillator (HSI). */
;;;334            __HAL_RCC_HSI_ENABLE();
;;;335    
;;;336            /* Get Start Tick*/
;;;337            tickstart = HAL_GetTick();
;;;338    
;;;339            /* Wait till HSI is ready */  
;;;340            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;341            {
;;;342              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;343              {
;;;344                return HAL_TIMEOUT;
;;;345              }       
;;;346            } 
;;;347                    
;;;348            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;349            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;350          }
;;;351          else
;;;352          {
;;;353            /* Disable the Internal High Speed oscillator (HSI). */
;;;354            __HAL_RCC_HSI_DISABLE();
;;;355    
;;;356            /* Get Start Tick*/
;;;357            tickstart = HAL_GetTick();
;;;358          
;;;359            /* Wait till HSI is ready */  
;;;360            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;361            {
;;;362              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;363              {
;;;364                return HAL_TIMEOUT;
;;;365              } 
;;;366            } 
;;;367          }
;;;368        }
;;;369      }
;;;370      /*------------------------------ LSI Configuration -------------------------*/
;;;371      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;372      {
;;;373        /* Check the parameters */
;;;374        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;375    
;;;376        /* Check the LSI State */
;;;377        if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
;;;378        {
;;;379          /* Enable the Internal Low Speed oscillator (LSI). */
;;;380          __HAL_RCC_LSI_ENABLE();
;;;381          
;;;382          /* Get Start Tick*/
;;;383          tickstart = HAL_GetTick();
;;;384          
;;;385          /* Wait till LSI is ready */
;;;386          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;387          {
;;;388            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;389            {
;;;390              return HAL_TIMEOUT;
;;;391            } 
;;;392          }
;;;393        }
;;;394        else
;;;395        {
;;;396          /* Disable the Internal Low Speed oscillator (LSI). */
;;;397          __HAL_RCC_LSI_DISABLE();
;;;398          
;;;399          /* Get Start Tick*/
;;;400          tickstart = HAL_GetTick();
;;;401          
;;;402          /* Wait till LSI is ready */  
;;;403          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;404          {
;;;405            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;406            {
;;;407              return HAL_TIMEOUT;
;;;408            }       
;;;409          } 
;;;410        }
;;;411      }
;;;412      /*------------------------------ LSE Configuration -------------------------*/ 
;;;413      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;414      {
;;;415        /* Check the parameters */
;;;416        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;417        
;;;418        /* Enable Power Clock*/
;;;419        __HAL_RCC_PWR_CLK_ENABLE();
;;;420        
;;;421        /* Enable write access to Backup domain */
;;;422        PWR->CR |= PWR_CR_DBP;
;;;423        
;;;424        /* Wait for Backup domain Write protection disable */
;;;425        tickstart = HAL_GetTick();
;;;426        
;;;427        while((PWR->CR & PWR_CR_DBP) == RESET)
;;;428        {
;;;429          if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
;;;430          {
;;;431            return HAL_TIMEOUT;
;;;432          }      
;;;433        }
;;;434        
;;;435        /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
;;;436        __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
;;;437        
;;;438        /* Get Start Tick*/
;;;439        tickstart = HAL_GetTick();
;;;440        
;;;441        /* Wait till LSE is ready */  
;;;442        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;443        {
;;;444          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;445          {
;;;446            return HAL_TIMEOUT;
;;;447          }    
;;;448        } 
;;;449        
;;;450        /* Set the new LSE configuration -----------------------------------------*/
;;;451        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;452        /* Check the LSE State */
;;;453        if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
;;;454        {
;;;455          /* Get Start Tick*/
;;;456          tickstart = HAL_GetTick();
;;;457          
;;;458          /* Wait till LSE is ready */  
;;;459          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;460          {
;;;461            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;462            {
;;;463              return HAL_TIMEOUT;
;;;464            }       
;;;465          }
;;;466        }
;;;467        else
;;;468        {
;;;469          /* Get Start Tick*/
;;;470          tickstart = HAL_GetTick();
;;;471          
;;;472          /* Wait till LSE is ready */  
;;;473          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;474          {
;;;475            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;476            {
;;;477              return HAL_TIMEOUT;
;;;478            }       
;;;479          }
;;;480        }
;;;481      }
;;;482      /*-------------------------------- PLL Configuration -----------------------*/
;;;483      /* Check the parameters */
;;;484      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;485      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;486      {
;;;487        /* Check if the PLL is used as system clock or not */
;;;488        if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
;;;489        { 
;;;490          if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;491          {
;;;492            /* Check the parameters */
;;;493            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;494            assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
;;;495            assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
;;;496            assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
;;;497            assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
;;;498          
;;;499            /* Disable the main PLL. */
;;;500            __HAL_RCC_PLL_DISABLE();
;;;501            
;;;502            /* Get Start Tick*/
;;;503            tickstart = HAL_GetTick();
;;;504            
;;;505            /* Wait till PLL is ready */  
;;;506            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;507            {
;;;508              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;509              {
;;;510                return HAL_TIMEOUT;
;;;511              }
;;;512            }        
;;;513    
;;;514            /* Configure the main PLL clock source, multiplication and division factors. */
;;;515            WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
;;;516                                     RCC_OscInitStruct->PLL.PLLM                                                 | \
;;;517                                     (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
;;;518                                     (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
;;;519                                     (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
;;;520            /* Enable the main PLL. */
;;;521            __HAL_RCC_PLL_ENABLE();
;;;522    
;;;523            /* Get Start Tick*/
;;;524            tickstart = HAL_GetTick();
;;;525            
;;;526            /* Wait till PLL is ready */  
;;;527            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;528            {
;;;529              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;530              {
;;;531                return HAL_TIMEOUT;
;;;532              } 
;;;533            }
;;;534          }
;;;535          else
;;;536          {
;;;537            /* Disable the main PLL. */
;;;538            __HAL_RCC_PLL_DISABLE();
;;;539     
;;;540            /* Get Start Tick*/
;;;541            tickstart = HAL_GetTick();
;;;542            
;;;543            /* Wait till PLL is ready */  
;;;544            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;545            {
;;;546              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;547              {
;;;548                return HAL_TIMEOUT;
;;;549              }
;;;550            }
;;;551          }
;;;552        }
;;;553        else
;;;554        {
;;;555          return HAL_ERROR;
;;;556        }
;;;557      }
;;;558      return HAL_OK;
;;;559    }
00004e  bd38              POP      {r3-r5,pc}
                  |L14.80|
000050  2000              MOVS     r0,#0                 ;257
000052  49e7              LDR      r1,|L14.1008|
000054  1f89              SUBS     r1,r1,#6              ;257
000056  7008              STRB     r0,[r1,#0]            ;257
000058  f7fffffe          BL       HAL_GetTick
00005c  4605              MOV      r5,r0                 ;260
00005e  e008              B        |L14.114|
                  |L14.96|
000060  f7fffffe          BL       HAL_GetTick
000064  1b40              SUBS     r0,r0,r5              ;265
000066  f2413188          MOV      r1,#0x1388            ;265
00006a  4288              CMP      r0,r1                 ;265
00006c  d901              BLS      |L14.114|
00006e  2003              MOVS     r0,#3                 ;267
000070  e7ed              B        |L14.78|
                  |L14.114|
000072  48df              LDR      r0,|L14.1008|
000074  3808              SUBS     r0,r0,#8              ;263
000076  6800              LDR      r0,[r0,#0]            ;263
000078  f3c04040          UBFX     r0,r0,#17,#1          ;263
00007c  2800              CMP      r0,#0                 ;263
00007e  d1ef              BNE      |L14.96|
000080  7920              LDRB     r0,[r4,#4]            ;272
000082  49db              LDR      r1,|L14.1008|
000084  1f89              SUBS     r1,r1,#6              ;272
000086  7008              STRB     r0,[r1,#0]            ;272
000088  6860              LDR      r0,[r4,#4]            ;275
00008a  b1a0              CBZ      r0,|L14.182|
00008c  f7fffffe          BL       HAL_GetTick
000090  4605              MOV      r5,r0                 ;278
000092  e008              B        |L14.166|
                  |L14.148|
000094  f7fffffe          BL       HAL_GetTick
000098  1b40              SUBS     r0,r0,r5              ;283
00009a  f2413188          MOV      r1,#0x1388            ;283
00009e  4288              CMP      r0,r1                 ;283
0000a0  d901              BLS      |L14.166|
0000a2  2003              MOVS     r0,#3                 ;285
0000a4  e7d3              B        |L14.78|
                  |L14.166|
0000a6  48d2              LDR      r0,|L14.1008|
0000a8  3808              SUBS     r0,r0,#8              ;281
0000aa  6800              LDR      r0,[r0,#0]            ;281
0000ac  f3c04040          UBFX     r0,r0,#17,#1          ;281
0000b0  2800              CMP      r0,#0                 ;281
0000b2  d0ef              BEQ      |L14.148|
0000b4  e013              B        |L14.222|
                  |L14.182|
0000b6  f7fffffe          BL       HAL_GetTick
0000ba  4605              MOV      r5,r0                 ;292
0000bc  e008              B        |L14.208|
                  |L14.190|
0000be  f7fffffe          BL       HAL_GetTick
0000c2  1b40              SUBS     r0,r0,r5              ;297
0000c4  f2413188          MOV      r1,#0x1388            ;297
0000c8  4288              CMP      r0,r1                 ;297
0000ca  d901              BLS      |L14.208|
0000cc  2003              MOVS     r0,#3                 ;299
0000ce  e7be              B        |L14.78|
                  |L14.208|
0000d0  48c7              LDR      r0,|L14.1008|
0000d2  3808              SUBS     r0,r0,#8              ;295
0000d4  6800              LDR      r0,[r0,#0]            ;295
0000d6  f3c04040          UBFX     r0,r0,#17,#1          ;295
0000da  2800              CMP      r0,#0                 ;295
0000dc  d1ef              BNE      |L14.190|
                  |L14.222|
0000de  7820              LDRB     r0,[r4,#0]            ;306
0000e0  f0000002          AND      r0,r0,#2              ;306
0000e4  2802              CMP      r0,#2                 ;306
0000e6  d169              BNE      |L14.444|
0000e8  48c1              LDR      r0,|L14.1008|
0000ea  6800              LDR      r0,[r0,#0]            ;313
0000ec  f000000c          AND      r0,r0,#0xc            ;313
0000f0  b158              CBZ      r0,|L14.266|
0000f2  48bf              LDR      r0,|L14.1008|
0000f4  6800              LDR      r0,[r0,#0]            ;314
0000f6  f000000c          AND      r0,r0,#0xc            ;314
0000fa  2808              CMP      r0,#8                 ;314
0000fc  d121              BNE      |L14.322|
0000fe  48bc              LDR      r0,|L14.1008|
000100  1f00              SUBS     r0,r0,#4              ;314
000102  6800              LDR      r0,[r0,#0]            ;314
000104  f4000080          AND      r0,r0,#0x400000       ;314
000108  b9d8              CBNZ     r0,|L14.322|
                  |L14.266|
00010a  48b9              LDR      r0,|L14.1008|
00010c  3808              SUBS     r0,r0,#8              ;317
00010e  6800              LDR      r0,[r0,#0]            ;317
000110  f3c00040          UBFX     r0,r0,#1,#1           ;317
000114  b120              CBZ      r0,|L14.288|
000116  68e0              LDR      r0,[r4,#0xc]          ;317
000118  2801              CMP      r0,#1                 ;317
00011a  d001              BEQ      |L14.288|
00011c  2001              MOVS     r0,#1                 ;319
00011e  e796              B        |L14.78|
                  |L14.288|
000120  48b3              LDR      r0,|L14.1008|
000122  3808              SUBS     r0,r0,#8              ;325
000124  6800              LDR      r0,[r0,#0]            ;325
000126  f02000f8          BIC      r0,r0,#0xf8           ;325
00012a  22f8              MOVS     r2,#0xf8              ;325
00012c  fa92f2a2          RBIT     r2,r2                 ;325
000130  fab2f282          CLZ      r2,r2                 ;325
000134  6921              LDR      r1,[r4,#0x10]         ;325
000136  4091              LSLS     r1,r1,r2              ;325
000138  4308              ORRS     r0,r0,r1              ;325
00013a  49ad              LDR      r1,|L14.1008|
00013c  3908              SUBS     r1,r1,#8              ;325
00013e  6008              STR      r0,[r1,#0]            ;325
000140  e03c              B        |L14.444|
                  |L14.322|
000142  68e0              LDR      r0,[r4,#0xc]          ;331
000144  b328              CBZ      r0,|L14.402|
000146  2001              MOVS     r0,#1                 ;334
000148  49aa              LDR      r1,|L14.1012|
00014a  6008              STR      r0,[r1,#0]            ;334
00014c  f7fffffe          BL       HAL_GetTick
000150  4605              MOV      r5,r0                 ;337
000152  e006              B        |L14.354|
                  |L14.340|
000154  f7fffffe          BL       HAL_GetTick
000158  1b40              SUBS     r0,r0,r5              ;342
00015a  2864              CMP      r0,#0x64              ;342
00015c  d901              BLS      |L14.354|
00015e  2003              MOVS     r0,#3                 ;344
000160  e775              B        |L14.78|
                  |L14.354|
000162  48a3              LDR      r0,|L14.1008|
000164  3808              SUBS     r0,r0,#8              ;340
000166  6800              LDR      r0,[r0,#0]            ;340
000168  f3c00040          UBFX     r0,r0,#1,#1           ;340
00016c  2800              CMP      r0,#0                 ;340
00016e  d0f1              BEQ      |L14.340|
000170  489f              LDR      r0,|L14.1008|
000172  3808              SUBS     r0,r0,#8              ;349
000174  6800              LDR      r0,[r0,#0]            ;349
000176  f02000f8          BIC      r0,r0,#0xf8           ;349
00017a  22f8              MOVS     r2,#0xf8              ;349
00017c  fa92f2a2          RBIT     r2,r2                 ;349
000180  fab2f282          CLZ      r2,r2                 ;349
000184  6921              LDR      r1,[r4,#0x10]         ;349
000186  4091              LSLS     r1,r1,r2              ;349
000188  4308              ORRS     r0,r0,r1              ;349
00018a  4999              LDR      r1,|L14.1008|
00018c  3908              SUBS     r1,r1,#8              ;349
00018e  6008              STR      r0,[r1,#0]            ;349
000190  e014              B        |L14.444|
                  |L14.402|
000192  2000              MOVS     r0,#0                 ;354
000194  4997              LDR      r1,|L14.1012|
000196  6008              STR      r0,[r1,#0]            ;354
000198  f7fffffe          BL       HAL_GetTick
00019c  4605              MOV      r5,r0                 ;357
00019e  e006              B        |L14.430|
                  |L14.416|
0001a0  f7fffffe          BL       HAL_GetTick
0001a4  1b40              SUBS     r0,r0,r5              ;362
0001a6  2864              CMP      r0,#0x64              ;362
0001a8  d901              BLS      |L14.430|
0001aa  2003              MOVS     r0,#3                 ;364
0001ac  e74f              B        |L14.78|
                  |L14.430|
0001ae  4890              LDR      r0,|L14.1008|
0001b0  3808              SUBS     r0,r0,#8              ;360
0001b2  6800              LDR      r0,[r0,#0]            ;360
0001b4  f3c00040          UBFX     r0,r0,#1,#1           ;360
0001b8  2800              CMP      r0,#0                 ;360
0001ba  d1f1              BNE      |L14.416|
                  |L14.444|
0001bc  7820              LDRB     r0,[r4,#0]            ;371
0001be  f0000008          AND      r0,r0,#8              ;371
0001c2  2808              CMP      r0,#8                 ;371
0001c4  d12c              BNE      |L14.544|
0001c6  6960              LDR      r0,[r4,#0x14]         ;377
0001c8  b1a8              CBZ      r0,|L14.502|
0001ca  2001              MOVS     r0,#1                 ;380
0001cc  498a              LDR      r1,|L14.1016|
0001ce  6008              STR      r0,[r1,#0]            ;380
0001d0  f7fffffe          BL       HAL_GetTick
0001d4  4605              MOV      r5,r0                 ;383
0001d6  e006              B        |L14.486|
                  |L14.472|
0001d8  f7fffffe          BL       HAL_GetTick
0001dc  1b40              SUBS     r0,r0,r5              ;388
0001de  2864              CMP      r0,#0x64              ;388
0001e0  d901              BLS      |L14.486|
0001e2  2003              MOVS     r0,#3                 ;390
0001e4  e733              B        |L14.78|
                  |L14.486|
0001e6  4882              LDR      r0,|L14.1008|
0001e8  306c              ADDS     r0,r0,#0x6c           ;386
0001ea  6800              LDR      r0,[r0,#0]            ;386
0001ec  f3c00040          UBFX     r0,r0,#1,#1           ;386
0001f0  2800              CMP      r0,#0                 ;386
0001f2  d0f1              BEQ      |L14.472|
0001f4  e014              B        |L14.544|
                  |L14.502|
0001f6  2000              MOVS     r0,#0                 ;397
0001f8  497f              LDR      r1,|L14.1016|
0001fa  6008              STR      r0,[r1,#0]            ;397
0001fc  f7fffffe          BL       HAL_GetTick
000200  4605              MOV      r5,r0                 ;400
000202  e006              B        |L14.530|
                  |L14.516|
000204  f7fffffe          BL       HAL_GetTick
000208  1b40              SUBS     r0,r0,r5              ;405
00020a  2864              CMP      r0,#0x64              ;405
00020c  d901              BLS      |L14.530|
00020e  2003              MOVS     r0,#3                 ;407
000210  e71d              B        |L14.78|
                  |L14.530|
000212  4877              LDR      r0,|L14.1008|
000214  306c              ADDS     r0,r0,#0x6c           ;403
000216  6800              LDR      r0,[r0,#0]            ;403
000218  f3c00040          UBFX     r0,r0,#1,#1           ;403
00021c  2800              CMP      r0,#0                 ;403
00021e  d1f1              BNE      |L14.516|
                  |L14.544|
000220  7820              LDRB     r0,[r4,#0]            ;413
000222  f0000004          AND      r0,r0,#4              ;413
000226  2804              CMP      r0,#4                 ;413
000228  d16f              BNE      |L14.778|
00022a  bf00              NOP                            ;419
00022c  2000              MOVS     r0,#0                 ;419
00022e  9000              STR      r0,[sp,#0]            ;419
000230  486f              LDR      r0,|L14.1008|
000232  3038              ADDS     r0,r0,#0x38           ;419
000234  6800              LDR      r0,[r0,#0]            ;419
000236  f0405080          ORR      r0,r0,#0x10000000     ;419
00023a  496d              LDR      r1,|L14.1008|
00023c  3138              ADDS     r1,r1,#0x38           ;419
00023e  6008              STR      r0,[r1,#0]            ;419
000240  4608              MOV      r0,r1                 ;419
000242  6800              LDR      r0,[r0,#0]            ;419
000244  f0005080          AND      r0,r0,#0x10000000     ;419
000248  9000              STR      r0,[sp,#0]            ;419
00024a  bf00              NOP                            ;419
00024c  bf00              NOP                            ;419
00024e  486b              LDR      r0,|L14.1020|
000250  6800              LDR      r0,[r0,#0]            ;422
000252  f4407080          ORR      r0,r0,#0x100          ;422
000256  4969              LDR      r1,|L14.1020|
000258  6008              STR      r0,[r1,#0]            ;422
00025a  f7fffffe          BL       HAL_GetTick
00025e  4605              MOV      r5,r0                 ;425
000260  e006              B        |L14.624|
                  |L14.610|
000262  f7fffffe          BL       HAL_GetTick
000266  1b40              SUBS     r0,r0,r5              ;429
000268  2864              CMP      r0,#0x64              ;429
00026a  d901              BLS      |L14.624|
00026c  2003              MOVS     r0,#3                 ;431
00026e  e6ee              B        |L14.78|
                  |L14.624|
000270  4862              LDR      r0,|L14.1020|
000272  6800              LDR      r0,[r0,#0]            ;427
000274  f4007080          AND      r0,r0,#0x100          ;427
000278  2800              CMP      r0,#0                 ;427
00027a  d0f2              BEQ      |L14.610|
00027c  2000              MOVS     r0,#0                 ;436
00027e  495c              LDR      r1,|L14.1008|
000280  3168              ADDS     r1,r1,#0x68           ;436
000282  7008              STRB     r0,[r1,#0]            ;436
000284  f7fffffe          BL       HAL_GetTick
000288  4605              MOV      r5,r0                 ;439
00028a  e008              B        |L14.670|
                  |L14.652|
00028c  f7fffffe          BL       HAL_GetTick
000290  1b40              SUBS     r0,r0,r5              ;444
000292  f2413188          MOV      r1,#0x1388            ;444
000296  4288              CMP      r0,r1                 ;444
000298  d901              BLS      |L14.670|
00029a  2003              MOVS     r0,#3                 ;446
00029c  e6d7              B        |L14.78|
                  |L14.670|
00029e  4854              LDR      r0,|L14.1008|
0002a0  3068              ADDS     r0,r0,#0x68           ;442
0002a2  6800              LDR      r0,[r0,#0]            ;442
0002a4  f3c00040          UBFX     r0,r0,#1,#1           ;442
0002a8  2800              CMP      r0,#0                 ;442
0002aa  d1ef              BNE      |L14.652|
0002ac  7a20              LDRB     r0,[r4,#8]            ;451
0002ae  4950              LDR      r1,|L14.1008|
0002b0  3168              ADDS     r1,r1,#0x68           ;451
0002b2  7008              STRB     r0,[r1,#0]            ;451
0002b4  68a0              LDR      r0,[r4,#8]            ;453
0002b6  b1a0              CBZ      r0,|L14.738|
0002b8  f7fffffe          BL       HAL_GetTick
0002bc  4605              MOV      r5,r0                 ;456
0002be  e008              B        |L14.722|
                  |L14.704|
0002c0  f7fffffe          BL       HAL_GetTick
0002c4  1b40              SUBS     r0,r0,r5              ;461
0002c6  f2413188          MOV      r1,#0x1388            ;461
0002ca  4288              CMP      r0,r1                 ;461
0002cc  d901              BLS      |L14.722|
0002ce  2003              MOVS     r0,#3                 ;463
0002d0  e6bd              B        |L14.78|
                  |L14.722|
0002d2  4847              LDR      r0,|L14.1008|
0002d4  3068              ADDS     r0,r0,#0x68           ;459
0002d6  6800              LDR      r0,[r0,#0]            ;459
0002d8  f3c00040          UBFX     r0,r0,#1,#1           ;459
0002dc  2800              CMP      r0,#0                 ;459
0002de  d0ef              BEQ      |L14.704|
0002e0  e013              B        |L14.778|
                  |L14.738|
0002e2  f7fffffe          BL       HAL_GetTick
0002e6  4605              MOV      r5,r0                 ;470
0002e8  e008              B        |L14.764|
                  |L14.746|
0002ea  f7fffffe          BL       HAL_GetTick
0002ee  1b40              SUBS     r0,r0,r5              ;475
0002f0  f2413188          MOV      r1,#0x1388            ;475
0002f4  4288              CMP      r0,r1                 ;475
0002f6  d901              BLS      |L14.764|
0002f8  2003              MOVS     r0,#3                 ;477
0002fa  e6a8              B        |L14.78|
                  |L14.764|
0002fc  483c              LDR      r0,|L14.1008|
0002fe  3068              ADDS     r0,r0,#0x68           ;473
000300  6800              LDR      r0,[r0,#0]            ;473
000302  f3c00040          UBFX     r0,r0,#1,#1           ;473
000306  2800              CMP      r0,#0                 ;473
000308  d1ef              BNE      |L14.746|
                  |L14.778|
00030a  69a0              LDR      r0,[r4,#0x18]         ;485
00030c  b3f0              CBZ      r0,|L14.908|
00030e  4838              LDR      r0,|L14.1008|
000310  6800              LDR      r0,[r0,#0]            ;488
000312  f000000c          AND      r0,r0,#0xc            ;488
000316  2808              CMP      r0,#8                 ;488
000318  d072              BEQ      |L14.1024|
00031a  69a0              LDR      r0,[r4,#0x18]         ;490
00031c  2802              CMP      r0,#2                 ;490
00031e  d150              BNE      |L14.962|
000320  2000              MOVS     r0,#0                 ;500
000322  4934              LDR      r1,|L14.1012|
000324  6608              STR      r0,[r1,#0x60]         ;500
000326  f7fffffe          BL       HAL_GetTick
00032a  4605              MOV      r5,r0                 ;503
00032c  e006              B        |L14.828|
                  |L14.814|
00032e  f7fffffe          BL       HAL_GetTick
000332  1b40              SUBS     r0,r0,r5              ;508
000334  2864              CMP      r0,#0x64              ;508
000336  d901              BLS      |L14.828|
000338  2003              MOVS     r0,#3                 ;510
00033a  e688              B        |L14.78|
                  |L14.828|
00033c  482c              LDR      r0,|L14.1008|
00033e  3808              SUBS     r0,r0,#8              ;506
000340  6800              LDR      r0,[r0,#0]            ;506
000342  f3c06040          UBFX     r0,r0,#25,#1          ;506
000346  2800              CMP      r0,#0                 ;506
000348  d1f1              BNE      |L14.814|
00034a  e9d40107          LDRD     r0,r1,[r4,#0x1c]      ;515
00034e  4308              ORRS     r0,r0,r1              ;515
000350  f64772c0          MOV      r2,#0x7fc0            ;515
000354  fa92f2a2          RBIT     r2,r2                 ;515
000358  fab2f282          CLZ      r2,r2                 ;515
00035c  6a61              LDR      r1,[r4,#0x24]         ;515
00035e  4091              LSLS     r1,r1,r2              ;515
000360  4308              ORRS     r0,r0,r1              ;515
000362  2201              MOVS     r2,#1                 ;515
000364  6aa1              LDR      r1,[r4,#0x28]         ;515
000366  ebc20151          RSB      r1,r2,r1,LSR #1       ;515
00036a  f44f3240          MOV      r2,#0x30000           ;515
00036e  fa92f2a2          RBIT     r2,r2                 ;515
000372  fab2f282          CLZ      r2,r2                 ;515
000376  4091              LSLS     r1,r1,r2              ;515
000378  4308              ORRS     r0,r0,r1              ;515
00037a  f04f6270          MOV      r2,#0xf000000         ;515
00037e  fa92f2a2          RBIT     r2,r2                 ;515
000382  fab2f282          CLZ      r2,r2                 ;515
000386  6ae1              LDR      r1,[r4,#0x2c]         ;515
000388  4091              LSLS     r1,r1,r2              ;515
00038a  e000              B        |L14.910|
                  |L14.908|
00038c  e03a              B        |L14.1028|
                  |L14.910|
00038e  4308              ORRS     r0,r0,r1              ;515
000390  4917              LDR      r1,|L14.1008|
000392  1f09              SUBS     r1,r1,#4              ;515
000394  6008              STR      r0,[r1,#0]            ;515
000396  2001              MOVS     r0,#1                 ;521
000398  4916              LDR      r1,|L14.1012|
00039a  6608              STR      r0,[r1,#0x60]         ;521
00039c  f7fffffe          BL       HAL_GetTick
0003a0  4605              MOV      r5,r0                 ;524
0003a2  e006              B        |L14.946|
                  |L14.932|
0003a4  f7fffffe          BL       HAL_GetTick
0003a8  1b40              SUBS     r0,r0,r5              ;529
0003aa  2864              CMP      r0,#0x64              ;529
0003ac  d901              BLS      |L14.946|
0003ae  2003              MOVS     r0,#3                 ;531
0003b0  e64d              B        |L14.78|
                  |L14.946|
0003b2  480f              LDR      r0,|L14.1008|
0003b4  3808              SUBS     r0,r0,#8              ;527
0003b6  6800              LDR      r0,[r0,#0]            ;527
0003b8  f3c06040          UBFX     r0,r0,#25,#1          ;527
0003bc  2800              CMP      r0,#0                 ;527
0003be  d0f1              BEQ      |L14.932|
0003c0  e020              B        |L14.1028|
                  |L14.962|
0003c2  2000              MOVS     r0,#0                 ;538
0003c4  490b              LDR      r1,|L14.1012|
0003c6  6608              STR      r0,[r1,#0x60]         ;538
0003c8  f7fffffe          BL       HAL_GetTick
0003cc  4605              MOV      r5,r0                 ;541
0003ce  e006              B        |L14.990|
                  |L14.976|
0003d0  f7fffffe          BL       HAL_GetTick
0003d4  1b40              SUBS     r0,r0,r5              ;546
0003d6  2864              CMP      r0,#0x64              ;546
0003d8  d901              BLS      |L14.990|
0003da  2003              MOVS     r0,#3                 ;548
0003dc  e637              B        |L14.78|
                  |L14.990|
0003de  4804              LDR      r0,|L14.1008|
0003e0  3808              SUBS     r0,r0,#8              ;544
0003e2  6800              LDR      r0,[r0,#0]            ;544
0003e4  f3c06040          UBFX     r0,r0,#25,#1          ;544
0003e8  2800              CMP      r0,#0                 ;544
0003ea  d1f1              BNE      |L14.976|
0003ec  e00a              B        |L14.1028|
0003ee  e007              B        |L14.1024|
                  |L14.1008|
                          DCD      0x40023808
                  |L14.1012|
                          DCD      0x42470000
                  |L14.1016|
                          DCD      0x42470e80
                  |L14.1020|
                          DCD      0x40007000
                  |L14.1024|
000400  2001              MOVS     r0,#1                 ;555
000402  e624              B        |L14.78|
                  |L14.1028|
000404  2000              MOVS     r0,#0                 ;558
000406  e622              B        |L14.78|
;;;560     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  APBAHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "HALLIB\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rcc_c_c7d3f187____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___19_stm32f4xx_hal_rcc_c_c7d3f187____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rcc_c_c7d3f187____REVSH|
#line 402
|__asm___19_stm32f4xx_hal_rcc_c_c7d3f187____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rcc_c_c7d3f187____RRX|
#line 587
|__asm___19_stm32f4xx_hal_rcc_c_c7d3f187____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
