; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_hal_pwr_ex.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm32f4xx_hal_pwr_ex.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm32f4xx_hal_pwr_ex.crf HALLIB\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pwr_ex.c]
                          THUMB

                          AREA ||i.HAL_PWREx_ControlVoltageScaling||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_ControlVoltageScaling PROC
;;;306      */
;;;307    HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
000000  b538              PUSH     {r3-r5,lr}
;;;308    {
000002  4605              MOV      r5,r0
;;;309      uint32_t tickstart = 0;
000004  2400              MOVS     r4,#0
;;;310      
;;;311      assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
;;;312      
;;;313      /* Enable PWR RCC Clock Peripheral */
;;;314      __HAL_RCC_PWR_CLK_ENABLE();
000006  bf00              NOP      
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  4832              LDR      r0,|L1.216|
00000e  6800              LDR      r0,[r0,#0]
000010  f0405080          ORR      r0,r0,#0x10000000
000014  4930              LDR      r1,|L1.216|
000016  6008              STR      r0,[r1,#0]
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  f0005080          AND      r0,r0,#0x10000000
000020  9000              STR      r0,[sp,#0]
000022  bf00              NOP      
000024  bf00              NOP      
;;;315      
;;;316      /* Check if the PLL is used as system clock or not */
;;;317      if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
000026  482c              LDR      r0,|L1.216|
000028  3838              SUBS     r0,r0,#0x38
00002a  6800              LDR      r0,[r0,#0]
00002c  f000000c          AND      r0,r0,#0xc
000030  2808              CMP      r0,#8
000032  d04c              BEQ      |L1.206|
;;;318      {
;;;319        /* Disable the main PLL */
;;;320        __HAL_RCC_PLL_DISABLE();
000034  2000              MOVS     r0,#0
000036  4929              LDR      r1,|L1.220|
000038  6608              STR      r0,[r1,#0x60]
;;;321        
;;;322        /* Get Start Tick */
;;;323        tickstart = HAL_GetTick();    
00003a  f7fffffe          BL       HAL_GetTick
00003e  4604              MOV      r4,r0
;;;324        /* Wait till PLL is disabled */  
;;;325        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
000040  e006              B        |L1.80|
                  |L1.66|
;;;326        {
;;;327          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
000042  f7fffffe          BL       HAL_GetTick
000046  1b00              SUBS     r0,r0,r4
000048  2864              CMP      r0,#0x64
00004a  d901              BLS      |L1.80|
;;;328          {
;;;329            return HAL_TIMEOUT;
00004c  2003              MOVS     r0,#3
                  |L1.78|
;;;330          }
;;;331        }
;;;332        
;;;333        /* Set Range */
;;;334        __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
;;;335        
;;;336        /* Enable the main PLL */
;;;337        __HAL_RCC_PLL_ENABLE();
;;;338        
;;;339        /* Get Start Tick */
;;;340        tickstart = HAL_GetTick();
;;;341        /* Wait till PLL is ready */  
;;;342        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;343        {
;;;344          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;345          {
;;;346            return HAL_TIMEOUT;
;;;347          } 
;;;348        }
;;;349        
;;;350        /* Get Start Tick */
;;;351        tickstart = HAL_GetTick();
;;;352        while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
;;;353        {
;;;354          if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
;;;355          {
;;;356            return HAL_TIMEOUT;
;;;357          } 
;;;358        }
;;;359      }
;;;360      else
;;;361      {
;;;362        return HAL_ERROR;
;;;363      }
;;;364    
;;;365      return HAL_OK;
;;;366    }
00004e  bd38              POP      {r3-r5,pc}
                  |L1.80|
000050  4821              LDR      r0,|L1.216|
000052  3840              SUBS     r0,r0,#0x40           ;325
000054  6800              LDR      r0,[r0,#0]            ;325
000056  f3c06040          UBFX     r0,r0,#25,#1          ;325
00005a  2800              CMP      r0,#0                 ;325
00005c  d1f1              BNE      |L1.66|
00005e  bf00              NOP                            ;334
000060  9000              STR      r0,[sp,#0]            ;334
000062  481f              LDR      r0,|L1.224|
000064  6800              LDR      r0,[r0,#0]            ;334
000066  f4204040          BIC      r0,r0,#0xc000         ;334
00006a  4328              ORRS     r0,r0,r5              ;334
00006c  491c              LDR      r1,|L1.224|
00006e  6008              STR      r0,[r1,#0]            ;334
000070  4608              MOV      r0,r1                 ;334
000072  6800              LDR      r0,[r0,#0]            ;334
000074  f4004040          AND      r0,r0,#0xc000         ;334
000078  9000              STR      r0,[sp,#0]            ;334
00007a  bf00              NOP                            ;334
00007c  bf00              NOP                            ;334
00007e  2001              MOVS     r0,#1                 ;337
000080  4916              LDR      r1,|L1.220|
000082  6608              STR      r0,[r1,#0x60]         ;337
000084  f7fffffe          BL       HAL_GetTick
000088  4604              MOV      r4,r0                 ;340
00008a  e006              B        |L1.154|
                  |L1.140|
00008c  f7fffffe          BL       HAL_GetTick
000090  1b00              SUBS     r0,r0,r4              ;344
000092  2864              CMP      r0,#0x64              ;344
000094  d901              BLS      |L1.154|
000096  2003              MOVS     r0,#3                 ;346
000098  e7d9              B        |L1.78|
                  |L1.154|
00009a  480f              LDR      r0,|L1.216|
00009c  3840              SUBS     r0,r0,#0x40           ;342
00009e  6800              LDR      r0,[r0,#0]            ;342
0000a0  f3c06040          UBFX     r0,r0,#25,#1          ;342
0000a4  2800              CMP      r0,#0                 ;342
0000a6  d0f1              BEQ      |L1.140|
0000a8  f7fffffe          BL       HAL_GetTick
0000ac  4604              MOV      r4,r0                 ;351
0000ae  e007              B        |L1.192|
                  |L1.176|
0000b0  f7fffffe          BL       HAL_GetTick
0000b4  1b00              SUBS     r0,r0,r4              ;354
0000b6  f5b07f7a          CMP      r0,#0x3e8             ;354
0000ba  d901              BLS      |L1.192|
0000bc  2003              MOVS     r0,#3                 ;356
0000be  e7c6              B        |L1.78|
                  |L1.192|
0000c0  4807              LDR      r0,|L1.224|
0000c2  6840              LDR      r0,[r0,#4]            ;352
0000c4  f3c03080          UBFX     r0,r0,#14,#1          ;352
0000c8  2800              CMP      r0,#0                 ;352
0000ca  d0f1              BEQ      |L1.176|
0000cc  e001              B        |L1.210|
                  |L1.206|
0000ce  2001              MOVS     r0,#1                 ;362
0000d0  e7bd              B        |L1.78|
                  |L1.210|
0000d2  2000              MOVS     r0,#0                 ;365
0000d4  e7bb              B        |L1.78|
;;;367    #endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */
                          ENDP

0000d6  0000              DCW      0x0000
                  |L1.216|
                          DCD      0x40023840
                  |L1.220|
                          DCD      0x42470000
                  |L1.224|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisableBkUpReg||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableBkUpReg PROC
;;;184      */
;;;185    HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
000000  b510              PUSH     {r4,lr}
;;;186    {
;;;187      uint32_t tickstart = 0;
000002  2400              MOVS     r4,#0
;;;188    
;;;189      *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
000004  2000              MOVS     r0,#0
000006  f44f7100          MOV      r1,#0x200
00000a  fa91f1a1          RBIT     r1,r1
00000e  fab1f181          CLZ      r1,r1
000012  4a0c              LDR      r2,|L2.68|
000014  eb020181          ADD      r1,r2,r1,LSL #2
000018  f8c10080          STR      r0,[r1,#0x80]
;;;190    
;;;191      /* Get tick */
;;;192      tickstart = HAL_GetTick();
00001c  f7fffffe          BL       HAL_GetTick
000020  4604              MOV      r4,r0
;;;193    
;;;194      /* Wait till Backup regulator ready flag is set */  
;;;195      while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
000022  e007              B        |L2.52|
                  |L2.36|
;;;196      {
;;;197        if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
000024  f7fffffe          BL       HAL_GetTick
000028  1b00              SUBS     r0,r0,r4
00002a  f5b07f7a          CMP      r0,#0x3e8
00002e  d901              BLS      |L2.52|
;;;198        {
;;;199          return HAL_TIMEOUT;
000030  2003              MOVS     r0,#3
                  |L2.50|
;;;200        } 
;;;201      }
;;;202      return HAL_OK;
;;;203    }
000032  bd10              POP      {r4,pc}
                  |L2.52|
000034  4804              LDR      r0,|L2.72|
000036  6840              LDR      r0,[r0,#4]            ;195
000038  f3c000c0          UBFX     r0,r0,#3,#1           ;195
00003c  2800              CMP      r0,#0                 ;195
00003e  d1f1              BNE      |L2.36|
000040  bf00              NOP                            ;202
000042  e7f6              B        |L2.50|
;;;204    
                          ENDP

                  |L2.68|
                          DCD      0x420e0000
                  |L2.72|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisableFlashPowerDown||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableFlashPowerDown PROC
;;;217      */
;;;218    void HAL_PWREx_DisableFlashPowerDown(void)
000000  2000              MOVS     r0,#0
;;;219    {
;;;220      *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
000002  f44f7100          MOV      r1,#0x200
000006  fa91f1a1          RBIT     r1,r1
00000a  fab1f181          CLZ      r1,r1
00000e  4a02              LDR      r2,|L3.24|
000010  f8420021          STR      r0,[r2,r1,LSL #2]
;;;221    }
000014  4770              BX       lr
;;;222    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWREx_DisableOverDrive||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableOverDrive PROC
;;;492      */
;;;493    HAL_StatusTypeDef HAL_PWREx_DisableOverDrive(void)
000000  b538              PUSH     {r3-r5,lr}
;;;494    {
;;;495      uint32_t tickstart = 0;
000002  2400              MOVS     r4,#0
;;;496      
;;;497      __HAL_RCC_PWR_CLK_ENABLE();
000004  bf00              NOP      
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  4824              LDR      r0,|L4.156|
00000c  6800              LDR      r0,[r0,#0]
00000e  f0405080          ORR      r0,r0,#0x10000000
000012  4922              LDR      r1,|L4.156|
000014  6008              STR      r0,[r1,#0]
000016  4608              MOV      r0,r1
000018  6800              LDR      r0,[r0,#0]
00001a  f0005080          AND      r0,r0,#0x10000000
00001e  9000              STR      r0,[sp,#0]
000020  bf00              NOP      
000022  bf00              NOP      
;;;498        
;;;499      /* Disable the Over-drive switch */
;;;500      __HAL_PWR_OVERDRIVESWITCHING_DISABLE();
000024  2000              MOVS     r0,#0
000026  f44f3100          MOV      r1,#0x20000
00002a  fa91f1a1          RBIT     r1,r1
00002e  fab1f181          CLZ      r1,r1
000032  4a1b              LDR      r2,|L4.160|
000034  f8420021          STR      r0,[r2,r1,LSL #2]
;;;501      
;;;502      /* Get tick */
;;;503      tickstart = HAL_GetTick();
000038  f7fffffe          BL       HAL_GetTick
00003c  4604              MOV      r4,r0
;;;504     
;;;505      while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
00003e  e007              B        |L4.80|
                  |L4.64|
;;;506      {
;;;507        if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
000040  f7fffffe          BL       HAL_GetTick
000044  1b00              SUBS     r0,r0,r4
000046  f5b07f7a          CMP      r0,#0x3e8
00004a  d901              BLS      |L4.80|
;;;508        {
;;;509          return HAL_TIMEOUT;
00004c  2003              MOVS     r0,#3
                  |L4.78|
;;;510        }
;;;511      } 
;;;512      
;;;513      /* Disable the Over-drive */
;;;514      __HAL_PWR_OVERDRIVE_DISABLE();
;;;515    
;;;516      /* Get tick */
;;;517      tickstart = HAL_GetTick();
;;;518    
;;;519      while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
;;;520      {
;;;521        if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
;;;522        {
;;;523          return HAL_TIMEOUT;
;;;524        }
;;;525      }
;;;526      
;;;527      return HAL_OK;
;;;528    }
00004e  bd38              POP      {r3-r5,pc}
                  |L4.80|
000050  4814              LDR      r0,|L4.164|
000052  6840              LDR      r0,[r0,#4]            ;505
000054  f4003000          AND      r0,r0,#0x20000        ;505
000058  f5b03f00          CMP      r0,#0x20000           ;505
00005c  d0f0              BEQ      |L4.64|
00005e  2000              MOVS     r0,#0                 ;514
000060  f44f3180          MOV      r1,#0x10000           ;514
000064  fa91f1a1          RBIT     r1,r1                 ;514
000068  fab1f181          CLZ      r1,r1                 ;514
00006c  4a0c              LDR      r2,|L4.160|
00006e  f8420021          STR      r0,[r2,r1,LSL #2]     ;514
000072  f7fffffe          BL       HAL_GetTick
000076  4604              MOV      r4,r0                 ;517
000078  e007              B        |L4.138|
                  |L4.122|
00007a  f7fffffe          BL       HAL_GetTick
00007e  1b00              SUBS     r0,r0,r4              ;521
000080  f5b07f7a          CMP      r0,#0x3e8             ;521
000084  d901              BLS      |L4.138|
000086  2003              MOVS     r0,#3                 ;523
000088  e7e1              B        |L4.78|
                  |L4.138|
00008a  4806              LDR      r0,|L4.164|
00008c  6840              LDR      r0,[r0,#4]            ;519
00008e  f4003080          AND      r0,r0,#0x10000        ;519
000092  f5b03f80          CMP      r0,#0x10000           ;519
000096  d0f0              BEQ      |L4.122|
000098  2000              MOVS     r0,#0                 ;527
00009a  e7d8              B        |L4.78|
;;;529    
                          ENDP

                  |L4.156|
                          DCD      0x40023840
                  |L4.160|
                          DCD      0x420e0000
                  |L4.164|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnableBkUpReg||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableBkUpReg PROC
;;;160      */
;;;161    HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
000000  b510              PUSH     {r4,lr}
;;;162    {
;;;163      uint32_t tickstart = 0;
000002  2400              MOVS     r4,#0
;;;164    
;;;165      *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
000004  2001              MOVS     r0,#1
000006  0241              LSLS     r1,r0,#9
000008  fa91f1a1          RBIT     r1,r1
00000c  fab1f181          CLZ      r1,r1
000010  4a0c              LDR      r2,|L5.68|
000012  eb020181          ADD      r1,r2,r1,LSL #2
000016  f8c10080          STR      r0,[r1,#0x80]
;;;166    
;;;167      /* Get tick */
;;;168      tickstart = HAL_GetTick();
00001a  f7fffffe          BL       HAL_GetTick
00001e  4604              MOV      r4,r0
;;;169    
;;;170      /* Wait till Backup regulator ready flag is set */  
;;;171      while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
000020  e007              B        |L5.50|
                  |L5.34|
;;;172      {
;;;173        if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
000022  f7fffffe          BL       HAL_GetTick
000026  1b00              SUBS     r0,r0,r4
000028  f5b07f7a          CMP      r0,#0x3e8
00002c  d901              BLS      |L5.50|
;;;174        {
;;;175          return HAL_TIMEOUT;
00002e  2003              MOVS     r0,#3
                  |L5.48|
;;;176        } 
;;;177      }
;;;178      return HAL_OK;
;;;179    }
000030  bd10              POP      {r4,pc}
                  |L5.50|
000032  4805              LDR      r0,|L5.72|
000034  6840              LDR      r0,[r0,#4]            ;171
000036  f3c000c0          UBFX     r0,r0,#3,#1           ;171
00003a  2800              CMP      r0,#0                 ;171
00003c  d0f1              BEQ      |L5.34|
00003e  2000              MOVS     r0,#0                 ;178
000040  e7f6              B        |L5.48|
;;;180    
                          ENDP

000042  0000              DCW      0x0000
                  |L5.68|
                          DCD      0x420e0000
                  |L5.72|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnableFlashPowerDown||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableFlashPowerDown PROC
;;;208      */
;;;209    void HAL_PWREx_EnableFlashPowerDown(void)
000000  2001              MOVS     r0,#1
;;;210    {
;;;211      *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
000002  0241              LSLS     r1,r0,#9
000004  fa91f1a1          RBIT     r1,r1
000008  fab1f181          CLZ      r1,r1
00000c  4a01              LDR      r2,|L6.20|
00000e  f8420021          STR      r0,[r2,r1,LSL #2]
;;;212    }
000012  4770              BX       lr
;;;213    
                          ENDP

                  |L6.20|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWREx_EnableOverDrive||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableOverDrive PROC
;;;445      */
;;;446    HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
000000  b538              PUSH     {r3-r5,lr}
;;;447    {
;;;448      uint32_t tickstart = 0;
000002  2400              MOVS     r4,#0
;;;449    
;;;450      __HAL_RCC_PWR_CLK_ENABLE();
000004  bf00              NOP      
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  4823              LDR      r0,|L7.152|
00000c  6800              LDR      r0,[r0,#0]
00000e  f0405080          ORR      r0,r0,#0x10000000
000012  4921              LDR      r1,|L7.152|
000014  6008              STR      r0,[r1,#0]
000016  4608              MOV      r0,r1
000018  6800              LDR      r0,[r0,#0]
00001a  f0005080          AND      r0,r0,#0x10000000
00001e  9000              STR      r0,[sp,#0]
000020  bf00              NOP      
000022  bf00              NOP      
;;;451      
;;;452      /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
;;;453      __HAL_PWR_OVERDRIVE_ENABLE();
000024  2001              MOVS     r0,#1
000026  0401              LSLS     r1,r0,#16
000028  fa91f1a1          RBIT     r1,r1
00002c  fab1f181          CLZ      r1,r1
000030  4a1a              LDR      r2,|L7.156|
000032  f8420021          STR      r0,[r2,r1,LSL #2]
;;;454    
;;;455      /* Get tick */
;;;456      tickstart = HAL_GetTick();
000036  f7fffffe          BL       HAL_GetTick
00003a  4604              MOV      r4,r0
;;;457    
;;;458      while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
00003c  e007              B        |L7.78|
                  |L7.62|
;;;459      {
;;;460        if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
00003e  f7fffffe          BL       HAL_GetTick
000042  1b00              SUBS     r0,r0,r4
000044  f5b07f7a          CMP      r0,#0x3e8
000048  d901              BLS      |L7.78|
;;;461        {
;;;462          return HAL_TIMEOUT;
00004a  2003              MOVS     r0,#3
                  |L7.76|
;;;463        }
;;;464      }
;;;465      
;;;466      /* Enable the Over-drive switch */
;;;467      __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
;;;468    
;;;469      /* Get tick */
;;;470      tickstart = HAL_GetTick();
;;;471    
;;;472      while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
;;;473      {
;;;474        if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
;;;475        {
;;;476          return HAL_TIMEOUT;
;;;477        }
;;;478      } 
;;;479      return HAL_OK;
;;;480    }
00004c  bd38              POP      {r3-r5,pc}
                  |L7.78|
00004e  4814              LDR      r0,|L7.160|
000050  6840              LDR      r0,[r0,#4]            ;458
000052  f4003080          AND      r0,r0,#0x10000        ;458
000056  f5b03f80          CMP      r0,#0x10000           ;458
00005a  d1f0              BNE      |L7.62|
00005c  2001              MOVS     r0,#1                 ;467
00005e  0441              LSLS     r1,r0,#17             ;467
000060  fa91f1a1          RBIT     r1,r1                 ;467
000064  fab1f181          CLZ      r1,r1                 ;467
000068  4a0c              LDR      r2,|L7.156|
00006a  f8420021          STR      r0,[r2,r1,LSL #2]     ;467
00006e  f7fffffe          BL       HAL_GetTick
000072  4604              MOV      r4,r0                 ;470
000074  e007              B        |L7.134|
                  |L7.118|
000076  f7fffffe          BL       HAL_GetTick
00007a  1b00              SUBS     r0,r0,r4              ;474
00007c  f5b07f7a          CMP      r0,#0x3e8             ;474
000080  d901              BLS      |L7.134|
000082  2003              MOVS     r0,#3                 ;476
000084  e7e2              B        |L7.76|
                  |L7.134|
000086  4806              LDR      r0,|L7.160|
000088  6840              LDR      r0,[r0,#4]            ;472
00008a  f4003000          AND      r0,r0,#0x20000        ;472
00008e  f5b03f00          CMP      r0,#0x20000           ;472
000092  d1f0              BNE      |L7.118|
000094  2000              MOVS     r0,#0                 ;479
000096  e7d9              B        |L7.76|
;;;481    
                          ENDP

                  |L7.152|
                          DCD      0x40023840
                  |L7.156|
                          DCD      0x420e0000
                  |L7.160|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnterUnderDriveSTOPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnterUnderDriveSTOPMode PROC
;;;568      */
;;;569    HAL_StatusTypeDef HAL_PWREx_EnterUnderDriveSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
000000  b5f8              PUSH     {r3-r7,lr}
;;;570    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;571      uint32_t tmpreg1 = 0;
000006  2400              MOVS     r4,#0
;;;572      uint32_t tickstart = 0;
000008  2700              MOVS     r7,#0
;;;573      
;;;574      /* Check the parameters */
;;;575      assert_param(IS_PWR_REGULATOR_UNDERDRIVE(Regulator));
;;;576      assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
;;;577      
;;;578      /* Enable Power ctrl clock */
;;;579      __HAL_RCC_PWR_CLK_ENABLE();
00000a  bf00              NOP      
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  4822              LDR      r0,|L8.156|
000012  6800              LDR      r0,[r0,#0]
000014  f0405080          ORR      r0,r0,#0x10000000
000018  4920              LDR      r1,|L8.156|
00001a  6008              STR      r0,[r1,#0]
00001c  4608              MOV      r0,r1
00001e  6800              LDR      r0,[r0,#0]
000020  f0005080          AND      r0,r0,#0x10000000
000024  9000              STR      r0,[sp,#0]
000026  bf00              NOP      
000028  bf00              NOP      
;;;580      /* Enable the Under-drive Mode ---------------------------------------------*/
;;;581      /* Clear Under-drive flag */
;;;582      __HAL_PWR_CLEAR_ODRUDR_FLAG();
00002a  481d              LDR      r0,|L8.160|
00002c  6840              LDR      r0,[r0,#4]
00002e  f4402040          ORR      r0,r0,#0xc0000
000032  491b              LDR      r1,|L8.160|
000034  6048              STR      r0,[r1,#4]
;;;583      
;;;584      /* Enable the Under-drive */ 
;;;585      __HAL_PWR_UNDERDRIVE_ENABLE();
000036  4608              MOV      r0,r1
000038  6800              LDR      r0,[r0,#0]
00003a  f4402040          ORR      r0,r0,#0xc0000
00003e  6008              STR      r0,[r1,#0]
;;;586    
;;;587      /* Get tick */
;;;588      tickstart = HAL_GetTick();
000040  f7fffffe          BL       HAL_GetTick
000044  4607              MOV      r7,r0
;;;589    
;;;590      /* Wait for UnderDrive mode is ready */
;;;591      while(__HAL_PWR_GET_FLAG(PWR_FLAG_UDRDY))
000046  e007              B        |L8.88|
                  |L8.72|
;;;592      {
;;;593        if((HAL_GetTick() - tickstart ) > PWR_UDERDRIVE_TIMEOUT_VALUE)
000048  f7fffffe          BL       HAL_GetTick
00004c  1bc0              SUBS     r0,r0,r7
00004e  f5b07f7a          CMP      r0,#0x3e8
000052  d901              BLS      |L8.88|
;;;594        {
;;;595          return HAL_TIMEOUT;
000054  2003              MOVS     r0,#3
                  |L8.86|
;;;596        }
;;;597      }
;;;598      
;;;599      /* Select the regulator state in STOP mode ---------------------------------*/
;;;600      tmpreg1 = PWR->CR;
;;;601      /* Clear PDDS, LPDS, MRLUDS and LPLUDS bits */
;;;602      tmpreg1 &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS | PWR_CR_LPUDS | PWR_CR_MRUDS);
;;;603      
;;;604      /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
;;;605      tmpreg1 |= Regulator;
;;;606      
;;;607      /* Store the new value */
;;;608      PWR->CR = tmpreg1;
;;;609      
;;;610      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;611      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
;;;612      
;;;613      /* Select STOP mode entry --------------------------------------------------*/
;;;614      if(STOPEntry == PWR_SLEEPENTRY_WFI)
;;;615      {   
;;;616        /* Request Wait For Interrupt */
;;;617        __WFI();
;;;618      }
;;;619      else
;;;620      {
;;;621        /* Request Wait For Event */
;;;622        __WFE();
;;;623      }
;;;624      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;625      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
;;;626    
;;;627      return HAL_OK;  
;;;628    }
000056  bdf8              POP      {r3-r7,pc}
                  |L8.88|
000058  4811              LDR      r0,|L8.160|
00005a  6840              LDR      r0,[r0,#4]            ;591
00005c  f4002040          AND      r0,r0,#0xc0000        ;591
000060  f5b02f40          CMP      r0,#0xc0000           ;591
000064  d0f0              BEQ      |L8.72|
000066  480e              LDR      r0,|L8.160|
000068  6804              LDR      r4,[r0,#0]            ;600
00006a  f6404003          MOV      r0,#0xc03             ;602
00006e  4384              BICS     r4,r4,r0              ;602
000070  432c              ORRS     r4,r4,r5              ;605
000072  480b              LDR      r0,|L8.160|
000074  6004              STR      r4,[r0,#0]            ;608
000076  480b              LDR      r0,|L8.164|
000078  6800              LDR      r0,[r0,#0]            ;611
00007a  f0400004          ORR      r0,r0,#4              ;611
00007e  4909              LDR      r1,|L8.164|
000080  6008              STR      r0,[r1,#0]            ;611
000082  2e01              CMP      r6,#1                 ;614
000084  d101              BNE      |L8.138|
000086  bf30              WFI                            ;617
000088  e000              B        |L8.140|
                  |L8.138|
00008a  bf20              WFE                            ;622
                  |L8.140|
00008c  4805              LDR      r0,|L8.164|
00008e  6800              LDR      r0,[r0,#0]            ;625
000090  f0200004          BIC      r0,r0,#4              ;625
000094  4903              LDR      r1,|L8.164|
000096  6008              STR      r0,[r1,#0]            ;625
000098  2000              MOVS     r0,#0                 ;627
00009a  e7dc              B        |L8.86|
;;;629    
                          ENDP

                  |L8.156|
                          DCD      0x40023840
                  |L8.160|
                          DCD      0x40007000
                  |L8.164|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWREx_GetVoltageRange||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_GetVoltageRange PROC
;;;230      */  
;;;231    uint32_t HAL_PWREx_GetVoltageRange(void)
000000  4802              LDR      r0,|L9.12|
;;;232    {
;;;233      return (PWR->CR & PWR_CR_VOS);
000002  6800              LDR      r0,[r0,#0]
000004  f4004040          AND      r0,r0,#0xc000
;;;234    }
000008  4770              BX       lr
;;;235    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      0x40007000

;*** Start embedded assembler ***

#line 1 "HALLIB\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_pwr_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____REVSH|
#line 402
|__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____RRX|
#line 587
|__asm___22_stm32f4xx_hal_pwr_ex_c_1028ebfa____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
