; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\spi.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\spi.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\spi.crf Hardware\SPI.c]
                          THUMB

                          AREA ||i.HAL_SPI_MspDeInit||, CODE, READONLY, ALIGN=2

                  HAL_SPI_MspDeInit PROC
;;;86     }
;;;87     void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
000000  b510              PUSH     {r4,lr}
;;;88     {
000002  4604              MOV      r4,r0
;;;89       if(spiHandle->Instance==SPI1)
000004  4910              LDR      r1,|L1.72|
000006  6820              LDR      r0,[r4,#0]
000008  4288              CMP      r0,r1
00000a  d10d              BNE      |L1.40|
;;;90       {
;;;91         __HAL_RCC_SPI1_CLK_DISABLE();
00000c  480f              LDR      r0,|L1.76|
00000e  6800              LDR      r0,[r0,#0]
000010  f4205080          BIC      r0,r0,#0x1000
000014  490d              LDR      r1,|L1.76|
000016  6008              STR      r0,[r1,#0]
;;;92         HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4|GPIO_PIN_3);
000018  2118              MOVS     r1,#0x18
00001a  480d              LDR      r0,|L1.80|
00001c  f7fffffe          BL       HAL_GPIO_DeInit
;;;93         HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7);
000020  2180              MOVS     r1,#0x80
000022  480c              LDR      r0,|L1.84|
000024  f7fffffe          BL       HAL_GPIO_DeInit
                  |L1.40|
;;;94       }
;;;95     	if(spiHandle->Instance==SPI5)
000028  490b              LDR      r1,|L1.88|
00002a  6820              LDR      r0,[r4,#0]
00002c  4288              CMP      r0,r1
00002e  d10a              BNE      |L1.70|
;;;96       {
;;;97         __HAL_RCC_SPI5_CLK_DISABLE();
000030  4806              LDR      r0,|L1.76|
000032  6800              LDR      r0,[r0,#0]
000034  f4201080          BIC      r0,r0,#0x100000
000038  4904              LDR      r1,|L1.76|
00003a  6008              STR      r0,[r1,#0]
;;;98         HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8);
00003c  f44f7160          MOV      r1,#0x380
000040  4806              LDR      r0,|L1.92|
000042  f7fffffe          BL       HAL_GPIO_DeInit
                  |L1.70|
;;;99       }
;;;100    } 
000046  bd10              POP      {r4,pc}
;;;101    
                          ENDP

                  |L1.72|
                          DCD      0x40013000
                  |L1.76|
                          DCD      0x40023844
                  |L1.80|
                          DCD      0x40020400
                  |L1.84|
                          DCD      0x40020000
                  |L1.88|
                          DCD      0x40015000
                  |L1.92|
                          DCD      0x40021400

                          AREA ||i.MX_SPI1_Init||, CODE, READONLY, ALIGN=2

                  MX_SPI1_Init PROC
;;;56     }
;;;57     void MX_SPI1_Init(void)
000000  b500              PUSH     {lr}
;;;58     {
000002  b087              SUB      sp,sp,#0x1c
;;;59     	GPIO_InitTypeDef GPIO_InitStruct;
;;;60     	__HAL_RCC_SPI1_CLK_ENABLE();
000004  bf00              NOP      
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
00000a  4822              LDR      r0,|L2.148|
00000c  6800              LDR      r0,[r0,#0]
00000e  f4405080          ORR      r0,r0,#0x1000
000012  4920              LDR      r1,|L2.148|
000014  6008              STR      r0,[r1,#0]
000016  4608              MOV      r0,r1
000018  6800              LDR      r0,[r0,#0]
00001a  f4005080          AND      r0,r0,#0x1000
00001e  9001              STR      r0,[sp,#4]
000020  bf00              NOP      
000022  bf00              NOP      
;;;61       GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
000024  2018              MOVS     r0,#0x18
000026  9002              STR      r0,[sp,#8]
;;;62       GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
000028  2002              MOVS     r0,#2
00002a  9003              STR      r0,[sp,#0xc]
;;;63       GPIO_InitStruct.Pull = GPIO_NOPULL;
00002c  2000              MOVS     r0,#0
00002e  9004              STR      r0,[sp,#0x10]
;;;64       GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
000030  2003              MOVS     r0,#3
000032  9005              STR      r0,[sp,#0x14]
;;;65       GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
000034  2005              MOVS     r0,#5
000036  9006              STR      r0,[sp,#0x18]
;;;66       HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
000038  a902              ADD      r1,sp,#8
00003a  4817              LDR      r0,|L2.152|
00003c  f7fffffe          BL       HAL_GPIO_Init
;;;67       GPIO_InitStruct.Pin = GPIO_PIN_7;
000040  2080              MOVS     r0,#0x80
000042  9002              STR      r0,[sp,#8]
;;;68       GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
000044  2002              MOVS     r0,#2
000046  9003              STR      r0,[sp,#0xc]
;;;69       GPIO_InitStruct.Pull = GPIO_NOPULL;
000048  2000              MOVS     r0,#0
00004a  9004              STR      r0,[sp,#0x10]
;;;70       GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
00004c  2003              MOVS     r0,#3
00004e  9005              STR      r0,[sp,#0x14]
;;;71       GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
000050  2005              MOVS     r0,#5
000052  9006              STR      r0,[sp,#0x18]
;;;72       HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
000054  a902              ADD      r1,sp,#8
000056  4811              LDR      r0,|L2.156|
000058  f7fffffe          BL       HAL_GPIO_Init
;;;73       hspi1.Instance = SPI1;
00005c  4810              LDR      r0,|L2.160|
00005e  4911              LDR      r1,|L2.164|
000060  6008              STR      r0,[r1,#0]  ; hspi1
;;;74       hspi1.Init.Mode = SPI_MODE_MASTER;
000062  f44f7082          MOV      r0,#0x104
000066  6048              STR      r0,[r1,#4]  ; hspi1
;;;75       hspi1.Init.Direction = SPI_DIRECTION_2LINES;
000068  2100              MOVS     r1,#0
00006a  480e              LDR      r0,|L2.164|
00006c  6081              STR      r1,[r0,#8]
;;;76       hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
00006e  60c1              STR      r1,[r0,#0xc]
;;;77       hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
000070  6101              STR      r1,[r0,#0x10]
;;;78       hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
000072  6141              STR      r1,[r0,#0x14]
;;;79       hspi1.Init.NSS = SPI_NSS_SOFT;
000074  f44f7100          MOV      r1,#0x200
000078  6181              STR      r1,[r0,#0x18]
;;;80       hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
00007a  2128              MOVS     r1,#0x28
00007c  61c1              STR      r1,[r0,#0x1c]
;;;81       hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
00007e  2100              MOVS     r1,#0
000080  6201              STR      r1,[r0,#0x20]
;;;82       hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
000082  6241              STR      r1,[r0,#0x24]
;;;83       hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
000084  6281              STR      r1,[r0,#0x28]
;;;84       hspi1.Init.CRCPolynomial = 10;
000086  210a              MOVS     r1,#0xa
000088  62c1              STR      r1,[r0,#0x2c]
;;;85     	HAL_SPI_Init(&hspi1);
00008a  f7fffffe          BL       HAL_SPI_Init
;;;86     }
00008e  b007              ADD      sp,sp,#0x1c
000090  bd00              POP      {pc}
;;;87     void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
                          ENDP

000092  0000              DCW      0x0000
                  |L2.148|
                          DCD      0x40023844
                  |L2.152|
                          DCD      0x40020400
                  |L2.156|
                          DCD      0x40020000
                  |L2.160|
                          DCD      0x40013000
                  |L2.164|
                          DCD      hspi1

                          AREA ||i.SPI4_Init||, CODE, READONLY, ALIGN=2

                  SPI4_Init PROC
;;;9      
;;;10     void SPI4_Init(void)
000000  b500              PUSH     {lr}
;;;11     {
000002  b087              SUB      sp,sp,#0x1c
;;;12     		GPIO_InitTypeDef GPIO_Initure;
;;;13         __HAL_RCC_GPIOE_CLK_ENABLE();       //使能GPIOF时钟
000004  bf00              NOP      
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
00000a  4831              LDR      r0,|L3.208|
00000c  6800              LDR      r0,[r0,#0]
00000e  f0400010          ORR      r0,r0,#0x10
000012  492f              LDR      r1,|L3.208|
000014  6008              STR      r0,[r1,#0]
000016  4608              MOV      r0,r1
000018  6800              LDR      r0,[r0,#0]
00001a  f0000010          AND      r0,r0,#0x10
00001e  9001              STR      r0,[sp,#4]
000020  bf00              NOP      
000022  bf00              NOP      
;;;14         __HAL_RCC_SPI4_CLK_ENABLE();        //使能SPI4时钟
000024  bf00              NOP      
000026  2000              MOVS     r0,#0
000028  9001              STR      r0,[sp,#4]
00002a  4829              LDR      r0,|L3.208|
00002c  3014              ADDS     r0,r0,#0x14
00002e  6800              LDR      r0,[r0,#0]
000030  f4405000          ORR      r0,r0,#0x2000
000034  4926              LDR      r1,|L3.208|
000036  3114              ADDS     r1,r1,#0x14
000038  6008              STR      r0,[r1,#0]
00003a  4608              MOV      r0,r1
00003c  6800              LDR      r0,[r0,#0]
00003e  f4005000          AND      r0,r0,#0x2000
000042  9001              STR      r0,[sp,#4]
000044  bf00              NOP      
000046  bf00              NOP      
;;;15         GPIO_Initure.Pin=GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
000048  f44f5083          MOV      r0,#0x1060
00004c  9002              STR      r0,[sp,#8]
;;;16         GPIO_Initure.Mode=GPIO_MODE_AF_PP;              //复用推挽输出
00004e  2002              MOVS     r0,#2
000050  9003              STR      r0,[sp,#0xc]
;;;17         GPIO_Initure.Pull=GPIO_PULLUP;                  //上拉
000052  2001              MOVS     r0,#1
000054  9004              STR      r0,[sp,#0x10]
;;;18         GPIO_Initure.Speed=GPIO_SPEED_FAST;             //快速            
000056  2002              MOVS     r0,#2
000058  9005              STR      r0,[sp,#0x14]
;;;19         GPIO_Initure.Alternate=GPIO_AF5_SPI4;           //复用为SPI4
00005a  2005              MOVS     r0,#5
00005c  9006              STR      r0,[sp,#0x18]
;;;20         HAL_GPIO_Init(GPIOE,&GPIO_Initure);
00005e  a902              ADD      r1,sp,#8
000060  481c              LDR      r0,|L3.212|
000062  f7fffffe          BL       HAL_GPIO_Init
;;;21     		GPIO_Initure.Pin=GPIO_PIN_4;
000066  2010              MOVS     r0,#0x10
000068  9002              STR      r0,[sp,#8]
;;;22         GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;          //推挽输出
00006a  2001              MOVS     r0,#1
00006c  9003              STR      r0,[sp,#0xc]
;;;23         GPIO_Initure.Pull=GPIO_PULLUP;                  //上拉
00006e  9004              STR      r0,[sp,#0x10]
;;;24         GPIO_Initure.Speed=GPIO_SPEED_FAST;    
000070  2002              MOVS     r0,#2
000072  9005              STR      r0,[sp,#0x14]
;;;25     		HAL_GPIO_Init(GPIOE,&GPIO_Initure);
000074  a902              ADD      r1,sp,#8
000076  4817              LDR      r0,|L3.212|
000078  f7fffffe          BL       HAL_GPIO_Init
;;;26         SPI4_Handler.Instance=SPI4;                         //SP4
00007c  4816              LDR      r0,|L3.216|
00007e  4917              LDR      r1,|L3.220|
000080  6008              STR      r0,[r1,#0]  ; SPI4_Handler
;;;27         SPI4_Handler.Init.Mode=SPI_MODE_MASTER;             //设置SPI工作模式，设置为主模式
000082  f44f7082          MOV      r0,#0x104
000086  6048              STR      r0,[r1,#4]  ; SPI4_Handler
;;;28         SPI4_Handler.Init.Direction=SPI_DIRECTION_2LINES;   //设置SPI单向或者双向的数据模式:SPI设置为双线模式
000088  2100              MOVS     r1,#0
00008a  4814              LDR      r0,|L3.220|
00008c  6081              STR      r1,[r0,#8]
;;;29         SPI4_Handler.Init.DataSize=SPI_DATASIZE_8BIT;       //设置SPI的数据大小:SPI发送接收8位帧结构
00008e  60c1              STR      r1,[r0,#0xc]
;;;30         SPI4_Handler.Init.CLKPolarity=SPI_POLARITY_HIGH;    //串行同步时钟的空闲状态为高电平
000090  2102              MOVS     r1,#2
000092  6101              STR      r1,[r0,#0x10]
;;;31         SPI4_Handler.Init.CLKPhase=SPI_PHASE_2EDGE;         //串行同步时钟的第二个跳变沿（上升或下降）数据被采样
000094  2101              MOVS     r1,#1
000096  6141              STR      r1,[r0,#0x14]
;;;32         SPI4_Handler.Init.NSS=SPI_NSS_SOFT;                 //NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制
000098  0249              LSLS     r1,r1,#9
00009a  6181              STR      r1,[r0,#0x18]
;;;33         SPI4_Handler.Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_8;//定义波特率预分频的值:波特率预分频值为256
00009c  2110              MOVS     r1,#0x10
00009e  61c1              STR      r1,[r0,#0x1c]
;;;34         SPI4_Handler.Init.FirstBit=SPI_FIRSTBIT_MSB;        //指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始
0000a0  2100              MOVS     r1,#0
0000a2  6201              STR      r1,[r0,#0x20]
;;;35         SPI4_Handler.Init.TIMode=SPI_TIMODE_DISABLE;        //关闭TI模式
0000a4  6241              STR      r1,[r0,#0x24]
;;;36         SPI4_Handler.Init.CRCCalculation=SPI_CRCCALCULATION_DISABLE;//关闭硬件CRC校验
0000a6  6281              STR      r1,[r0,#0x28]
;;;37         SPI4_Handler.Init.CRCPolynomial=7;                  //CRC值计算的多项式
0000a8  2107              MOVS     r1,#7
0000aa  62c1              STR      r1,[r0,#0x2c]
;;;38         HAL_SPI_Init(&SPI4_Handler);//初始化
0000ac  f7fffffe          BL       HAL_SPI_Init
;;;39         __HAL_SPI_ENABLE(&SPI4_Handler);                    //使能SPI4
0000b0  480a              LDR      r0,|L3.220|
0000b2  6800              LDR      r0,[r0,#0]  ; SPI4_Handler
0000b4  6800              LDR      r0,[r0,#0]
0000b6  f0400040          ORR      r0,r0,#0x40
0000ba  4908              LDR      r1,|L3.220|
0000bc  6809              LDR      r1,[r1,#0]  ; SPI4_Handler
0000be  6008              STR      r0,[r1,#0]
;;;40         SPI4_ReadWriteByte(0Xff);                           //启动传输
0000c0  20ff              MOVS     r0,#0xff
0000c2  f7fffffe          BL       SPI4_ReadWriteByte
;;;41     		SPI4_SetSpeed(SPI_BAUDRATEPRESCALER_8);
0000c6  2010              MOVS     r0,#0x10
0000c8  f7fffffe          BL       SPI4_SetSpeed
;;;42     }
0000cc  b007              ADD      sp,sp,#0x1c
0000ce  bd00              POP      {pc}
;;;43     void SPI4_SetSpeed(u8 SPI_BaudRatePrescaler)
                          ENDP

                  |L3.208|
                          DCD      0x40023830
                  |L3.212|
                          DCD      0x40021000
                  |L3.216|
                          DCD      0x40013400
                  |L3.220|
                          DCD      SPI4_Handler

                          AREA ||i.SPI4_ReadWriteByte||, CODE, READONLY, ALIGN=2

                  SPI4_ReadWriteByte PROC
;;;50     }
;;;51     uint8_t SPI4_ReadWriteByte(uint8_t TxData)
000000  b501              PUSH     {r0,lr}
;;;52     {
000002  b082              SUB      sp,sp,#8
;;;53         u8 Rxdata;
;;;54         HAL_SPI_TransmitReceive(&SPI4_Handler,&TxData,&Rxdata,1, 1000);       
000004  f44f707a          MOV      r0,#0x3e8
000008  2301              MOVS     r3,#1
00000a  aa01              ADD      r2,sp,#4
00000c  a902              ADD      r1,sp,#8
00000e  9000              STR      r0,[sp,#0]
000010  4802              LDR      r0,|L4.28|
000012  f7fffffe          BL       HAL_SPI_TransmitReceive
;;;55     		return Rxdata;          		    //返回收到的数据		
000016  f89d0004          LDRB     r0,[sp,#4]
;;;56     }
00001a  bd0e              POP      {r1-r3,pc}
;;;57     void MX_SPI1_Init(void)
                          ENDP

                  |L4.28|
                          DCD      SPI4_Handler

                          AREA ||i.SPI4_SetSpeed||, CODE, READONLY, ALIGN=2

                  SPI4_SetSpeed PROC
;;;42     }
;;;43     void SPI4_SetSpeed(u8 SPI_BaudRatePrescaler)
000000  4910              LDR      r1,|L5.68|
;;;44     {
;;;45         assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));//判断有效性
;;;46         __HAL_SPI_DISABLE(&SPI4_Handler);            //关闭SPI
000002  6809              LDR      r1,[r1,#0]  ; SPI4_Handler
000004  6809              LDR      r1,[r1,#0]
000006  f0210140          BIC      r1,r1,#0x40
00000a  4a0e              LDR      r2,|L5.68|
00000c  6812              LDR      r2,[r2,#0]  ; SPI4_Handler
00000e  6011              STR      r1,[r2,#0]
;;;47         SPI4_Handler.Instance->CR1&=0XFFC7;          //位3-5清零，用来设置波特率
000010  490c              LDR      r1,|L5.68|
000012  6809              LDR      r1,[r1,#0]  ; SPI4_Handler
000014  6809              LDR      r1,[r1,#0]
000016  f64f72c7          MOV      r2,#0xffc7
00001a  4011              ANDS     r1,r1,r2
00001c  4a09              LDR      r2,|L5.68|
00001e  6812              LDR      r2,[r2,#0]  ; SPI4_Handler
000020  6011              STR      r1,[r2,#0]
;;;48         SPI4_Handler.Instance->CR1|=SPI_BaudRatePrescaler;//设置SPI速度
000022  4908              LDR      r1,|L5.68|
000024  6809              LDR      r1,[r1,#0]  ; SPI4_Handler
000026  6809              LDR      r1,[r1,#0]
000028  4301              ORRS     r1,r1,r0
00002a  4a06              LDR      r2,|L5.68|
00002c  6812              LDR      r2,[r2,#0]  ; SPI4_Handler
00002e  6011              STR      r1,[r2,#0]
;;;49         __HAL_SPI_ENABLE(&SPI4_Handler);             //使能SPI
000030  4904              LDR      r1,|L5.68|
000032  6809              LDR      r1,[r1,#0]  ; SPI4_Handler
000034  6809              LDR      r1,[r1,#0]
000036  f0410140          ORR      r1,r1,#0x40
00003a  4a02              LDR      r2,|L5.68|
00003c  6812              LDR      r2,[r2,#0]  ; SPI4_Handler
00003e  6011              STR      r1,[r2,#0]
;;;50     }
000040  4770              BX       lr
;;;51     uint8_t SPI4_ReadWriteByte(uint8_t TxData)
                          ENDP

000042  0000              DCW      0x0000
                  |L5.68|
                          DCD      SPI4_Handler

                          AREA ||i.SPI5_Init||, CODE, READONLY, ALIGN=2

                  SPI5_Init PROC
;;;102    
;;;103    void SPI5_Init(void)
000000  b500              PUSH     {lr}
;;;104    {
000002  b087              SUB      sp,sp,#0x1c
;;;105    		GPIO_InitTypeDef GPIO_Initure;
;;;106        __HAL_RCC_GPIOF_CLK_ENABLE();       //使能GPIOF时钟
000004  bf00              NOP      
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
00000a  4830              LDR      r0,|L6.204|
00000c  6800              LDR      r0,[r0,#0]
00000e  f0400020          ORR      r0,r0,#0x20
000012  492e              LDR      r1,|L6.204|
000014  6008              STR      r0,[r1,#0]
000016  4608              MOV      r0,r1
000018  6800              LDR      r0,[r0,#0]
00001a  f0000020          AND      r0,r0,#0x20
00001e  9001              STR      r0,[sp,#4]
000020  bf00              NOP      
000022  bf00              NOP      
;;;107        __HAL_RCC_SPI5_CLK_ENABLE();        //使能SPI4时钟
000024  bf00              NOP      
000026  2000              MOVS     r0,#0
000028  9001              STR      r0,[sp,#4]
00002a  4828              LDR      r0,|L6.204|
00002c  3014              ADDS     r0,r0,#0x14
00002e  6800              LDR      r0,[r0,#0]
000030  f4401080          ORR      r0,r0,#0x100000
000034  4925              LDR      r1,|L6.204|
000036  3114              ADDS     r1,r1,#0x14
000038  6008              STR      r0,[r1,#0]
00003a  4608              MOV      r0,r1
00003c  6800              LDR      r0,[r0,#0]
00003e  f4001080          AND      r0,r0,#0x100000
000042  9001              STR      r0,[sp,#4]
000044  bf00              NOP      
000046  bf00              NOP      
;;;108        GPIO_Initure.Pin=GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_9;
000048  f44f7060          MOV      r0,#0x380
00004c  9002              STR      r0,[sp,#8]
;;;109        GPIO_Initure.Mode=GPIO_MODE_AF_PP;              //复用推挽输出
00004e  2002              MOVS     r0,#2
000050  9003              STR      r0,[sp,#0xc]
;;;110        GPIO_Initure.Pull=GPIO_PULLUP;                  //上拉
000052  2001              MOVS     r0,#1
000054  9004              STR      r0,[sp,#0x10]
;;;111        GPIO_Initure.Speed=GPIO_SPEED_FAST;             //快速            
000056  2002              MOVS     r0,#2
000058  9005              STR      r0,[sp,#0x14]
;;;112        GPIO_Initure.Alternate=GPIO_AF5_SPI5;           //复用为SPI5
00005a  2005              MOVS     r0,#5
00005c  9006              STR      r0,[sp,#0x18]
;;;113        HAL_GPIO_Init(GPIOF,&GPIO_Initure);
00005e  a902              ADD      r1,sp,#8
000060  481b              LDR      r0,|L6.208|
000062  f7fffffe          BL       HAL_GPIO_Init
;;;114    		GPIO_Initure.Pin=GPIO_PIN_6;
000066  2040              MOVS     r0,#0x40
000068  9002              STR      r0,[sp,#8]
;;;115        GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;          //推挽输出
00006a  2001              MOVS     r0,#1
00006c  9003              STR      r0,[sp,#0xc]
;;;116        GPIO_Initure.Pull=GPIO_PULLUP;                  //上拉
00006e  9004              STR      r0,[sp,#0x10]
;;;117        GPIO_Initure.Speed=GPIO_SPEED_FAST;    
000070  2002              MOVS     r0,#2
000072  9005              STR      r0,[sp,#0x14]
;;;118    		HAL_GPIO_Init(GPIOF,&GPIO_Initure);
000074  a902              ADD      r1,sp,#8
000076  4816              LDR      r0,|L6.208|
000078  f7fffffe          BL       HAL_GPIO_Init
;;;119    		PFout(6)=1;
00007c  2001              MOVS     r0,#1
00007e  4915              LDR      r1,|L6.212|
000080  6008              STR      r0,[r1,#0]
;;;120        SPI5_Handler.Instance=SPI5;                         //SP4
000082  4815              LDR      r0,|L6.216|
000084  4915              LDR      r1,|L6.220|
000086  6008              STR      r0,[r1,#0]  ; SPI5_Handler
;;;121        SPI5_Handler.Init.Mode=SPI_MODE_MASTER;             //设置SPI工作模式，设置为主模式
000088  f44f7082          MOV      r0,#0x104
00008c  6048              STR      r0,[r1,#4]  ; SPI5_Handler
;;;122        SPI5_Handler.Init.Direction=SPI_DIRECTION_2LINES;   //设置SPI单向或者双向的数据模式:SPI设置为双线模式
00008e  2100              MOVS     r1,#0
000090  4812              LDR      r0,|L6.220|
000092  6081              STR      r1,[r0,#8]
;;;123        SPI5_Handler.Init.DataSize=SPI_DATASIZE_8BIT;       //设置SPI的数据大小:SPI发送接收8位帧结构
000094  60c1              STR      r1,[r0,#0xc]
;;;124        SPI5_Handler.Init.CLKPolarity=SPI_POLARITY_HIGH;    //串行同步时钟的空闲状态为高电平
000096  2102              MOVS     r1,#2
000098  6101              STR      r1,[r0,#0x10]
;;;125        SPI5_Handler.Init.CLKPhase=SPI_PHASE_2EDGE;         //串行同步时钟的第二个跳变沿（上升或下降）数据被采样
00009a  2101              MOVS     r1,#1
00009c  6141              STR      r1,[r0,#0x14]
;;;126        SPI5_Handler.Init.NSS=SPI_NSS_SOFT;                 //NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制
00009e  0249              LSLS     r1,r1,#9
0000a0  6181              STR      r1,[r0,#0x18]
;;;127        SPI5_Handler.Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_8;//定义波特率预分频的值:波特率预分频值为256
0000a2  2110              MOVS     r1,#0x10
0000a4  61c1              STR      r1,[r0,#0x1c]
;;;128        SPI5_Handler.Init.FirstBit=SPI_FIRSTBIT_MSB;        //指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始
0000a6  2100              MOVS     r1,#0
0000a8  6201              STR      r1,[r0,#0x20]
;;;129        SPI5_Handler.Init.TIMode=SPI_TIMODE_DISABLE;        //关闭TI模式
0000aa  6241              STR      r1,[r0,#0x24]
;;;130        SPI5_Handler.Init.CRCCalculation=SPI_CRCCALCULATION_DISABLE;//关闭硬件CRC校验
0000ac  6281              STR      r1,[r0,#0x28]
;;;131        SPI5_Handler.Init.CRCPolynomial=10;                  //CRC值计算的多项式
0000ae  210a              MOVS     r1,#0xa
0000b0  62c1              STR      r1,[r0,#0x2c]
;;;132        HAL_SPI_Init(&SPI5_Handler);//初始化
0000b2  f7fffffe          BL       HAL_SPI_Init
;;;133        __HAL_SPI_ENABLE(&SPI5_Handler);                    //使能SPI5
0000b6  4809              LDR      r0,|L6.220|
0000b8  6800              LDR      r0,[r0,#0]  ; SPI5_Handler
0000ba  6800              LDR      r0,[r0,#0]
0000bc  f0400040          ORR      r0,r0,#0x40
0000c0  4906              LDR      r1,|L6.220|
0000c2  6809              LDR      r1,[r1,#0]  ; SPI5_Handler
0000c4  6008              STR      r0,[r1,#0]
;;;134    
;;;135    }
0000c6  b007              ADD      sp,sp,#0x1c
0000c8  bd00              POP      {pc}
;;;136    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L6.204|
                          DCD      0x40023830
                  |L6.208|
                          DCD      0x40021400
                  |L6.212|
                          DCD      0x42428298
                  |L6.216|
                          DCD      0x40015000
                  |L6.220|
                          DCD      SPI5_Handler

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  hspi1
                          %        88
                  SPI4_Handler
                          %        88
                  SPI5_Handler
                          %        88

;*** Start embedded assembler ***

#line 1 "Hardware\\SPI.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_SPI_c_4bc92386____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___5_SPI_c_4bc92386____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_SPI_c_4bc92386____REVSH|
#line 402
|__asm___5_SPI_c_4bc92386____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_SPI_c_4bc92386____RRX|
#line 587
|__asm___5_SPI_c_4bc92386____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
