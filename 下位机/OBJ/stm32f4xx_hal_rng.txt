; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_hal_rng.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm32f4xx_hal_rng.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm32f4xx_hal_rng.crf HALLIB\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rng.c]
                          THUMB

                          AREA ||i.HAL_RNG_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_RNG_DeInit PROC
;;;160      */
;;;161    HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
000000  b510              PUSH     {r4,lr}
;;;162    { 
000002  4604              MOV      r4,r0
;;;163      /* Check the RNG handle allocation */
;;;164      if(hrng == NULL)
000004  b90c              CBNZ     r4,|L1.10|
;;;165      {
;;;166        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L1.8|
;;;167      }
;;;168      /* Disable the RNG Peripheral */
;;;169      CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
;;;170      
;;;171      /* Clear RNG interrupt status flags */
;;;172      CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
;;;173      
;;;174      /* DeInit the low level hardware */
;;;175      HAL_RNG_MspDeInit(hrng);
;;;176      
;;;177      /* Update the RNG state */
;;;178      hrng->State = HAL_RNG_STATE_RESET; 
;;;179    
;;;180      /* Release Lock */
;;;181      __HAL_UNLOCK(hrng);
;;;182      
;;;183      /* Return the function status */
;;;184      return HAL_OK;
;;;185    }
000008  bd10              POP      {r4,pc}
                  |L1.10|
00000a  6820              LDR      r0,[r4,#0]            ;169
00000c  6800              LDR      r0,[r0,#0]            ;169
00000e  f020000c          BIC      r0,r0,#0xc            ;169
000012  6821              LDR      r1,[r4,#0]            ;169
000014  6008              STR      r0,[r1,#0]            ;169
000016  6820              LDR      r0,[r4,#0]            ;172
000018  6840              LDR      r0,[r0,#4]            ;172
00001a  f0200060          BIC      r0,r0,#0x60           ;172
00001e  6821              LDR      r1,[r4,#0]            ;172
000020  6048              STR      r0,[r1,#4]            ;172
000022  4620              MOV      r0,r4                 ;175
000024  f7fffffe          BL       HAL_RNG_MspDeInit
000028  2000              MOVS     r0,#0                 ;178
00002a  7160              STRB     r0,[r4,#5]            ;178
00002c  bf00              NOP                            ;181
00002e  7120              STRB     r0,[r4,#4]            ;181
000030  bf00              NOP                            ;181
000032  bf00              NOP                            ;184
000034  e7e8              B        |L1.8|
;;;186    
                          ENDP


                          AREA ||i.HAL_RNG_ErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_RNG_ErrorCallback PROC
;;;465      */
;;;466    __weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
000000  4770              BX       lr
;;;467    {
;;;468      /* Prevent unused argument(s) compilation warning */
;;;469      UNUSED(hrng);
;;;470      /* NOTE : This function should not be modified. When the callback is needed,
;;;471                function HAL_RNG_ErrorCallback must be implemented in the user file.
;;;472       */
;;;473    }
;;;474    /**
                          ENDP


                          AREA ||i.HAL_RNG_GenerateRandomNumber||, CODE, READONLY, ALIGN=1

                  HAL_RNG_GenerateRandomNumber PROC
;;;246    
;;;247    HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;248    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;249      uint32_t tickstart = 0;    
000008  2600              MOVS     r6,#0
;;;250      HAL_StatusTypeDef status = HAL_OK;
00000a  2700              MOVS     r7,#0
;;;251    
;;;252      /* Process Locked */
;;;253      __HAL_LOCK(hrng); 
00000c  bf00              NOP      
00000e  7920              LDRB     r0,[r4,#4]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L3.26|
000014  2002              MOVS     r0,#2
                  |L3.22|
;;;254      
;;;255      /* Check RNG peripheral state */
;;;256      if(hrng->State == HAL_RNG_STATE_READY)
;;;257      {
;;;258        /* Change RNG peripheral state */  
;;;259        hrng->State = HAL_RNG_STATE_BUSY;  
;;;260    
;;;261        /* Get tick */
;;;262        tickstart = HAL_GetTick();
;;;263      
;;;264        /* Check if data register contains valid random data */
;;;265        while(__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
;;;266        {
;;;267          if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
;;;268          {    
;;;269            hrng->State = HAL_RNG_STATE_ERROR;
;;;270    
;;;271            /* Process Unlocked */
;;;272            __HAL_UNLOCK(hrng);
;;;273          
;;;274            return HAL_TIMEOUT;
;;;275          } 
;;;276        }
;;;277      
;;;278        /* Get a 32bit Random number */
;;;279        hrng->RandomNumber = hrng->Instance->DR;
;;;280        *random32bit = hrng->RandomNumber;
;;;281      
;;;282        hrng->State = HAL_RNG_STATE_READY;
;;;283      }
;;;284      else
;;;285      {
;;;286        status = HAL_ERROR;
;;;287      }
;;;288      
;;;289      /* Process Unlocked */
;;;290      __HAL_UNLOCK(hrng);
;;;291      
;;;292      return status;
;;;293    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L3.26|
00001a  2001              MOVS     r0,#1                 ;253
00001c  7120              STRB     r0,[r4,#4]            ;253
00001e  bf00              NOP                            ;253
000020  7960              LDRB     r0,[r4,#5]            ;256
000022  2801              CMP      r0,#1                 ;256
000024  d120              BNE      |L3.104|
000026  2002              MOVS     r0,#2                 ;259
000028  7160              STRB     r0,[r4,#5]            ;259
00002a  f7fffffe          BL       HAL_GetTick
00002e  4606              MOV      r6,r0                 ;262
000030  e00c              B        |L3.76|
                  |L3.50|
000032  f7fffffe          BL       HAL_GetTick
000036  1b80              SUBS     r0,r0,r6              ;267
000038  2802              CMP      r0,#2                 ;267
00003a  d907              BLS      |L3.76|
00003c  2004              MOVS     r0,#4                 ;269
00003e  7160              STRB     r0,[r4,#5]            ;269
000040  bf00              NOP                            ;272
000042  2000              MOVS     r0,#0                 ;272
000044  7120              STRB     r0,[r4,#4]            ;272
000046  bf00              NOP                            ;272
000048  2003              MOVS     r0,#3                 ;274
00004a  e7e4              B        |L3.22|
                  |L3.76|
00004c  6820              LDR      r0,[r4,#0]            ;265
00004e  6840              LDR      r0,[r0,#4]            ;265
000050  f0000001          AND      r0,r0,#1              ;265
000054  2800              CMP      r0,#0                 ;265
000056  d0ec              BEQ      |L3.50|
000058  6820              LDR      r0,[r4,#0]            ;279
00005a  6880              LDR      r0,[r0,#8]            ;279
00005c  60a0              STR      r0,[r4,#8]            ;279
00005e  68a0              LDR      r0,[r4,#8]            ;280
000060  6028              STR      r0,[r5,#0]            ;280
000062  2001              MOVS     r0,#1                 ;282
000064  7160              STRB     r0,[r4,#5]            ;282
000066  e000              B        |L3.106|
                  |L3.104|
000068  2701              MOVS     r7,#1                 ;286
                  |L3.106|
00006a  bf00              NOP                            ;290
00006c  2000              MOVS     r0,#0                 ;290
00006e  7120              STRB     r0,[r4,#4]            ;290
000070  bf00              NOP                            ;290
000072  4638              MOV      r0,r7                 ;292
000074  e7cf              B        |L3.22|
;;;294    
                          ENDP


                          AREA ||i.HAL_RNG_GenerateRandomNumber_IT||, CODE, READONLY, ALIGN=1

                  HAL_RNG_GenerateRandomNumber_IT PROC
;;;300      */
;;;301    HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber_IT(RNG_HandleTypeDef *hrng)
000000  4601              MOV      r1,r0
;;;302    {
;;;303      HAL_StatusTypeDef status = HAL_OK;
000002  2200              MOVS     r2,#0
;;;304      
;;;305      /* Process Locked */
;;;306      __HAL_LOCK(hrng);
000004  bf00              NOP      
000006  7908              LDRB     r0,[r1,#4]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L4.16|
00000c  2002              MOVS     r0,#2
                  |L4.14|
;;;307      
;;;308      /* Check RNG peripheral state */
;;;309      if(hrng->State == HAL_RNG_STATE_READY)
;;;310      {
;;;311        /* Change RNG peripheral state */  
;;;312        hrng->State = HAL_RNG_STATE_BUSY;  
;;;313      
;;;314        /* Process Unlocked */
;;;315        __HAL_UNLOCK(hrng);
;;;316        
;;;317        /* Enable the RNG Interrupts: Data Ready, Clock error, Seed error */ 
;;;318        __HAL_RNG_ENABLE_IT(hrng);
;;;319      }
;;;320      else
;;;321      {
;;;322        /* Process Unlocked */
;;;323        __HAL_UNLOCK(hrng);
;;;324        
;;;325        status = HAL_ERROR;
;;;326      }
;;;327      
;;;328      return status;
;;;329    }
00000e  4770              BX       lr
                  |L4.16|
000010  2001              MOVS     r0,#1                 ;306
000012  7108              STRB     r0,[r1,#4]            ;306
000014  bf00              NOP                            ;306
000016  7948              LDRB     r0,[r1,#5]            ;309
000018  2801              CMP      r0,#1                 ;309
00001a  d10c              BNE      |L4.54|
00001c  2002              MOVS     r0,#2                 ;312
00001e  7148              STRB     r0,[r1,#5]            ;312
000020  bf00              NOP                            ;315
000022  2000              MOVS     r0,#0                 ;315
000024  7108              STRB     r0,[r1,#4]            ;315
000026  bf00              NOP                            ;315
000028  6808              LDR      r0,[r1,#0]            ;318
00002a  6800              LDR      r0,[r0,#0]            ;318
00002c  f0400008          ORR      r0,r0,#8              ;318
000030  680b              LDR      r3,[r1,#0]            ;318
000032  6018              STR      r0,[r3,#0]            ;318
000034  e004              B        |L4.64|
                  |L4.54|
000036  bf00              NOP                            ;323
000038  2000              MOVS     r0,#0                 ;323
00003a  7108              STRB     r0,[r1,#4]            ;323
00003c  bf00              NOP                            ;323
00003e  2201              MOVS     r2,#1                 ;325
                  |L4.64|
000040  4610              MOV      r0,r2                 ;328
000042  e7e4              B        |L4.14|
;;;330    
                          ENDP


                          AREA ||i.HAL_RNG_GetRandomNumber||, CODE, READONLY, ALIGN=1

                  HAL_RNG_GetRandomNumber PROC
;;;393      */
;;;394    uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
000000  b510              PUSH     {r4,lr}
;;;395    {
000002  4604              MOV      r4,r0
;;;396      if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
000004  f1040108          ADD      r1,r4,#8
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       HAL_RNG_GenerateRandomNumber
00000e  b908              CBNZ     r0,|L5.20|
;;;397      {
;;;398        return hrng->RandomNumber; 
000010  68a0              LDR      r0,[r4,#8]
                  |L5.18|
;;;399      }
;;;400      else
;;;401      {
;;;402        return 0;
;;;403      }
;;;404    }
000012  bd10              POP      {r4,pc}
                  |L5.20|
000014  2000              MOVS     r0,#0                 ;402
000016  e7fc              B        |L5.18|
;;;405    
                          ENDP


                          AREA ||i.HAL_RNG_GetRandomNumber_IT||, CODE, READONLY, ALIGN=1

                  HAL_RNG_GetRandomNumber_IT PROC
;;;412      */
;;;413    uint32_t HAL_RNG_GetRandomNumber_IT(RNG_HandleTypeDef *hrng)
000000  4601              MOV      r1,r0
;;;414    {
;;;415      uint32_t random32bit = 0;
000002  2200              MOVS     r2,#0
;;;416      
;;;417      /* Process locked */
;;;418      __HAL_LOCK(hrng);
000004  bf00              NOP      
000006  7908              LDRB     r0,[r1,#4]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L6.16|
00000c  2002              MOVS     r0,#2
                  |L6.14|
;;;419      
;;;420      /* Change RNG peripheral state */  
;;;421      hrng->State = HAL_RNG_STATE_BUSY;  
;;;422      
;;;423      /* Get a 32bit Random number */ 
;;;424      random32bit = hrng->Instance->DR;
;;;425      
;;;426      /* Enable the RNG Interrupts: Data Ready, Clock error, Seed error */ 
;;;427      __HAL_RNG_ENABLE_IT(hrng); 
;;;428      
;;;429      /* Return the 32 bit random number */   
;;;430      return random32bit;
;;;431    }
00000e  4770              BX       lr
                  |L6.16|
000010  2001              MOVS     r0,#1                 ;418
000012  7108              STRB     r0,[r1,#4]            ;418
000014  bf00              NOP                            ;418
000016  2002              MOVS     r0,#2                 ;421
000018  7148              STRB     r0,[r1,#5]            ;421
00001a  6808              LDR      r0,[r1,#0]            ;424
00001c  6882              LDR      r2,[r0,#8]            ;424
00001e  6808              LDR      r0,[r1,#0]            ;427
000020  6800              LDR      r0,[r0,#0]            ;427
000022  f0400008          ORR      r0,r0,#8              ;427
000026  680b              LDR      r3,[r1,#0]            ;427
000028  6018              STR      r0,[r3,#0]            ;427
00002a  4610              MOV      r0,r2                 ;430
00002c  e7ef              B        |L6.14|
;;;432    
                          ENDP


                          AREA ||i.HAL_RNG_GetState||, CODE, READONLY, ALIGN=1

                  HAL_RNG_GetState PROC
;;;499      */
;;;500    HAL_RNG_StateTypeDef HAL_RNG_GetState(RNG_HandleTypeDef *hrng)
000000  4601              MOV      r1,r0
;;;501    {
;;;502      return hrng->State;
000002  7948              LDRB     r0,[r1,#5]
;;;503    }
000004  4770              BX       lr
;;;504    
                          ENDP


                          AREA ||i.HAL_RNG_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_RNG_IRQHandler PROC
;;;351      */
;;;352    void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
000000  b510              PUSH     {r4,lr}
;;;353    {
000002  4604              MOV      r4,r0
;;;354      /* RNG clock error interrupt occurred */
;;;355      if((__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET) ||  (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET))
000004  6820              LDR      r0,[r4,#0]
000006  6840              LDR      r0,[r0,#4]
000008  f3c01040          UBFX     r0,r0,#5,#1
00000c  b920              CBNZ     r0,|L8.24|
00000e  6820              LDR      r0,[r4,#0]
000010  6840              LDR      r0,[r0,#4]
000012  f3c01080          UBFX     r0,r0,#6,#1
000016  b140              CBZ      r0,|L8.42|
                  |L8.24|
;;;356      { 
;;;357        /* Change RNG peripheral state */
;;;358        hrng->State = HAL_RNG_STATE_ERROR;
000018  2004              MOVS     r0,#4
00001a  7160              STRB     r0,[r4,#5]
;;;359      
;;;360        HAL_RNG_ErrorCallback(hrng);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       HAL_RNG_ErrorCallback
;;;361        
;;;362        /* Clear the clock error flag */
;;;363        __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI|RNG_IT_SEI);
000022  f06f0060          MVN      r0,#0x60
000026  6821              LDR      r1,[r4,#0]
000028  6048              STR      r0,[r1,#4]
                  |L8.42|
;;;364        
;;;365      }
;;;366      
;;;367      /* Check RNG data ready interrupt occurred */    
;;;368      if(__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
00002a  6820              LDR      r0,[r4,#0]
00002c  6840              LDR      r0,[r0,#4]
00002e  f0000001          AND      r0,r0,#1
000032  b188              CBZ      r0,|L8.88|
;;;369      {
;;;370        /* Generate random number once, so disable the IT */
;;;371        __HAL_RNG_DISABLE_IT(hrng);
000034  6820              LDR      r0,[r4,#0]
000036  6800              LDR      r0,[r0,#0]
000038  f0200008          BIC      r0,r0,#8
00003c  6821              LDR      r1,[r4,#0]
00003e  6008              STR      r0,[r1,#0]
;;;372        
;;;373        /* Get the 32bit Random number (DRDY flag automatically cleared) */ 
;;;374        hrng->RandomNumber = hrng->Instance->DR;
000040  6820              LDR      r0,[r4,#0]
000042  6880              LDR      r0,[r0,#8]
000044  60a0              STR      r0,[r4,#8]
;;;375        
;;;376        if(hrng->State != HAL_RNG_STATE_ERROR)
000046  7960              LDRB     r0,[r4,#5]
000048  2804              CMP      r0,#4
00004a  d005              BEQ      |L8.88|
;;;377        {
;;;378          /* Change RNG peripheral state */
;;;379          hrng->State = HAL_RNG_STATE_READY; 
00004c  2001              MOVS     r0,#1
00004e  7160              STRB     r0,[r4,#5]
;;;380          
;;;381          /* Data Ready callback */ 
;;;382          HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
000050  4620              MOV      r0,r4
000052  68a1              LDR      r1,[r4,#8]
000054  f7fffffe          BL       HAL_RNG_ReadyDataCallback
                  |L8.88|
;;;383        } 
;;;384      }
;;;385    } 
000058  bd10              POP      {r4,pc}
;;;386    
                          ENDP


                          AREA ||i.HAL_RNG_Init||, CODE, READONLY, ALIGN=1

                  HAL_RNG_Init PROC
;;;121      */
;;;122    HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
000000  b510              PUSH     {r4,lr}
;;;123    { 
000002  4604              MOV      r4,r0
;;;124      /* Check the RNG handle allocation */
;;;125      if(hrng == NULL)
000004  b90c              CBNZ     r4,|L9.10|
;;;126      {
;;;127        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L9.8|
;;;128      }
;;;129      
;;;130      __HAL_LOCK(hrng);
;;;131      
;;;132      if(hrng->State == HAL_RNG_STATE_RESET)
;;;133      {  
;;;134        /* Allocate lock resource and initialize it */
;;;135        hrng->Lock = HAL_UNLOCKED;
;;;136        /* Init the low level hardware */
;;;137        HAL_RNG_MspInit(hrng);
;;;138      }
;;;139      
;;;140      /* Change RNG peripheral state */
;;;141      hrng->State = HAL_RNG_STATE_BUSY;
;;;142    
;;;143      /* Enable the RNG Peripheral */
;;;144      __HAL_RNG_ENABLE(hrng);
;;;145    
;;;146      /* Initialize the RNG state */
;;;147      hrng->State = HAL_RNG_STATE_READY;
;;;148      
;;;149      __HAL_UNLOCK(hrng);
;;;150      
;;;151      /* Return function status */
;;;152      return HAL_OK;
;;;153    }
000008  bd10              POP      {r4,pc}
                  |L9.10|
00000a  bf00              NOP                            ;130
00000c  7920              LDRB     r0,[r4,#4]            ;130
00000e  2801              CMP      r0,#1                 ;130
000010  d101              BNE      |L9.22|
000012  2002              MOVS     r0,#2                 ;130
000014  e7f8              B        |L9.8|
                  |L9.22|
000016  2001              MOVS     r0,#1                 ;130
000018  7120              STRB     r0,[r4,#4]            ;130
00001a  bf00              NOP                            ;130
00001c  7960              LDRB     r0,[r4,#5]            ;132
00001e  b920              CBNZ     r0,|L9.42|
000020  2000              MOVS     r0,#0                 ;135
000022  7120              STRB     r0,[r4,#4]            ;135
000024  4620              MOV      r0,r4                 ;137
000026  f7fffffe          BL       HAL_RNG_MspInit
                  |L9.42|
00002a  2002              MOVS     r0,#2                 ;141
00002c  7160              STRB     r0,[r4,#5]            ;141
00002e  6820              LDR      r0,[r4,#0]            ;144
000030  6800              LDR      r0,[r0,#0]            ;144
000032  f0400004          ORR      r0,r0,#4              ;144
000036  6821              LDR      r1,[r4,#0]            ;144
000038  6008              STR      r0,[r1,#0]            ;144
00003a  2001              MOVS     r0,#1                 ;147
00003c  7160              STRB     r0,[r4,#5]            ;147
00003e  bf00              NOP                            ;149
000040  2000              MOVS     r0,#0                 ;149
000042  7120              STRB     r0,[r4,#4]            ;149
000044  bf00              NOP                            ;149
000046  bf00              NOP                            ;152
000048  e7de              B        |L9.8|
;;;154    
                          ENDP


                          AREA ||i.HAL_RNG_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_RNG_MspDeInit PROC
;;;207      */
;;;208    __weak void HAL_RNG_MspDeInit(RNG_HandleTypeDef *hrng)
000000  4770              BX       lr
;;;209    {
;;;210      /* Prevent unused argument(s) compilation warning */
;;;211      UNUSED(hrng);
;;;212      /* NOTE : This function should not be modified. When the callback is needed,
;;;213                function HAL_RNG_MspDeInit must be implemented in the user file.
;;;214       */
;;;215    }
;;;216    
                          ENDP


                          AREA ||i.HAL_RNG_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_RNG_MspInit PROC
;;;192      */
;;;193    __weak void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
000000  4770              BX       lr
;;;194    {
;;;195      /* Prevent unused argument(s) compilation warning */
;;;196      UNUSED(hrng);
;;;197      /* NOTE : This function should not be modified. When the callback is needed,
;;;198                function HAL_RNG_MspInit must be implemented in the user file.
;;;199       */
;;;200    }
;;;201    
                          ENDP


                          AREA ||i.HAL_RNG_ReadLastRandomNumber||, CODE, READONLY, ALIGN=1

                  HAL_RNG_ReadLastRandomNumber PROC
;;;438      */
;;;439    uint32_t HAL_RNG_ReadLastRandomNumber(RNG_HandleTypeDef *hrng)
000000  4601              MOV      r1,r0
;;;440    {
;;;441      return(hrng->RandomNumber);
000002  6888              LDR      r0,[r1,#8]
;;;442    }
000004  4770              BX       lr
;;;443    
                          ENDP


                          AREA ||i.HAL_RNG_ReadyDataCallback||, CODE, READONLY, ALIGN=1

                  HAL_RNG_ReadyDataCallback PROC
;;;450      */
;;;451    __weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
000000  4770              BX       lr
;;;452    {
;;;453      /* Prevent unused argument(s) compilation warning */
;;;454      UNUSED(hrng);
;;;455      /* NOTE : This function should not be modified. When the callback is needed,
;;;456                function HAL_RNG_ReadyDataCallback must be implemented in the user file.
;;;457       */
;;;458    }
;;;459    
                          ENDP


;*** Start embedded assembler ***

#line 1 "HALLIB\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_rng.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rng_c_9f3aa4c0____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___19_stm32f4xx_hal_rng_c_9f3aa4c0____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rng_c_9f3aa4c0____REVSH|
#line 402
|__asm___19_stm32f4xx_hal_rng_c_9f3aa4c0____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rng_c_9f3aa4c0____RRX|
#line 587
|__asm___19_stm32f4xx_hal_rng_c_9f3aa4c0____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
