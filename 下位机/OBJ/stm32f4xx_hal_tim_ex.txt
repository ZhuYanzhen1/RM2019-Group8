; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_hal_tim_ex.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm32f4xx_hal_tim_ex.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm32f4xx_hal_tim_ex.crf HALLIB\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_tim_ex.c]
                          THUMB

                          AREA ||i.HAL_TIMEx_BreakCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_BreakCallback PROC
;;;1771     */
;;;1772   __weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1773   {
;;;1774     /* Prevent unused argument(s) compilation warning */
;;;1775     UNUSED(htim);
;;;1776     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1777               the HAL_TIMEx_BreakCallback could be implemented in the user file
;;;1778      */
;;;1779   }
;;;1780   /**
                          ENDP


                          AREA ||i.HAL_TIMEx_CommutationCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_CommutationCallback PROC
;;;1756     */
;;;1757   __weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1758   {
;;;1759     /* Prevent unused argument(s) compilation warning */
;;;1760     UNUSED(htim);
;;;1761     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1762               the HAL_TIMEx_CommutationCallback could be implemented in the user file
;;;1763      */
;;;1764   }
;;;1765   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigBreakDeadTime||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigBreakDeadTime PROC
;;;1657     */    
;;;1658   HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
000000  4602              MOV      r2,r0
;;;1659                                                 TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
;;;1660   {
;;;1661     /* Check the parameters */
;;;1662     assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;1663     assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
;;;1664     assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
;;;1665     assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
;;;1666     assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
;;;1667     assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
;;;1668     assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
;;;1669     assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
;;;1670     
;;;1671     /* Process Locked */
;;;1672     __HAL_LOCK(htim);
000002  bf00              NOP      
000004  f8920038          LDRB     r0,[r2,#0x38]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L3.16|
00000c  2002              MOVS     r0,#2
                  |L3.14|
;;;1673     
;;;1674     htim->State = HAL_TIM_STATE_BUSY;
;;;1675   
;;;1676     /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
;;;1677        the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;1678     htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  | 
;;;1679                                      sBreakDeadTimeConfig->OffStateIDLEMode |
;;;1680                                      sBreakDeadTimeConfig->LockLevel        |
;;;1681                                      sBreakDeadTimeConfig->DeadTime         |
;;;1682                                      sBreakDeadTimeConfig->BreakState       |
;;;1683                                      sBreakDeadTimeConfig->BreakPolarity    |
;;;1684                                      sBreakDeadTimeConfig->AutomaticOutput;
;;;1685     
;;;1686                                      
;;;1687     htim->State = HAL_TIM_STATE_READY;                                 
;;;1688     
;;;1689     __HAL_UNLOCK(htim);
;;;1690     
;;;1691     return HAL_OK;
;;;1692   }
00000e  4770              BX       lr
                  |L3.16|
000010  2001              MOVS     r0,#1                 ;1672
000012  f8820038          STRB     r0,[r2,#0x38]         ;1672
000016  bf00              NOP                            ;1672
000018  2002              MOVS     r0,#2                 ;1674
00001a  f8820039          STRB     r0,[r2,#0x39]         ;1674
00001e  e9d10300          LDRD     r0,r3,[r1,#0]         ;1678
000022  4318              ORRS     r0,r0,r3              ;1678
000024  688b              LDR      r3,[r1,#8]            ;1678
000026  4318              ORRS     r0,r0,r3              ;1678
000028  68cb              LDR      r3,[r1,#0xc]          ;1678
00002a  4318              ORRS     r0,r0,r3              ;1678
00002c  690b              LDR      r3,[r1,#0x10]         ;1678
00002e  4318              ORRS     r0,r0,r3              ;1678
000030  694b              LDR      r3,[r1,#0x14]         ;1678
000032  4318              ORRS     r0,r0,r3              ;1678
000034  698b              LDR      r3,[r1,#0x18]         ;1678
000036  4318              ORRS     r0,r0,r3              ;1678
000038  6813              LDR      r3,[r2,#0]            ;1678
00003a  6458              STR      r0,[r3,#0x44]         ;1678
00003c  2001              MOVS     r0,#1                 ;1687
00003e  f8820039          STRB     r0,[r2,#0x39]         ;1687
000042  bf00              NOP                            ;1689
000044  2000              MOVS     r0,#0                 ;1689
000046  f8820038          STRB     r0,[r2,#0x38]         ;1689
00004a  bf00              NOP                            ;1689
00004c  bf00              NOP                            ;1691
00004e  e7de              B        |L3.14|
;;;1693   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent PROC
;;;1471     */
;;;1472   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  b510              PUSH     {r4,lr}
;;;1473   {
000002  4603              MOV      r3,r0
;;;1474     /* Check the parameters */
;;;1475     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1476     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1477     
;;;1478     __HAL_LOCK(htim);
000004  bf00              NOP      
000006  f8930038          LDRB     r0,[r3,#0x38]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L4.18|
00000e  2002              MOVS     r0,#2
                  |L4.16|
;;;1479     
;;;1480     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1481         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1482     {    
;;;1483       /* Select the Input trigger */
;;;1484       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1485       htim->Instance->SMCR |= InputTrigger;
;;;1486     }
;;;1487       
;;;1488     /* Select the Capture Compare preload feature */
;;;1489     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1490     /* Select the Commutation event source */
;;;1491     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1492     htim->Instance->CR2 |= CommutationSource;
;;;1493       
;;;1494     __HAL_UNLOCK(htim);
;;;1495     
;;;1496     return HAL_OK;
;;;1497   }
000010  bd10              POP      {r4,pc}
                  |L4.18|
000012  2001              MOVS     r0,#1                 ;1478
000014  f8830038          STRB     r0,[r3,#0x38]         ;1478
000018  bf00              NOP                            ;1478
00001a  b129              CBZ      r1,|L4.40|
00001c  2910              CMP      r1,#0x10              ;1480
00001e  d003              BEQ      |L4.40|
000020  2920              CMP      r1,#0x20              ;1481
000022  d001              BEQ      |L4.40|
000024  2930              CMP      r1,#0x30              ;1481
000026  d10a              BNE      |L4.62|
                  |L4.40|
000028  6818              LDR      r0,[r3,#0]            ;1484
00002a  6880              LDR      r0,[r0,#8]            ;1484
00002c  f0200070          BIC      r0,r0,#0x70           ;1484
000030  681c              LDR      r4,[r3,#0]            ;1484
000032  60a0              STR      r0,[r4,#8]            ;1484
000034  6818              LDR      r0,[r3,#0]            ;1485
000036  6880              LDR      r0,[r0,#8]            ;1485
000038  4308              ORRS     r0,r0,r1              ;1485
00003a  681c              LDR      r4,[r3,#0]            ;1485
00003c  60a0              STR      r0,[r4,#8]            ;1485
                  |L4.62|
00003e  6818              LDR      r0,[r3,#0]            ;1489
000040  6840              LDR      r0,[r0,#4]            ;1489
000042  f0400001          ORR      r0,r0,#1              ;1489
000046  681c              LDR      r4,[r3,#0]            ;1489
000048  6060              STR      r0,[r4,#4]            ;1489
00004a  6818              LDR      r0,[r3,#0]            ;1491
00004c  6840              LDR      r0,[r0,#4]            ;1491
00004e  f0200004          BIC      r0,r0,#4              ;1491
000052  681c              LDR      r4,[r3,#0]            ;1491
000054  6060              STR      r0,[r4,#4]            ;1491
000056  6818              LDR      r0,[r3,#0]            ;1492
000058  6840              LDR      r0,[r0,#4]            ;1492
00005a  4310              ORRS     r0,r0,r2              ;1492
00005c  681c              LDR      r4,[r3,#0]            ;1492
00005e  6060              STR      r0,[r4,#4]            ;1492
000060  bf00              NOP                            ;1494
000062  2000              MOVS     r0,#0                 ;1494
000064  f8830038          STRB     r0,[r3,#0x38]         ;1494
000068  bf00              NOP                            ;1494
00006a  bf00              NOP                            ;1496
00006c  e7d0              B        |L4.16|
;;;1498   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_ConfigCommutationEvent_DMA PROC
;;;1575     */
;;;1576   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  b510              PUSH     {r4,lr}
;;;1577   {
000002  4603              MOV      r3,r0
;;;1578     /* Check the parameters */
;;;1579     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1580     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1581     
;;;1582     __HAL_LOCK(htim);
000004  bf00              NOP      
000006  f8930038          LDRB     r0,[r3,#0x38]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L5.18|
00000e  2002              MOVS     r0,#2
                  |L5.16|
;;;1583     
;;;1584     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1585         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1586     {    
;;;1587       /* Select the Input trigger */
;;;1588       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1589       htim->Instance->SMCR |= InputTrigger;
;;;1590     }
;;;1591     
;;;1592     /* Select the Capture Compare preload feature */
;;;1593     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1594     /* Select the Commutation event source */
;;;1595     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1596     htim->Instance->CR2 |= CommutationSource;
;;;1597     
;;;1598     /* Enable the Commutation DMA Request */
;;;1599     /* Set the DMA Commutation Callback */
;;;1600     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;     
;;;1601     /* Set the DMA error callback */
;;;1602     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
;;;1603     
;;;1604     /* Enable the Commutation DMA Request */
;;;1605     __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
;;;1606   
;;;1607     __HAL_UNLOCK(htim);
;;;1608     
;;;1609     return HAL_OK;
;;;1610   }
000010  bd10              POP      {r4,pc}
                  |L5.18|
000012  2001              MOVS     r0,#1                 ;1582
000014  f8830038          STRB     r0,[r3,#0x38]         ;1582
000018  bf00              NOP                            ;1582
00001a  b129              CBZ      r1,|L5.40|
00001c  2910              CMP      r1,#0x10              ;1584
00001e  d003              BEQ      |L5.40|
000020  2920              CMP      r1,#0x20              ;1585
000022  d001              BEQ      |L5.40|
000024  2930              CMP      r1,#0x30              ;1585
000026  d10a              BNE      |L5.62|
                  |L5.40|
000028  6818              LDR      r0,[r3,#0]            ;1588
00002a  6880              LDR      r0,[r0,#8]            ;1588
00002c  f0200070          BIC      r0,r0,#0x70           ;1588
000030  681c              LDR      r4,[r3,#0]            ;1588
000032  60a0              STR      r0,[r4,#8]            ;1588
000034  6818              LDR      r0,[r3,#0]            ;1589
000036  6880              LDR      r0,[r0,#8]            ;1589
000038  4308              ORRS     r0,r0,r1              ;1589
00003a  681c              LDR      r4,[r3,#0]            ;1589
00003c  60a0              STR      r0,[r4,#8]            ;1589
                  |L5.62|
00003e  6818              LDR      r0,[r3,#0]            ;1593
000040  6840              LDR      r0,[r0,#4]            ;1593
000042  f0400001          ORR      r0,r0,#1              ;1593
000046  681c              LDR      r4,[r3,#0]            ;1593
000048  6060              STR      r0,[r4,#4]            ;1593
00004a  6818              LDR      r0,[r3,#0]            ;1595
00004c  6840              LDR      r0,[r0,#4]            ;1595
00004e  f0200004          BIC      r0,r0,#4              ;1595
000052  681c              LDR      r4,[r3,#0]            ;1595
000054  6060              STR      r0,[r4,#4]            ;1595
000056  6818              LDR      r0,[r3,#0]            ;1596
000058  6840              LDR      r0,[r0,#4]            ;1596
00005a  4310              ORRS     r0,r0,r2              ;1596
00005c  681c              LDR      r4,[r3,#0]            ;1596
00005e  6060              STR      r0,[r4,#4]            ;1596
000060  4c09              LDR      r4,|L5.136|
000062  6b18              LDR      r0,[r3,#0x30]         ;1600
000064  63c4              STR      r4,[r0,#0x3c]         ;1600
000066  4c09              LDR      r4,|L5.140|
000068  6b18              LDR      r0,[r3,#0x30]         ;1602
00006a  6484              STR      r4,[r0,#0x48]         ;1602
00006c  6818              LDR      r0,[r3,#0]            ;1605
00006e  68c0              LDR      r0,[r0,#0xc]          ;1605
000070  f4405000          ORR      r0,r0,#0x2000         ;1605
000074  681c              LDR      r4,[r3,#0]            ;1605
000076  60e0              STR      r0,[r4,#0xc]          ;1605
000078  bf00              NOP                            ;1607
00007a  2000              MOVS     r0,#0                 ;1607
00007c  f8830038          STRB     r0,[r3,#0x38]         ;1607
000080  bf00              NOP                            ;1607
000082  bf00              NOP                            ;1609
000084  e7c4              B        |L5.16|
;;;1611   
                          ENDP

000086  0000              DCW      0x0000
                  |L5.136|
                          DCD      TIMEx_DMACommutationCplt
                  |L5.140|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_ConfigCommutationEvent_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutationEvent_IT PROC
;;;1521     */
;;;1522   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
000000  b510              PUSH     {r4,lr}
;;;1523   {
000002  4603              MOV      r3,r0
;;;1524     /* Check the parameters */
;;;1525     assert_param(IS_TIM_ADVANCED_INSTANCE(htim->Instance));
;;;1526     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1527     
;;;1528     __HAL_LOCK(htim);
000004  bf00              NOP      
000006  f8930038          LDRB     r0,[r3,#0x38]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L6.18|
00000e  2002              MOVS     r0,#2
                  |L6.16|
;;;1529     
;;;1530     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1531         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1532     {    
;;;1533       /* Select the Input trigger */
;;;1534       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1535       htim->Instance->SMCR |= InputTrigger;
;;;1536     }
;;;1537     
;;;1538     /* Select the Capture Compare preload feature */
;;;1539     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1540     /* Select the Commutation event source */
;;;1541     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1542     htim->Instance->CR2 |= CommutationSource;
;;;1543       
;;;1544     /* Enable the Commutation Interrupt Request */
;;;1545     __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
;;;1546   
;;;1547     __HAL_UNLOCK(htim);
;;;1548     
;;;1549     return HAL_OK;
;;;1550   }
000010  bd10              POP      {r4,pc}
                  |L6.18|
000012  2001              MOVS     r0,#1                 ;1528
000014  f8830038          STRB     r0,[r3,#0x38]         ;1528
000018  bf00              NOP                            ;1528
00001a  b129              CBZ      r1,|L6.40|
00001c  2910              CMP      r1,#0x10              ;1530
00001e  d003              BEQ      |L6.40|
000020  2920              CMP      r1,#0x20              ;1531
000022  d001              BEQ      |L6.40|
000024  2930              CMP      r1,#0x30              ;1531
000026  d10a              BNE      |L6.62|
                  |L6.40|
000028  6818              LDR      r0,[r3,#0]            ;1534
00002a  6880              LDR      r0,[r0,#8]            ;1534
00002c  f0200070          BIC      r0,r0,#0x70           ;1534
000030  681c              LDR      r4,[r3,#0]            ;1534
000032  60a0              STR      r0,[r4,#8]            ;1534
000034  6818              LDR      r0,[r3,#0]            ;1535
000036  6880              LDR      r0,[r0,#8]            ;1535
000038  4308              ORRS     r0,r0,r1              ;1535
00003a  681c              LDR      r4,[r3,#0]            ;1535
00003c  60a0              STR      r0,[r4,#8]            ;1535
                  |L6.62|
00003e  6818              LDR      r0,[r3,#0]            ;1539
000040  6840              LDR      r0,[r0,#4]            ;1539
000042  f0400001          ORR      r0,r0,#1              ;1539
000046  681c              LDR      r4,[r3,#0]            ;1539
000048  6060              STR      r0,[r4,#4]            ;1539
00004a  6818              LDR      r0,[r3,#0]            ;1541
00004c  6840              LDR      r0,[r0,#4]            ;1541
00004e  f0200004          BIC      r0,r0,#4              ;1541
000052  681c              LDR      r4,[r3,#0]            ;1541
000054  6060              STR      r0,[r4,#4]            ;1541
000056  6818              LDR      r0,[r3,#0]            ;1542
000058  6840              LDR      r0,[r0,#4]            ;1542
00005a  4310              ORRS     r0,r0,r2              ;1542
00005c  681c              LDR      r4,[r3,#0]            ;1542
00005e  6060              STR      r0,[r4,#4]            ;1542
000060  6818              LDR      r0,[r3,#0]            ;1545
000062  68c0              LDR      r0,[r0,#0xc]          ;1545
000064  f0400020          ORR      r0,r0,#0x20           ;1545
000068  681c              LDR      r4,[r3,#0]            ;1545
00006a  60e0              STR      r0,[r4,#0xc]          ;1545
00006c  bf00              NOP                            ;1547
00006e  2000              MOVS     r0,#0                 ;1547
000070  f8830038          STRB     r0,[r3,#0x38]         ;1547
000074  bf00              NOP                            ;1547
000076  bf00              NOP                            ;1549
000078  e7ca              B        |L6.16|
;;;1551   
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_DeInit PROC
;;;231      */
;;;232    HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;233    {
000002  4604              MOV      r4,r0
;;;234      /* Check the parameters */
;;;235      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;236    
;;;237      htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  f8840039          STRB     r0,[r4,#0x39]
;;;238      
;;;239      /* Disable the TIM Peripheral Clock */
;;;240      __HAL_TIM_DISABLE(htim);
00000a  bf00              NOP      
00000c  6820              LDR      r0,[r4,#0]
00000e  6a00              LDR      r0,[r0,#0x20]
000010  f2411111          MOV      r1,#0x1111
000014  4008              ANDS     r0,r0,r1
000016  b950              CBNZ     r0,|L7.46|
000018  6820              LDR      r0,[r4,#0]
00001a  6a00              LDR      r0,[r0,#0x20]
00001c  1089              ASRS     r1,r1,#2
00001e  4008              ANDS     r0,r0,r1
000020  b928              CBNZ     r0,|L7.46|
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  f0200001          BIC      r0,r0,#1
00002a  6821              LDR      r1,[r4,#0]
00002c  6008              STR      r0,[r1,#0]
                  |L7.46|
00002e  bf00              NOP      
;;;241        
;;;242      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;243      HAL_TIMEx_HallSensor_MspDeInit(htim);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       HAL_TIMEx_HallSensor_MspDeInit
;;;244        
;;;245      /* Change TIM state */  
;;;246      htim->State = HAL_TIM_STATE_RESET; 
000036  2000              MOVS     r0,#0
000038  f8840039          STRB     r0,[r4,#0x39]
;;;247    
;;;248      /* Release Lock */
;;;249      __HAL_UNLOCK(htim);
00003c  bf00              NOP      
00003e  f8840038          STRB     r0,[r4,#0x38]
000042  bf00              NOP      
;;;250    
;;;251      return HAL_OK;
;;;252    }
000044  bd10              POP      {r4,pc}
;;;253    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_GetState PROC
;;;1804     */
;;;1805   HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;1806   {
;;;1807     return htim->State;
000002  f8910039          LDRB     r0,[r1,#0x39]
;;;1808   }
000006  4770              BX       lr
;;;1809   
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Init PROC
;;;158      */
;;;159    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
000000  b530              PUSH     {r4,r5,lr}
;;;160    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;161      TIM_OC_InitTypeDef OC_Config;
;;;162        
;;;163      /* Check the TIM handle allocation */
;;;164      if(htim == NULL)
000008  b914              CBNZ     r4,|L9.16|
;;;165      {
;;;166        return HAL_ERROR;
00000a  2001              MOVS     r0,#1
                  |L9.12|
;;;167      }
;;;168      
;;;169      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;170      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;171      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;172      assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
;;;173      assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
;;;174      assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
;;;175    
;;;176      /* Set the TIM state */
;;;177      htim->State= HAL_TIM_STATE_BUSY;
;;;178      
;;;179      /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;180      HAL_TIMEx_HallSensor_MspInit(htim);
;;;181      
;;;182      /* Configure the Time base in the Encoder Mode */
;;;183      TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;184      
;;;185      /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
;;;186      TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
;;;187      
;;;188      /* Reset the IC1PSC Bits */
;;;189      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;190      /* Set the IC1PSC value */
;;;191      htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
;;;192      
;;;193      /* Enable the Hall sensor interface (XOR function of the three inputs) */
;;;194      htim->Instance->CR2 |= TIM_CR2_TI1S;
;;;195      
;;;196      /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
;;;197      htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;198      htim->Instance->SMCR |= TIM_TS_TI1F_ED;
;;;199      
;;;200      /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */  
;;;201      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;202      htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
;;;203      
;;;204      /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
;;;205      OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
;;;206      OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
;;;207      OC_Config.OCMode = TIM_OCMODE_PWM2;
;;;208      OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
;;;209      OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
;;;210      OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
;;;211      OC_Config.Pulse = sConfig->Commutation_Delay; 
;;;212        
;;;213      TIM_OC2_SetConfig(htim->Instance, &OC_Config);
;;;214      
;;;215      /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
;;;216        register to 101 */
;;;217      htim->Instance->CR2 &= ~TIM_CR2_MMS;
;;;218      htim->Instance->CR2 |= TIM_TRGO_OC2REF; 
;;;219      
;;;220      /* Initialize the TIM state*/
;;;221      htim->State= HAL_TIM_STATE_READY;
;;;222    
;;;223      return HAL_OK;
;;;224    }
00000c  b007              ADD      sp,sp,#0x1c
00000e  bd30              POP      {r4,r5,pc}
                  |L9.16|
000010  2002              MOVS     r0,#2                 ;177
000012  f8840039          STRB     r0,[r4,#0x39]         ;177
000016  4620              MOV      r0,r4                 ;180
000018  f7fffffe          BL       HAL_TIMEx_HallSensor_MspInit
00001c  1d21              ADDS     r1,r4,#4              ;183
00001e  6820              LDR      r0,[r4,#0]            ;183
000020  f7fffffe          BL       TIM_Base_SetConfig
000024  68ab              LDR      r3,[r5,#8]            ;186
000026  6829              LDR      r1,[r5,#0]            ;186
000028  2203              MOVS     r2,#3                 ;186
00002a  6820              LDR      r0,[r4,#0]            ;186
00002c  f7fffffe          BL       TIM_TI1_SetConfig
000030  6820              LDR      r0,[r4,#0]            ;189
000032  6980              LDR      r0,[r0,#0x18]         ;189
000034  f020000c          BIC      r0,r0,#0xc            ;189
000038  6821              LDR      r1,[r4,#0]            ;189
00003a  6188              STR      r0,[r1,#0x18]         ;189
00003c  6820              LDR      r0,[r4,#0]            ;191
00003e  6980              LDR      r0,[r0,#0x18]         ;191
000040  6869              LDR      r1,[r5,#4]            ;191
000042  4308              ORRS     r0,r0,r1              ;191
000044  6821              LDR      r1,[r4,#0]            ;191
000046  6188              STR      r0,[r1,#0x18]         ;191
000048  6820              LDR      r0,[r4,#0]            ;194
00004a  6840              LDR      r0,[r0,#4]            ;194
00004c  f0400080          ORR      r0,r0,#0x80           ;194
000050  6821              LDR      r1,[r4,#0]            ;194
000052  6048              STR      r0,[r1,#4]            ;194
000054  6820              LDR      r0,[r4,#0]            ;197
000056  6880              LDR      r0,[r0,#8]            ;197
000058  f0200070          BIC      r0,r0,#0x70           ;197
00005c  6821              LDR      r1,[r4,#0]            ;197
00005e  6088              STR      r0,[r1,#8]            ;197
000060  6820              LDR      r0,[r4,#0]            ;198
000062  6880              LDR      r0,[r0,#8]            ;198
000064  f0400040          ORR      r0,r0,#0x40           ;198
000068  6821              LDR      r1,[r4,#0]            ;198
00006a  6088              STR      r0,[r1,#8]            ;198
00006c  6820              LDR      r0,[r4,#0]            ;201
00006e  6880              LDR      r0,[r0,#8]            ;201
000070  f0200007          BIC      r0,r0,#7              ;201
000074  6821              LDR      r1,[r4,#0]            ;201
000076  6088              STR      r0,[r1,#8]            ;201
000078  6820              LDR      r0,[r4,#0]            ;202
00007a  6880              LDR      r0,[r0,#8]            ;202
00007c  f0400004          ORR      r0,r0,#4              ;202
000080  6821              LDR      r1,[r4,#0]            ;202
000082  6088              STR      r0,[r1,#8]            ;202
000084  2000              MOVS     r0,#0                 ;205
000086  9004              STR      r0,[sp,#0x10]         ;205
000088  9005              STR      r0,[sp,#0x14]         ;206
00008a  2070              MOVS     r0,#0x70              ;207
00008c  9000              STR      r0,[sp,#0]            ;207
00008e  2000              MOVS     r0,#0                 ;208
000090  9006              STR      r0,[sp,#0x18]         ;208
000092  9003              STR      r0,[sp,#0xc]          ;209
000094  9002              STR      r0,[sp,#8]            ;210
000096  68e8              LDR      r0,[r5,#0xc]          ;211
000098  9001              STR      r0,[sp,#4]            ;211
00009a  4669              MOV      r1,sp                 ;213
00009c  6820              LDR      r0,[r4,#0]            ;213
00009e  f7fffffe          BL       TIM_OC2_SetConfig
0000a2  6820              LDR      r0,[r4,#0]            ;217
0000a4  6840              LDR      r0,[r0,#4]            ;217
0000a6  f0200070          BIC      r0,r0,#0x70           ;217
0000aa  6821              LDR      r1,[r4,#0]            ;217
0000ac  6048              STR      r0,[r1,#4]            ;217
0000ae  6820              LDR      r0,[r4,#0]            ;218
0000b0  6840              LDR      r0,[r0,#4]            ;218
0000b2  f0400050          ORR      r0,r0,#0x50           ;218
0000b6  6821              LDR      r1,[r4,#0]            ;218
0000b8  6048              STR      r0,[r1,#4]            ;218
0000ba  2001              MOVS     r0,#1                 ;221
0000bc  f8840039          STRB     r0,[r4,#0x39]         ;221
0000c0  2000              MOVS     r0,#0                 ;223
0000c2  e7a3              B        |L9.12|
;;;225    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspDeInit PROC
;;;274      */
;;;275    __weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;276    {
;;;277      /* Prevent unused argument(s) compilation warning */
;;;278      UNUSED(htim);
;;;279      /* NOTE : This function Should not be modified, when the callback is needed,
;;;280                the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
;;;281       */
;;;282    }
;;;283    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspInit PROC
;;;259      */
;;;260    __weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;261    {
;;;262      /* Prevent unused argument(s) compilation warning */
;;;263      UNUSED(htim);
;;;264      /* NOTE : This function Should not be modified, when the callback is needed,
;;;265                the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
;;;266       */
;;;267    }
;;;268    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start PROC
;;;289      */
;;;290    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;291    {
000002  4604              MOV      r4,r0
;;;292      /* Check the parameters */
;;;293      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;294      
;;;295      /* Enable the Input Capture channels 1
;;;296        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;297      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
000004  2201              MOVS     r2,#1
000006  2100              MOVS     r1,#0
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;298      
;;;299      /* Enable the Peripheral */
;;;300      __HAL_TIM_ENABLE(htim);
00000e  6820              LDR      r0,[r4,#0]
000010  6800              LDR      r0,[r0,#0]
000012  f0400001          ORR      r0,r0,#1
000016  6821              LDR      r1,[r4,#0]
000018  6008              STR      r0,[r1,#0]
;;;301      
;;;302      /* Return function status */
;;;303      return HAL_OK;
00001a  2000              MOVS     r0,#0
;;;304    }
00001c  bd10              POP      {r4,pc}
;;;305    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Start_DMA PROC
;;;385      */
;;;386    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;387    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;388      /* Check the parameters */
;;;389      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;390      
;;;391       if((htim->State == HAL_TIM_STATE_BUSY))
000008  f8940039          LDRB     r0,[r4,#0x39]
00000c  2802              CMP      r0,#2
00000e  d100              BNE      |L13.18|
                  |L13.16|
;;;392      {
;;;393         return HAL_BUSY;
;;;394      }
;;;395      else if((htim->State == HAL_TIM_STATE_READY))
;;;396      {
;;;397        if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;398        {
;;;399          return HAL_ERROR;                                    
;;;400        }
;;;401        else
;;;402        {
;;;403          htim->State = HAL_TIM_STATE_BUSY;
;;;404        }
;;;405      }
;;;406      /* Enable the Input Capture channels 1
;;;407        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;408      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE); 
;;;409      
;;;410      /* Set the DMA Input Capture 1 Callback */
;;;411      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;     
;;;412      /* Set the DMA error callback */
;;;413      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;414      
;;;415      /* Enable the DMA Stream for Capture 1*/
;;;416      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);    
;;;417      
;;;418      /* Enable the capture compare 1 Interrupt */
;;;419      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;420     
;;;421      /* Enable the Peripheral */
;;;422      __HAL_TIM_ENABLE(htim);
;;;423      
;;;424      /* Return function status */
;;;425      return HAL_OK;
;;;426    }
000010  bd70              POP      {r4-r6,pc}
                  |L13.18|
000012  f8940039          LDRB     r0,[r4,#0x39]         ;395
000016  2801              CMP      r0,#1                 ;395
000018  d106              BNE      |L13.40|
00001a  b915              CBNZ     r5,|L13.34|
00001c  2e00              CMP      r6,#0                 ;397
00001e  dd00              BLE      |L13.34|
000020  e7f6              B        |L13.16|
                  |L13.34|
000022  2002              MOVS     r0,#2                 ;403
000024  f8840039          STRB     r0,[r4,#0x39]         ;403
                  |L13.40|
000028  2201              MOVS     r2,#1                 ;408
00002a  2100              MOVS     r1,#0                 ;408
00002c  6820              LDR      r0,[r4,#0]            ;408
00002e  f7fffffe          BL       TIM_CCxChannelCmd
000032  490e              LDR      r1,|L13.108|
000034  6a20              LDR      r0,[r4,#0x20]         ;411
000036  63c1              STR      r1,[r0,#0x3c]         ;411
000038  490d              LDR      r1,|L13.112|
00003a  6a20              LDR      r0,[r4,#0x20]         ;413
00003c  6481              STR      r1,[r0,#0x48]         ;413
00003e  6822              LDR      r2,[r4,#0]            ;416
000040  f1020134          ADD      r1,r2,#0x34           ;416
000044  4633              MOV      r3,r6                 ;416
000046  462a              MOV      r2,r5                 ;416
000048  6a20              LDR      r0,[r4,#0x20]         ;416
00004a  f7fffffe          BL       HAL_DMA_Start_IT
00004e  6820              LDR      r0,[r4,#0]            ;419
000050  68c0              LDR      r0,[r0,#0xc]          ;419
000052  f4407000          ORR      r0,r0,#0x200          ;419
000056  6821              LDR      r1,[r4,#0]            ;419
000058  60c8              STR      r0,[r1,#0xc]          ;419
00005a  6820              LDR      r0,[r4,#0]            ;422
00005c  6800              LDR      r0,[r0,#0]            ;422
00005e  f0400001          ORR      r0,r0,#1              ;422
000062  6821              LDR      r1,[r4,#0]            ;422
000064  6008              STR      r0,[r1,#0]            ;422
000066  2000              MOVS     r0,#0                 ;425
000068  e7d2              B        |L13.16|
;;;427    
                          ENDP

00006a  0000              DCW      0x0000
                  |L13.108|
                          DCD      TIM_DMACaptureCplt
                  |L13.112|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_HallSensor_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Start_IT PROC
;;;333      */
;;;334    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;335    { 
000002  4604              MOV      r4,r0
;;;336      /* Check the parameters */
;;;337      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;338      
;;;339      /* Enable the capture compare Interrupts 1 event */
;;;340      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000004  6820              LDR      r0,[r4,#0]
000006  68c0              LDR      r0,[r0,#0xc]
000008  f0400002          ORR      r0,r0,#2
00000c  6821              LDR      r1,[r4,#0]
00000e  60c8              STR      r0,[r1,#0xc]
;;;341      
;;;342      /* Enable the Input Capture channels 1
;;;343        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;344      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);  
000010  2201              MOVS     r2,#1
000012  2100              MOVS     r1,#0
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       TIM_CCxChannelCmd
;;;345      
;;;346      /* Enable the Peripheral */
;;;347      __HAL_TIM_ENABLE(htim);
00001a  6820              LDR      r0,[r4,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  f0400001          ORR      r0,r0,#1
000022  6821              LDR      r1,[r4,#0]
000024  6008              STR      r0,[r1,#0]
;;;348      
;;;349      /* Return function status */
;;;350      return HAL_OK;
000026  2000              MOVS     r0,#0
;;;351    }
000028  bd10              POP      {r4,pc}
;;;352    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop PROC
;;;311      */
;;;312    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;313    {
000002  4604              MOV      r4,r0
;;;314      /* Check the parameters */
;;;315      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;316      
;;;317      /* Disable the Input Capture channels 1, 2 and 3
;;;318        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;319      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;320    
;;;321      /* Disable the Peripheral */
;;;322      __HAL_TIM_DISABLE(htim);
00000e  bf00              NOP      
000010  6820              LDR      r0,[r4,#0]
000012  6a00              LDR      r0,[r0,#0x20]
000014  f2411111          MOV      r1,#0x1111
000018  4008              ANDS     r0,r0,r1
00001a  b950              CBNZ     r0,|L15.50|
00001c  6820              LDR      r0,[r4,#0]
00001e  6a00              LDR      r0,[r0,#0x20]
000020  1089              ASRS     r1,r1,#2
000022  4008              ANDS     r0,r0,r1
000024  b928              CBNZ     r0,|L15.50|
000026  6820              LDR      r0,[r4,#0]
000028  6800              LDR      r0,[r0,#0]
00002a  f0200001          BIC      r0,r0,#1
00002e  6821              LDR      r1,[r4,#0]
000030  6008              STR      r0,[r1,#0]
                  |L15.50|
000032  bf00              NOP      
;;;323      
;;;324      /* Return function status */
;;;325      return HAL_OK;
000034  2000              MOVS     r0,#0
;;;326    }
000036  bd10              POP      {r4,pc}
;;;327    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop_DMA PROC
;;;433      */
;;;434    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;435    {
000002  4604              MOV      r4,r0
;;;436      /* Check the parameters */
;;;437      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;438      
;;;439      /* Disable the Input Capture channels 1
;;;440        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;441      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;442     
;;;443      
;;;444      /* Disable the capture compare Interrupts 1 event */
;;;445      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
00000e  6820              LDR      r0,[r4,#0]
000010  68c0              LDR      r0,[r0,#0xc]
000012  f4207000          BIC      r0,r0,#0x200
000016  6821              LDR      r1,[r4,#0]
000018  60c8              STR      r0,[r1,#0xc]
;;;446     
;;;447      /* Disable the Peripheral */
;;;448      __HAL_TIM_DISABLE(htim);
00001a  bf00              NOP      
00001c  6820              LDR      r0,[r4,#0]
00001e  6a00              LDR      r0,[r0,#0x20]
000020  f2411111          MOV      r1,#0x1111
000024  4008              ANDS     r0,r0,r1
000026  b950              CBNZ     r0,|L16.62|
000028  6820              LDR      r0,[r4,#0]
00002a  6a00              LDR      r0,[r0,#0x20]
00002c  1089              ASRS     r1,r1,#2
00002e  4008              ANDS     r0,r0,r1
000030  b928              CBNZ     r0,|L16.62|
000032  6820              LDR      r0,[r4,#0]
000034  6800              LDR      r0,[r0,#0]
000036  f0200001          BIC      r0,r0,#1
00003a  6821              LDR      r1,[r4,#0]
00003c  6008              STR      r0,[r1,#0]
                  |L16.62|
00003e  bf00              NOP      
;;;449      
;;;450      /* Return function status */
;;;451      return HAL_OK;
000040  2000              MOVS     r0,#0
;;;452    }
000042  bd10              POP      {r4,pc}
;;;453    /**
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop_IT PROC
;;;358      */
;;;359    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;360    {
000002  4604              MOV      r4,r0
;;;361      /* Check the parameters */
;;;362      assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;363      
;;;364      /* Disable the Input Capture channels 1
;;;365        (in the Hall Sensor Interface the Three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */  
;;;366      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE); 
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;367      
;;;368      /* Disable the capture compare Interrupts event */
;;;369      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
00000e  6820              LDR      r0,[r4,#0]
000010  68c0              LDR      r0,[r0,#0xc]
000012  f0200002          BIC      r0,r0,#2
000016  6821              LDR      r1,[r4,#0]
000018  60c8              STR      r0,[r1,#0xc]
;;;370      
;;;371      /* Disable the Peripheral */
;;;372      __HAL_TIM_DISABLE(htim);
00001a  bf00              NOP      
00001c  6820              LDR      r0,[r4,#0]
00001e  6a00              LDR      r0,[r0,#0x20]
000020  f2411111          MOV      r1,#0x1111
000024  4008              ANDS     r0,r0,r1
000026  b950              CBNZ     r0,|L17.62|
000028  6820              LDR      r0,[r4,#0]
00002a  6a00              LDR      r0,[r0,#0x20]
00002c  1089              ASRS     r1,r1,#2
00002e  4008              ANDS     r0,r0,r1
000030  b928              CBNZ     r0,|L17.62|
000032  6820              LDR      r0,[r4,#0]
000034  6800              LDR      r0,[r0,#0]
000036  f0200001          BIC      r0,r0,#1
00003a  6821              LDR      r1,[r4,#0]
00003c  6008              STR      r0,[r1,#0]
                  |L17.62|
00003e  bf00              NOP      
;;;373      
;;;374      /* Return function status */
;;;375      return HAL_OK;
000040  2000              MOVS     r0,#0
;;;376    }
000042  bd10              POP      {r4,pc}
;;;377    
                          ENDP


                          AREA ||i.HAL_TIMEx_MasterConfigSynchronization||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_MasterConfigSynchronization PROC
;;;1620     */
;;;1621   HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
000000  4602              MOV      r2,r0
;;;1622   {
;;;1623     /* Check the parameters */
;;;1624     assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
;;;1625     assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
;;;1626     assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
;;;1627     
;;;1628     __HAL_LOCK(htim);
000002  bf00              NOP      
000004  f8920038          LDRB     r0,[r2,#0x38]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L18.16|
00000c  2002              MOVS     r0,#2
                  |L18.14|
;;;1629     
;;;1630     htim->State = HAL_TIM_STATE_BUSY;
;;;1631   
;;;1632     /* Reset the MMS Bits */
;;;1633     htim->Instance->CR2 &= ~TIM_CR2_MMS;
;;;1634     /* Select the TRGO source */
;;;1635     htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
;;;1636   
;;;1637     /* Reset the MSM Bit */
;;;1638     htim->Instance->SMCR &= ~TIM_SMCR_MSM;
;;;1639     /* Set or Reset the MSM Bit */
;;;1640     htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
;;;1641     
;;;1642     htim->State = HAL_TIM_STATE_READY;
;;;1643     
;;;1644     __HAL_UNLOCK(htim);
;;;1645     
;;;1646     return HAL_OK;
;;;1647   } 
00000e  4770              BX       lr
                  |L18.16|
000010  2001              MOVS     r0,#1                 ;1628
000012  f8820038          STRB     r0,[r2,#0x38]         ;1628
000016  bf00              NOP                            ;1628
000018  2002              MOVS     r0,#2                 ;1630
00001a  f8820039          STRB     r0,[r2,#0x39]         ;1630
00001e  6810              LDR      r0,[r2,#0]            ;1633
000020  6840              LDR      r0,[r0,#4]            ;1633
000022  f0200070          BIC      r0,r0,#0x70           ;1633
000026  6813              LDR      r3,[r2,#0]            ;1633
000028  6058              STR      r0,[r3,#4]            ;1633
00002a  6810              LDR      r0,[r2,#0]            ;1635
00002c  6840              LDR      r0,[r0,#4]            ;1635
00002e  680b              LDR      r3,[r1,#0]            ;1635
000030  4318              ORRS     r0,r0,r3              ;1635
000032  6813              LDR      r3,[r2,#0]            ;1635
000034  6058              STR      r0,[r3,#4]            ;1635
000036  6810              LDR      r0,[r2,#0]            ;1638
000038  6880              LDR      r0,[r0,#8]            ;1638
00003a  f0200080          BIC      r0,r0,#0x80           ;1638
00003e  6813              LDR      r3,[r2,#0]            ;1638
000040  6098              STR      r0,[r3,#8]            ;1638
000042  6810              LDR      r0,[r2,#0]            ;1640
000044  6880              LDR      r0,[r0,#8]            ;1640
000046  684b              LDR      r3,[r1,#4]            ;1640
000048  4318              ORRS     r0,r0,r3              ;1640
00004a  6813              LDR      r3,[r2,#0]            ;1640
00004c  6098              STR      r0,[r3,#8]            ;1640
00004e  2001              MOVS     r0,#1                 ;1642
000050  f8820039          STRB     r0,[r2,#0x39]         ;1642
000054  bf00              NOP                            ;1644
000056  2000              MOVS     r0,#0                 ;1644
000058  f8820038          STRB     r0,[r2,#0x38]         ;1644
00005c  bf00              NOP                            ;1644
00005e  bf00              NOP                            ;1646
000060  e7d5              B        |L18.14|
;;;1648                                                        
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start PROC
;;;489      */
;;;490    HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;491    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;492      /* Check the parameters */
;;;493      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;494      
;;;495         /* Enable the Capture compare channel N */
;;;496         TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
000006  2204              MOVS     r2,#4
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;497        
;;;498      /* Enable the Main Output */
;;;499        __HAL_TIM_MOE_ENABLE(htim);
000010  6820              LDR      r0,[r4,#0]
000012  6c40              LDR      r0,[r0,#0x44]
000014  f4404000          ORR      r0,r0,#0x8000
000018  6821              LDR      r1,[r4,#0]
00001a  6448              STR      r0,[r1,#0x44]
;;;500    
;;;501      /* Enable the Peripheral */
;;;502      __HAL_TIM_ENABLE(htim);
00001c  6820              LDR      r0,[r4,#0]
00001e  6800              LDR      r0,[r0,#0]
000020  f0400001          ORR      r0,r0,#1
000024  6821              LDR      r1,[r4,#0]
000026  6008              STR      r0,[r1,#0]
;;;503      
;;;504      /* Return function status */
;;;505      return HAL_OK;
000028  2000              MOVS     r0,#0
;;;506    } 
00002a  bd70              POP      {r4-r6,pc}
;;;507    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Start_DMA PROC
;;;692      */
;;;693    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;694    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;695      /* Check the parameters */
;;;696      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;697      
;;;698      if((htim->State == HAL_TIM_STATE_BUSY))
00000c  f8940039          LDRB     r0,[r4,#0x39]
000010  2802              CMP      r0,#2
000012  d101              BNE      |L20.24|
                  |L20.20|
;;;699      {
;;;700         return HAL_BUSY;
;;;701      }
;;;702      else if((htim->State == HAL_TIM_STATE_READY))
;;;703      {
;;;704        if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;705        {
;;;706          return HAL_ERROR;                                    
;;;707        }
;;;708        else
;;;709        {
;;;710          htim->State = HAL_TIM_STATE_BUSY;
;;;711        }
;;;712      }    
;;;713      switch (Channel)
;;;714      {
;;;715        case TIM_CHANNEL_1:
;;;716        {      
;;;717          /* Set the DMA Period elapsed callback */
;;;718          htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;719         
;;;720          /* Set the DMA error callback */
;;;721          htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;722          
;;;723          /* Enable the DMA Stream */
;;;724          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;725          
;;;726          /* Enable the TIM Output Compare DMA request */
;;;727          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;728        }
;;;729        break;
;;;730        
;;;731        case TIM_CHANNEL_2:
;;;732        {
;;;733          /* Set the DMA Period elapsed callback */
;;;734          htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;735         
;;;736          /* Set the DMA error callback */
;;;737          htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;738          
;;;739          /* Enable the DMA Stream */
;;;740          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;741          
;;;742          /* Enable the TIM Output Compare DMA request */
;;;743          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;744        }
;;;745        break;
;;;746        
;;;747        case TIM_CHANNEL_3:
;;;748    {
;;;749          /* Set the DMA Period elapsed callback */
;;;750          htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;751         
;;;752          /* Set the DMA error callback */
;;;753          htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;754          
;;;755          /* Enable the DMA Stream */
;;;756          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;757          
;;;758          /* Enable the TIM Output Compare DMA request */
;;;759          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;760        }
;;;761        break;
;;;762        
;;;763        case TIM_CHANNEL_4:
;;;764        {
;;;765         /* Set the DMA Period elapsed callback */
;;;766          htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;767         
;;;768          /* Set the DMA error callback */
;;;769          htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;770          
;;;771          /* Enable the DMA Stream */
;;;772          HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;773          
;;;774          /* Enable the TIM Output Compare DMA request */
;;;775          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;776        }
;;;777        break;
;;;778        
;;;779        default:
;;;780        break;
;;;781      }
;;;782    
;;;783      /* Enable the Capture compare channel N */
;;;784      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;785      
;;;786      /* Enable the Main Output */
;;;787      __HAL_TIM_MOE_ENABLE(htim);
;;;788      
;;;789      /* Enable the Peripheral */
;;;790      __HAL_TIM_ENABLE(htim); 
;;;791      
;;;792      /* Return function status */
;;;793      return HAL_OK;
;;;794    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L20.24|
000018  f8940039          LDRB     r0,[r4,#0x39]         ;702
00001c  2801              CMP      r0,#1                 ;702
00001e  d106              BNE      |L20.46|
000020  b915              CBNZ     r5,|L20.40|
000022  2f00              CMP      r7,#0                 ;704
000024  dd00              BLE      |L20.40|
000026  e7f5              B        |L20.20|
                  |L20.40|
000028  2002              MOVS     r0,#2                 ;710
00002a  f8840039          STRB     r0,[r4,#0x39]         ;710
                  |L20.46|
00002e  b136              CBZ      r6,|L20.62|
000030  2e04              CMP      r6,#4                 ;713
000032  d019              BEQ      |L20.104|
000034  2e08              CMP      r6,#8                 ;713
000036  d02c              BEQ      |L20.146|
000038  2e0c              CMP      r6,#0xc               ;713
00003a  d154              BNE      |L20.230|
00003c  e03e              B        |L20.188|
                  |L20.62|
00003e  4934              LDR      r1,|L20.272|
000040  6a20              LDR      r0,[r4,#0x20]         ;718
000042  63c1              STR      r1,[r0,#0x3c]         ;718
000044  4933              LDR      r1,|L20.276|
000046  6a20              LDR      r0,[r4,#0x20]         ;721
000048  6481              STR      r1,[r0,#0x48]         ;721
00004a  6821              LDR      r1,[r4,#0]            ;724
00004c  f1010234          ADD      r2,r1,#0x34           ;724
000050  463b              MOV      r3,r7                 ;724
000052  4629              MOV      r1,r5                 ;724
000054  6a20              LDR      r0,[r4,#0x20]         ;724
000056  f7fffffe          BL       HAL_DMA_Start_IT
00005a  6820              LDR      r0,[r4,#0]            ;727
00005c  68c0              LDR      r0,[r0,#0xc]          ;727
00005e  f4407000          ORR      r0,r0,#0x200          ;727
000062  6821              LDR      r1,[r4,#0]            ;727
000064  60c8              STR      r0,[r1,#0xc]          ;727
000066  e03f              B        |L20.232|
                  |L20.104|
000068  4929              LDR      r1,|L20.272|
00006a  6a60              LDR      r0,[r4,#0x24]         ;734
00006c  63c1              STR      r1,[r0,#0x3c]         ;734
00006e  4929              LDR      r1,|L20.276|
000070  6a60              LDR      r0,[r4,#0x24]         ;737
000072  6481              STR      r1,[r0,#0x48]         ;737
000074  6821              LDR      r1,[r4,#0]            ;740
000076  f1010238          ADD      r2,r1,#0x38           ;740
00007a  463b              MOV      r3,r7                 ;740
00007c  4629              MOV      r1,r5                 ;740
00007e  6a60              LDR      r0,[r4,#0x24]         ;740
000080  f7fffffe          BL       HAL_DMA_Start_IT
000084  6820              LDR      r0,[r4,#0]            ;743
000086  68c0              LDR      r0,[r0,#0xc]          ;743
000088  f4406080          ORR      r0,r0,#0x400          ;743
00008c  6821              LDR      r1,[r4,#0]            ;743
00008e  60c8              STR      r0,[r1,#0xc]          ;743
000090  e02a              B        |L20.232|
                  |L20.146|
000092  491f              LDR      r1,|L20.272|
000094  6aa0              LDR      r0,[r4,#0x28]         ;750
000096  63c1              STR      r1,[r0,#0x3c]         ;750
000098  491e              LDR      r1,|L20.276|
00009a  6aa0              LDR      r0,[r4,#0x28]         ;753
00009c  6481              STR      r1,[r0,#0x48]         ;753
00009e  6821              LDR      r1,[r4,#0]            ;756
0000a0  f101023c          ADD      r2,r1,#0x3c           ;756
0000a4  463b              MOV      r3,r7                 ;756
0000a6  4629              MOV      r1,r5                 ;756
0000a8  6aa0              LDR      r0,[r4,#0x28]         ;756
0000aa  f7fffffe          BL       HAL_DMA_Start_IT
0000ae  6820              LDR      r0,[r4,#0]            ;759
0000b0  68c0              LDR      r0,[r0,#0xc]          ;759
0000b2  f4406000          ORR      r0,r0,#0x800          ;759
0000b6  6821              LDR      r1,[r4,#0]            ;759
0000b8  60c8              STR      r0,[r1,#0xc]          ;759
0000ba  e015              B        |L20.232|
                  |L20.188|
0000bc  4914              LDR      r1,|L20.272|
0000be  6ae0              LDR      r0,[r4,#0x2c]         ;766
0000c0  63c1              STR      r1,[r0,#0x3c]         ;766
0000c2  4914              LDR      r1,|L20.276|
0000c4  6ae0              LDR      r0,[r4,#0x2c]         ;769
0000c6  6481              STR      r1,[r0,#0x48]         ;769
0000c8  6821              LDR      r1,[r4,#0]            ;772
0000ca  f1010240          ADD      r2,r1,#0x40           ;772
0000ce  463b              MOV      r3,r7                 ;772
0000d0  4629              MOV      r1,r5                 ;772
0000d2  6ae0              LDR      r0,[r4,#0x2c]         ;772
0000d4  f7fffffe          BL       HAL_DMA_Start_IT
0000d8  6820              LDR      r0,[r4,#0]            ;775
0000da  68c0              LDR      r0,[r0,#0xc]          ;775
0000dc  f4405080          ORR      r0,r0,#0x1000         ;775
0000e0  6821              LDR      r1,[r4,#0]            ;775
0000e2  60c8              STR      r0,[r1,#0xc]          ;775
0000e4  e000              B        |L20.232|
                  |L20.230|
0000e6  bf00              NOP                            ;780
                  |L20.232|
0000e8  bf00              NOP                            ;729
0000ea  2204              MOVS     r2,#4                 ;784
0000ec  4631              MOV      r1,r6                 ;784
0000ee  6820              LDR      r0,[r4,#0]            ;784
0000f0  f7fffffe          BL       TIM_CCxNChannelCmd
0000f4  6820              LDR      r0,[r4,#0]            ;787
0000f6  6c40              LDR      r0,[r0,#0x44]         ;787
0000f8  f4404000          ORR      r0,r0,#0x8000         ;787
0000fc  6821              LDR      r1,[r4,#0]            ;787
0000fe  6448              STR      r0,[r1,#0x44]         ;787
000100  6820              LDR      r0,[r4,#0]            ;790
000102  6800              LDR      r0,[r0,#0]            ;790
000104  f0400001          ORR      r0,r0,#1              ;790
000108  6821              LDR      r1,[r4,#0]            ;790
00010a  6008              STR      r0,[r1,#0]            ;790
00010c  2000              MOVS     r0,#0                 ;793
00010e  e781              B        |L20.20|
;;;795    
                          ENDP

                  |L20.272|
                          DCD      TIM_DMADelayPulseCplt
                  |L20.276|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_OCN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Start_IT PROC
;;;551      */
;;;552    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;553    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;554      /* Check the parameters */
;;;555      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;556      
;;;557      switch (Channel)
000006  b135              CBZ      r5,|L21.22|
000008  2d04              CMP      r5,#4
00000a  d00b              BEQ      |L21.36|
00000c  2d08              CMP      r5,#8
00000e  d010              BEQ      |L21.50|
000010  2d0c              CMP      r5,#0xc
000012  d11c              BNE      |L21.78|
000014  e014              B        |L21.64|
                  |L21.22|
;;;558      {
;;;559        case TIM_CHANNEL_1:
;;;560        {       
;;;561          /* Enable the TIM Output Compare interrupt */
;;;562          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f0400002          ORR      r0,r0,#2
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;563        }
;;;564        break;
000022  e015              B        |L21.80|
                  |L21.36|
;;;565        
;;;566        case TIM_CHANNEL_2:
;;;567        {
;;;568          /* Enable the TIM Output Compare interrupt */
;;;569          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f0400004          ORR      r0,r0,#4
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;570        }
;;;571        break;
000030  e00e              B        |L21.80|
                  |L21.50|
;;;572        
;;;573        case TIM_CHANNEL_3:
;;;574        {
;;;575          /* Enable the TIM Output Compare interrupt */
;;;576          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f0400008          ORR      r0,r0,#8
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;577        }
;;;578        break;
00003e  e007              B        |L21.80|
                  |L21.64|
;;;579        
;;;580        case TIM_CHANNEL_4:
;;;581        {
;;;582          /* Enable the TIM Output Compare interrupt */
;;;583          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f0400010          ORR      r0,r0,#0x10
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;584        }
;;;585        break;
00004c  e000              B        |L21.80|
                  |L21.78|
;;;586        
;;;587        default:
;;;588        break;
00004e  bf00              NOP      
                  |L21.80|
000050  bf00              NOP                            ;564
;;;589      } 
;;;590      
;;;591      /* Enable the TIM Break interrupt */
;;;592      __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
000052  6820              LDR      r0,[r4,#0]
000054  68c0              LDR      r0,[r0,#0xc]
000056  f0400080          ORR      r0,r0,#0x80
00005a  6821              LDR      r1,[r4,#0]
00005c  60c8              STR      r0,[r1,#0xc]
;;;593      
;;;594      /* Enable the Capture compare channel N */
;;;595      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
00005e  2204              MOVS     r2,#4
000060  4629              MOV      r1,r5
000062  6820              LDR      r0,[r4,#0]
000064  f7fffffe          BL       TIM_CCxNChannelCmd
;;;596      
;;;597      /* Enable the Main Output */
;;;598      __HAL_TIM_MOE_ENABLE(htim);
000068  6820              LDR      r0,[r4,#0]
00006a  6c40              LDR      r0,[r0,#0x44]
00006c  f4404000          ORR      r0,r0,#0x8000
000070  6821              LDR      r1,[r4,#0]
000072  6448              STR      r0,[r1,#0x44]
;;;599      
;;;600      /* Enable the Peripheral */
;;;601      __HAL_TIM_ENABLE(htim);
000074  6820              LDR      r0,[r4,#0]
000076  6800              LDR      r0,[r0,#0]
000078  f0400001          ORR      r0,r0,#1
00007c  6821              LDR      r1,[r4,#0]
00007e  6008              STR      r0,[r1,#0]
;;;602      
;;;603      /* Return function status */
;;;604      return HAL_OK;
000080  2000              MOVS     r0,#0
;;;605    } 
000082  bd70              POP      {r4-r6,pc}
;;;606    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop PROC
;;;520      */
;;;521    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;522    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;523      /* Check the parameters */
;;;524      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;525      
;;;526        /* Disable the Capture compare channel N */
;;;527      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;528        
;;;529      /* Disable the Main Output */
;;;530        __HAL_TIM_MOE_DISABLE(htim);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  6a00              LDR      r0,[r0,#0x20]
000016  f2411111          MOV      r1,#0x1111
00001a  4008              ANDS     r0,r0,r1
00001c  b950              CBNZ     r0,|L22.52|
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  1089              ASRS     r1,r1,#2
000024  4008              ANDS     r0,r0,r1
000026  b928              CBNZ     r0,|L22.52|
000028  6820              LDR      r0,[r4,#0]
00002a  6c40              LDR      r0,[r0,#0x44]
00002c  f4204000          BIC      r0,r0,#0x8000
000030  6821              LDR      r1,[r4,#0]
000032  6448              STR      r0,[r1,#0x44]
                  |L22.52|
000034  bf00              NOP      
;;;531    
;;;532      /* Disable the Peripheral */
;;;533      __HAL_TIM_DISABLE(htim);
000036  bf00              NOP      
000038  6820              LDR      r0,[r4,#0]
00003a  6a00              LDR      r0,[r0,#0x20]
00003c  f2411111          MOV      r1,#0x1111
000040  4008              ANDS     r0,r0,r1
000042  b950              CBNZ     r0,|L22.90|
000044  6820              LDR      r0,[r4,#0]
000046  6a00              LDR      r0,[r0,#0x20]
000048  1089              ASRS     r1,r1,#2
00004a  4008              ANDS     r0,r0,r1
00004c  b928              CBNZ     r0,|L22.90|
00004e  6820              LDR      r0,[r4,#0]
000050  6800              LDR      r0,[r0,#0]
000052  f0200001          BIC      r0,r0,#1
000056  6821              LDR      r1,[r4,#0]
000058  6008              STR      r0,[r1,#0]
                  |L22.90|
00005a  bf00              NOP      
;;;534      
;;;535      /* Return function status */
;;;536      return HAL_OK;
00005c  2000              MOVS     r0,#0
;;;537    } 
00005e  bd70              POP      {r4-r6,pc}
;;;538    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop_DMA PROC
;;;808      */
;;;809    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;810    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;811      /* Check the parameters */
;;;812      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;813      
;;;814      switch (Channel)
000006  b135              CBZ      r5,|L23.22|
000008  2d04              CMP      r5,#4
00000a  d00b              BEQ      |L23.36|
00000c  2d08              CMP      r5,#8
00000e  d010              BEQ      |L23.50|
000010  2d0c              CMP      r5,#0xc
000012  d11c              BNE      |L23.78|
000014  e014              B        |L23.64|
                  |L23.22|
;;;815      {
;;;816        case TIM_CHANNEL_1:
;;;817        {       
;;;818          /* Disable the TIM Output Compare DMA request */
;;;819          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f4207000          BIC      r0,r0,#0x200
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;820        }
;;;821        break;
000022  e015              B        |L23.80|
                  |L23.36|
;;;822        
;;;823        case TIM_CHANNEL_2:
;;;824        {
;;;825          /* Disable the TIM Output Compare DMA request */
;;;826          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f4206080          BIC      r0,r0,#0x400
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;827        }
;;;828        break;
000030  e00e              B        |L23.80|
                  |L23.50|
;;;829        
;;;830        case TIM_CHANNEL_3:
;;;831        {
;;;832          /* Disable the TIM Output Compare DMA request */
;;;833          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f4206000          BIC      r0,r0,#0x800
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;834        }
;;;835        break;
00003e  e007              B        |L23.80|
                  |L23.64|
;;;836        
;;;837        case TIM_CHANNEL_4:
;;;838        {
;;;839          /* Disable the TIM Output Compare interrupt */
;;;840          __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f4205080          BIC      r0,r0,#0x1000
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;841        }
;;;842        break;
00004c  e000              B        |L23.80|
                  |L23.78|
;;;843        
;;;844        default:
;;;845        break;
00004e  bf00              NOP      
                  |L23.80|
000050  bf00              NOP                            ;821
;;;846      } 
;;;847      
;;;848      /* Disable the Capture compare channel N */
;;;849      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000052  2200              MOVS     r2,#0
000054  4629              MOV      r1,r5
000056  6820              LDR      r0,[r4,#0]
000058  f7fffffe          BL       TIM_CCxNChannelCmd
;;;850      
;;;851      /* Disable the Main Output */
;;;852      __HAL_TIM_MOE_DISABLE(htim);
00005c  bf00              NOP      
00005e  6820              LDR      r0,[r4,#0]
000060  6a00              LDR      r0,[r0,#0x20]
000062  f2411111          MOV      r1,#0x1111
000066  4008              ANDS     r0,r0,r1
000068  b950              CBNZ     r0,|L23.128|
00006a  6820              LDR      r0,[r4,#0]
00006c  6a00              LDR      r0,[r0,#0x20]
00006e  1089              ASRS     r1,r1,#2
000070  4008              ANDS     r0,r0,r1
000072  b928              CBNZ     r0,|L23.128|
000074  6820              LDR      r0,[r4,#0]
000076  6c40              LDR      r0,[r0,#0x44]
000078  f4204000          BIC      r0,r0,#0x8000
00007c  6821              LDR      r1,[r4,#0]
00007e  6448              STR      r0,[r1,#0x44]
                  |L23.128|
000080  bf00              NOP      
;;;853      
;;;854      /* Disable the Peripheral */
;;;855      __HAL_TIM_DISABLE(htim);
000082  bf00              NOP      
000084  6820              LDR      r0,[r4,#0]
000086  6a00              LDR      r0,[r0,#0x20]
000088  f2411111          MOV      r1,#0x1111
00008c  4008              ANDS     r0,r0,r1
00008e  b950              CBNZ     r0,|L23.166|
000090  6820              LDR      r0,[r4,#0]
000092  6a00              LDR      r0,[r0,#0x20]
000094  1089              ASRS     r1,r1,#2
000096  4008              ANDS     r0,r0,r1
000098  b928              CBNZ     r0,|L23.166|
00009a  6820              LDR      r0,[r4,#0]
00009c  6800              LDR      r0,[r0,#0]
00009e  f0200001          BIC      r0,r0,#1
0000a2  6821              LDR      r1,[r4,#0]
0000a4  6008              STR      r0,[r1,#0]
                  |L23.166|
0000a6  bf00              NOP      
;;;856      
;;;857      /* Change the htim state */
;;;858      htim->State = HAL_TIM_STATE_READY;
0000a8  2001              MOVS     r0,#1
0000aa  f8840039          STRB     r0,[r4,#0x39]
;;;859      
;;;860      /* Return function status */
;;;861      return HAL_OK;
0000ae  2000              MOVS     r0,#0
;;;862    }
0000b0  bd70              POP      {r4-r6,pc}
;;;863    /**
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop_IT PROC
;;;619      */
;;;620    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;621    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;622      /* Check the parameters */
;;;623      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;624      
;;;625      switch (Channel)
000006  b135              CBZ      r5,|L24.22|
000008  2d04              CMP      r5,#4
00000a  d00b              BEQ      |L24.36|
00000c  2d08              CMP      r5,#8
00000e  d010              BEQ      |L24.50|
000010  2d0c              CMP      r5,#0xc
000012  d11c              BNE      |L24.78|
000014  e014              B        |L24.64|
                  |L24.22|
;;;626      {
;;;627        case TIM_CHANNEL_1:
;;;628        {       
;;;629          /* Disable the TIM Output Compare interrupt */
;;;630          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f0200002          BIC      r0,r0,#2
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;631        }
;;;632        break;
000022  e015              B        |L24.80|
                  |L24.36|
;;;633        
;;;634        case TIM_CHANNEL_2:
;;;635        {
;;;636          /* Disable the TIM Output Compare interrupt */
;;;637          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f0200004          BIC      r0,r0,#4
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;638        }
;;;639        break;
000030  e00e              B        |L24.80|
                  |L24.50|
;;;640        
;;;641        case TIM_CHANNEL_3:
;;;642        {
;;;643          /* Disable the TIM Output Compare interrupt */
;;;644          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f0200008          BIC      r0,r0,#8
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;645        }
;;;646        break;
00003e  e007              B        |L24.80|
                  |L24.64|
;;;647        
;;;648        case TIM_CHANNEL_4:
;;;649        {
;;;650          /* Disable the TIM Output Compare interrupt */
;;;651          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f0200010          BIC      r0,r0,#0x10
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;652        }
;;;653        break;
00004c  e000              B        |L24.80|
                  |L24.78|
;;;654        
;;;655        default:
;;;656        break; 
00004e  bf00              NOP      
                  |L24.80|
000050  bf00              NOP                            ;632
;;;657      }
;;;658      
;;;659      /* Disable the Capture compare channel N */
;;;660      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000052  2200              MOVS     r2,#0
000054  4629              MOV      r1,r5
000056  6820              LDR      r0,[r4,#0]
000058  f7fffffe          BL       TIM_CCxNChannelCmd
;;;661    
;;;662      /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;663      if((READ_REG(htim->Instance->CCER) & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
00005c  6820              LDR      r0,[r4,#0]
00005e  6a00              LDR      r0,[r0,#0x20]
000060  f2404144          MOV      r1,#0x444
000064  4008              ANDS     r0,r0,r1
000066  b928              CBNZ     r0,|L24.116|
;;;664      {
;;;665        __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
000068  6820              LDR      r0,[r4,#0]
00006a  68c0              LDR      r0,[r0,#0xc]
00006c  f0200080          BIC      r0,r0,#0x80
000070  6821              LDR      r1,[r4,#0]
000072  60c8              STR      r0,[r1,#0xc]
                  |L24.116|
;;;666      }
;;;667      
;;;668      /* Disable the Main Output */
;;;669      __HAL_TIM_MOE_DISABLE(htim);
000074  bf00              NOP      
000076  6820              LDR      r0,[r4,#0]
000078  6a00              LDR      r0,[r0,#0x20]
00007a  f2411111          MOV      r1,#0x1111
00007e  4008              ANDS     r0,r0,r1
000080  b950              CBNZ     r0,|L24.152|
000082  6820              LDR      r0,[r4,#0]
000084  6a00              LDR      r0,[r0,#0x20]
000086  1089              ASRS     r1,r1,#2
000088  4008              ANDS     r0,r0,r1
00008a  b928              CBNZ     r0,|L24.152|
00008c  6820              LDR      r0,[r4,#0]
00008e  6c40              LDR      r0,[r0,#0x44]
000090  f4204000          BIC      r0,r0,#0x8000
000094  6821              LDR      r1,[r4,#0]
000096  6448              STR      r0,[r1,#0x44]
                  |L24.152|
000098  bf00              NOP      
;;;670      
;;;671      /* Disable the Peripheral */
;;;672      __HAL_TIM_DISABLE(htim);
00009a  bf00              NOP      
00009c  6820              LDR      r0,[r4,#0]
00009e  6a00              LDR      r0,[r0,#0x20]
0000a0  f2411111          MOV      r1,#0x1111
0000a4  4008              ANDS     r0,r0,r1
0000a6  b950              CBNZ     r0,|L24.190|
0000a8  6820              LDR      r0,[r4,#0]
0000aa  6a00              LDR      r0,[r0,#0x20]
0000ac  1089              ASRS     r1,r1,#2
0000ae  4008              ANDS     r0,r0,r1
0000b0  b928              CBNZ     r0,|L24.190|
0000b2  6820              LDR      r0,[r4,#0]
0000b4  6800              LDR      r0,[r0,#0]
0000b6  f0200001          BIC      r0,r0,#1
0000ba  6821              LDR      r1,[r4,#0]
0000bc  6008              STR      r0,[r1,#0]
                  |L24.190|
0000be  bf00              NOP      
;;;673      
;;;674      /* Return function status */
;;;675      return HAL_OK;
0000c0  2000              MOVS     r0,#0
;;;676    } 
0000c2  bd70              POP      {r4-r6,pc}
;;;677    
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start PROC
;;;1314     */
;;;1315   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1316     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1317     /* Check the parameters */
;;;1318     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1319     
;;;1320     /* Enable the complementary One Pulse output */
;;;1321     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
000006  2204              MOVS     r2,#4
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1322     
;;;1323     /* Enable the Main Output */
;;;1324     __HAL_TIM_MOE_ENABLE(htim);
000010  6820              LDR      r0,[r4,#0]
000012  6c40              LDR      r0,[r0,#0x44]
000014  f4404000          ORR      r0,r0,#0x8000
000018  6821              LDR      r1,[r4,#0]
00001a  6448              STR      r0,[r1,#0x44]
;;;1325     
;;;1326     /* Return function status */
;;;1327     return HAL_OK;
00001c  2000              MOVS     r0,#0
;;;1328   }
00001e  bd70              POP      {r4-r6,pc}
;;;1329   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start_IT PROC
;;;1370     */
;;;1371   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1372   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1373     /* Check the parameters */
;;;1374     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1375   
;;;1376     /* Enable the TIM Capture/Compare 1 interrupt */
;;;1377     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000006  6820              LDR      r0,[r4,#0]
000008  68c0              LDR      r0,[r0,#0xc]
00000a  f0400002          ORR      r0,r0,#2
00000e  6821              LDR      r1,[r4,#0]
000010  60c8              STR      r0,[r1,#0xc]
;;;1378     
;;;1379     /* Enable the TIM Capture/Compare 2 interrupt */
;;;1380     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000012  6820              LDR      r0,[r4,#0]
000014  68c0              LDR      r0,[r0,#0xc]
000016  f0400004          ORR      r0,r0,#4
00001a  6821              LDR      r1,[r4,#0]
00001c  60c8              STR      r0,[r1,#0xc]
;;;1381     
;;;1382     /* Enable the complementary One Pulse output */
;;;1383     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE); 
00001e  2204              MOVS     r2,#4
000020  4629              MOV      r1,r5
000022  6820              LDR      r0,[r4,#0]
000024  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1384     
;;;1385     /* Enable the Main Output */
;;;1386     __HAL_TIM_MOE_ENABLE(htim);
000028  6820              LDR      r0,[r4,#0]
00002a  6c40              LDR      r0,[r0,#0x44]
00002c  f4404000          ORR      r0,r0,#0x8000
000030  6821              LDR      r1,[r4,#0]
000032  6448              STR      r0,[r1,#0x44]
;;;1387     
;;;1388     /* Return function status */
;;;1389     return HAL_OK;
000034  2000              MOVS     r0,#0
;;;1390     } 
000036  bd70              POP      {r4-r6,pc}
;;;1391     
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Stop PROC
;;;1340     */
;;;1341   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1342   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1343   
;;;1344     /* Check the parameters */
;;;1345     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1346   
;;;1347     /* Disable the complementary One Pulse output */
;;;1348       TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1349     
;;;1350     /* Disable the Main Output */
;;;1351       __HAL_TIM_MOE_DISABLE(htim);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  6a00              LDR      r0,[r0,#0x20]
000016  f2411111          MOV      r1,#0x1111
00001a  4008              ANDS     r0,r0,r1
00001c  b950              CBNZ     r0,|L27.52|
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  1089              ASRS     r1,r1,#2
000024  4008              ANDS     r0,r0,r1
000026  b928              CBNZ     r0,|L27.52|
000028  6820              LDR      r0,[r4,#0]
00002a  6c40              LDR      r0,[r0,#0x44]
00002c  f4204000          BIC      r0,r0,#0x8000
000030  6821              LDR      r1,[r4,#0]
000032  6448              STR      r0,[r1,#0x44]
                  |L27.52|
000034  bf00              NOP      
;;;1352     
;;;1353     /* Disable the Peripheral */
;;;1354     __HAL_TIM_DISABLE(htim); 
000036  bf00              NOP      
000038  6820              LDR      r0,[r4,#0]
00003a  6a00              LDR      r0,[r0,#0x20]
00003c  f2411111          MOV      r1,#0x1111
000040  4008              ANDS     r0,r0,r1
000042  b950              CBNZ     r0,|L27.90|
000044  6820              LDR      r0,[r4,#0]
000046  6a00              LDR      r0,[r0,#0x20]
000048  1089              ASRS     r1,r1,#2
00004a  4008              ANDS     r0,r0,r1
00004c  b928              CBNZ     r0,|L27.90|
00004e  6820              LDR      r0,[r4,#0]
000050  6800              LDR      r0,[r0,#0]
000052  f0200001          BIC      r0,r0,#1
000056  6821              LDR      r1,[r4,#0]
000058  6008              STR      r0,[r1,#0]
                  |L27.90|
00005a  bf00              NOP      
;;;1355      
;;;1356     /* Return function status */
;;;1357     return HAL_OK;
00005c  2000              MOVS     r0,#0
;;;1358   }
00005e  bd70              POP      {r4-r6,pc}
;;;1359   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Stop_IT PROC
;;;1402     */
;;;1403   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1404   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1405     /* Check the parameters */
;;;1406     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel)); 
;;;1407   
;;;1408     /* Disable the TIM Capture/Compare 1 interrupt */
;;;1409     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000006  6820              LDR      r0,[r4,#0]
000008  68c0              LDR      r0,[r0,#0xc]
00000a  f0200002          BIC      r0,r0,#2
00000e  6821              LDR      r1,[r4,#0]
000010  60c8              STR      r0,[r1,#0xc]
;;;1410     
;;;1411     /* Disable the TIM Capture/Compare 2 interrupt */
;;;1412     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000012  6820              LDR      r0,[r4,#0]
000014  68c0              LDR      r0,[r0,#0xc]
000016  f0200004          BIC      r0,r0,#4
00001a  6821              LDR      r1,[r4,#0]
00001c  60c8              STR      r0,[r1,#0xc]
;;;1413     
;;;1414     /* Disable the complementary One Pulse output */
;;;1415     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
00001e  2200              MOVS     r2,#0
000020  4629              MOV      r1,r5
000022  6820              LDR      r0,[r4,#0]
000024  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1416     
;;;1417     /* Disable the Main Output */
;;;1418     __HAL_TIM_MOE_DISABLE(htim);
000028  bf00              NOP      
00002a  6820              LDR      r0,[r4,#0]
00002c  6a00              LDR      r0,[r0,#0x20]
00002e  f2411111          MOV      r1,#0x1111
000032  4008              ANDS     r0,r0,r1
000034  b950              CBNZ     r0,|L28.76|
000036  6820              LDR      r0,[r4,#0]
000038  6a00              LDR      r0,[r0,#0x20]
00003a  1089              ASRS     r1,r1,#2
00003c  4008              ANDS     r0,r0,r1
00003e  b928              CBNZ     r0,|L28.76|
000040  6820              LDR      r0,[r4,#0]
000042  6c40              LDR      r0,[r0,#0x44]
000044  f4204000          BIC      r0,r0,#0x8000
000048  6821              LDR      r1,[r4,#0]
00004a  6448              STR      r0,[r1,#0x44]
                  |L28.76|
00004c  bf00              NOP      
;;;1419     
;;;1420     /* Disable the Peripheral */
;;;1421      __HAL_TIM_DISABLE(htim);  
00004e  bf00              NOP      
000050  6820              LDR      r0,[r4,#0]
000052  6a00              LDR      r0,[r0,#0x20]
000054  f2411111          MOV      r1,#0x1111
000058  4008              ANDS     r0,r0,r1
00005a  b950              CBNZ     r0,|L28.114|
00005c  6820              LDR      r0,[r4,#0]
00005e  6a00              LDR      r0,[r0,#0x20]
000060  1089              ASRS     r1,r1,#2
000062  4008              ANDS     r0,r0,r1
000064  b928              CBNZ     r0,|L28.114|
000066  6820              LDR      r0,[r4,#0]
000068  6800              LDR      r0,[r0,#0]
00006a  f0200001          BIC      r0,r0,#1
00006e  6821              LDR      r1,[r4,#0]
000070  6008              STR      r0,[r1,#0]
                  |L28.114|
000072  bf00              NOP      
;;;1422     
;;;1423     /* Return function status */
;;;1424     return HAL_OK;
000074  2000              MOVS     r0,#0
;;;1425   }
000076  bd70              POP      {r4-r6,pc}
;;;1426   /**
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start PROC
;;;908      */
;;;909    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;910    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;911      /* Check the parameters */
;;;912      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;913      
;;;914      /* Enable the complementary PWM output  */
;;;915      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
000006  2204              MOVS     r2,#4
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;916      
;;;917      /* Enable the Main Output */
;;;918      __HAL_TIM_MOE_ENABLE(htim);
000010  6820              LDR      r0,[r4,#0]
000012  6c40              LDR      r0,[r0,#0x44]
000014  f4404000          ORR      r0,r0,#0x8000
000018  6821              LDR      r1,[r4,#0]
00001a  6448              STR      r0,[r1,#0x44]
;;;919      
;;;920      /* Enable the Peripheral */
;;;921      __HAL_TIM_ENABLE(htim);
00001c  6820              LDR      r0,[r4,#0]
00001e  6800              LDR      r0,[r0,#0]
000020  f0400001          ORR      r0,r0,#1
000024  6821              LDR      r1,[r4,#0]
000026  6008              STR      r0,[r1,#0]
;;;922      
;;;923      /* Return function status */
;;;924      return HAL_OK;
000028  2000              MOVS     r0,#0
;;;925    } 
00002a  bd70              POP      {r4-r6,pc}
;;;926    
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Start_DMA PROC
;;;1110     */
;;;1111   HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1112   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;1113     /* Check the parameters */
;;;1114     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1115     
;;;1116     if((htim->State == HAL_TIM_STATE_BUSY))
00000c  f8940039          LDRB     r0,[r4,#0x39]
000010  2802              CMP      r0,#2
000012  d101              BNE      |L30.24|
                  |L30.20|
;;;1117     {
;;;1118        return HAL_BUSY;
;;;1119     }
;;;1120     else if((htim->State == HAL_TIM_STATE_READY))
;;;1121     {
;;;1122       if(((uint32_t)pData == 0 ) && (Length > 0)) 
;;;1123       {
;;;1124         return HAL_ERROR;                                    
;;;1125       }
;;;1126       else
;;;1127       {
;;;1128         htim->State = HAL_TIM_STATE_BUSY;
;;;1129       }
;;;1130     }    
;;;1131     switch (Channel)
;;;1132     {
;;;1133       case TIM_CHANNEL_1:
;;;1134       {      
;;;1135         /* Set the DMA Period elapsed callback */
;;;1136         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1137        
;;;1138         /* Set the DMA error callback */
;;;1139         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;1140         
;;;1141         /* Enable the DMA Stream */
;;;1142         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
;;;1143         
;;;1144         /* Enable the TIM Capture/Compare 1 DMA request */
;;;1145         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1146       }
;;;1147       break;
;;;1148       
;;;1149       case TIM_CHANNEL_2:
;;;1150       {
;;;1151         /* Set the DMA Period elapsed callback */
;;;1152         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1153        
;;;1154         /* Set the DMA error callback */
;;;1155         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;1156         
;;;1157         /* Enable the DMA Stream */
;;;1158         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
;;;1159         
;;;1160         /* Enable the TIM Capture/Compare 2 DMA request */
;;;1161         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1162       }
;;;1163       break;
;;;1164       
;;;1165       case TIM_CHANNEL_3:
;;;1166       {
;;;1167         /* Set the DMA Period elapsed callback */
;;;1168         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1169        
;;;1170         /* Set the DMA error callback */
;;;1171         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;1172         
;;;1173         /* Enable the DMA Stream */
;;;1174         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
;;;1175         
;;;1176         /* Enable the TIM Capture/Compare 3 DMA request */
;;;1177         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1178       }
;;;1179       break;
;;;1180       
;;;1181       case TIM_CHANNEL_4:
;;;1182       {
;;;1183        /* Set the DMA Period elapsed callback */
;;;1184         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1185        
;;;1186         /* Set the DMA error callback */
;;;1187         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;1188         
;;;1189         /* Enable the DMA Stream */
;;;1190         HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
;;;1191         
;;;1192         /* Enable the TIM Capture/Compare 4 DMA request */
;;;1193         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;1194       }
;;;1195       break;
;;;1196       
;;;1197       default:
;;;1198       break;
;;;1199     }
;;;1200   
;;;1201     /* Enable the complementary PWM output  */
;;;1202        TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1203       
;;;1204     /* Enable the Main Output */
;;;1205       __HAL_TIM_MOE_ENABLE(htim);
;;;1206     
;;;1207     /* Enable the Peripheral */
;;;1208     __HAL_TIM_ENABLE(htim); 
;;;1209     
;;;1210     /* Return function status */
;;;1211     return HAL_OK;
;;;1212   }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L30.24|
000018  f8940039          LDRB     r0,[r4,#0x39]         ;1120
00001c  2801              CMP      r0,#1                 ;1120
00001e  d106              BNE      |L30.46|
000020  b915              CBNZ     r5,|L30.40|
000022  2f00              CMP      r7,#0                 ;1122
000024  dd00              BLE      |L30.40|
000026  e7f5              B        |L30.20|
                  |L30.40|
000028  2002              MOVS     r0,#2                 ;1128
00002a  f8840039          STRB     r0,[r4,#0x39]         ;1128
                  |L30.46|
00002e  b136              CBZ      r6,|L30.62|
000030  2e04              CMP      r6,#4                 ;1131
000032  d019              BEQ      |L30.104|
000034  2e08              CMP      r6,#8                 ;1131
000036  d02c              BEQ      |L30.146|
000038  2e0c              CMP      r6,#0xc               ;1131
00003a  d154              BNE      |L30.230|
00003c  e03e              B        |L30.188|
                  |L30.62|
00003e  4934              LDR      r1,|L30.272|
000040  6a20              LDR      r0,[r4,#0x20]         ;1136
000042  63c1              STR      r1,[r0,#0x3c]         ;1136
000044  4933              LDR      r1,|L30.276|
000046  6a20              LDR      r0,[r4,#0x20]         ;1139
000048  6481              STR      r1,[r0,#0x48]         ;1139
00004a  6821              LDR      r1,[r4,#0]            ;1142
00004c  f1010234          ADD      r2,r1,#0x34           ;1142
000050  463b              MOV      r3,r7                 ;1142
000052  4629              MOV      r1,r5                 ;1142
000054  6a20              LDR      r0,[r4,#0x20]         ;1142
000056  f7fffffe          BL       HAL_DMA_Start_IT
00005a  6820              LDR      r0,[r4,#0]            ;1145
00005c  68c0              LDR      r0,[r0,#0xc]          ;1145
00005e  f4407000          ORR      r0,r0,#0x200          ;1145
000062  6821              LDR      r1,[r4,#0]            ;1145
000064  60c8              STR      r0,[r1,#0xc]          ;1145
000066  e03f              B        |L30.232|
                  |L30.104|
000068  4929              LDR      r1,|L30.272|
00006a  6a60              LDR      r0,[r4,#0x24]         ;1152
00006c  63c1              STR      r1,[r0,#0x3c]         ;1152
00006e  4929              LDR      r1,|L30.276|
000070  6a60              LDR      r0,[r4,#0x24]         ;1155
000072  6481              STR      r1,[r0,#0x48]         ;1155
000074  6821              LDR      r1,[r4,#0]            ;1158
000076  f1010238          ADD      r2,r1,#0x38           ;1158
00007a  463b              MOV      r3,r7                 ;1158
00007c  4629              MOV      r1,r5                 ;1158
00007e  6a60              LDR      r0,[r4,#0x24]         ;1158
000080  f7fffffe          BL       HAL_DMA_Start_IT
000084  6820              LDR      r0,[r4,#0]            ;1161
000086  68c0              LDR      r0,[r0,#0xc]          ;1161
000088  f4406080          ORR      r0,r0,#0x400          ;1161
00008c  6821              LDR      r1,[r4,#0]            ;1161
00008e  60c8              STR      r0,[r1,#0xc]          ;1161
000090  e02a              B        |L30.232|
                  |L30.146|
000092  491f              LDR      r1,|L30.272|
000094  6aa0              LDR      r0,[r4,#0x28]         ;1168
000096  63c1              STR      r1,[r0,#0x3c]         ;1168
000098  491e              LDR      r1,|L30.276|
00009a  6aa0              LDR      r0,[r4,#0x28]         ;1171
00009c  6481              STR      r1,[r0,#0x48]         ;1171
00009e  6821              LDR      r1,[r4,#0]            ;1174
0000a0  f101023c          ADD      r2,r1,#0x3c           ;1174
0000a4  463b              MOV      r3,r7                 ;1174
0000a6  4629              MOV      r1,r5                 ;1174
0000a8  6aa0              LDR      r0,[r4,#0x28]         ;1174
0000aa  f7fffffe          BL       HAL_DMA_Start_IT
0000ae  6820              LDR      r0,[r4,#0]            ;1177
0000b0  68c0              LDR      r0,[r0,#0xc]          ;1177
0000b2  f4406000          ORR      r0,r0,#0x800          ;1177
0000b6  6821              LDR      r1,[r4,#0]            ;1177
0000b8  60c8              STR      r0,[r1,#0xc]          ;1177
0000ba  e015              B        |L30.232|
                  |L30.188|
0000bc  4914              LDR      r1,|L30.272|
0000be  6ae0              LDR      r0,[r4,#0x2c]         ;1184
0000c0  63c1              STR      r1,[r0,#0x3c]         ;1184
0000c2  4914              LDR      r1,|L30.276|
0000c4  6ae0              LDR      r0,[r4,#0x2c]         ;1187
0000c6  6481              STR      r1,[r0,#0x48]         ;1187
0000c8  6821              LDR      r1,[r4,#0]            ;1190
0000ca  f1010240          ADD      r2,r1,#0x40           ;1190
0000ce  463b              MOV      r3,r7                 ;1190
0000d0  4629              MOV      r1,r5                 ;1190
0000d2  6ae0              LDR      r0,[r4,#0x2c]         ;1190
0000d4  f7fffffe          BL       HAL_DMA_Start_IT
0000d8  6820              LDR      r0,[r4,#0]            ;1193
0000da  68c0              LDR      r0,[r0,#0xc]          ;1193
0000dc  f4405080          ORR      r0,r0,#0x1000         ;1193
0000e0  6821              LDR      r1,[r4,#0]            ;1193
0000e2  60c8              STR      r0,[r1,#0xc]          ;1193
0000e4  e000              B        |L30.232|
                  |L30.230|
0000e6  bf00              NOP                            ;1198
                  |L30.232|
0000e8  bf00              NOP                            ;1147
0000ea  2204              MOVS     r2,#4                 ;1202
0000ec  4631              MOV      r1,r6                 ;1202
0000ee  6820              LDR      r0,[r4,#0]            ;1202
0000f0  f7fffffe          BL       TIM_CCxNChannelCmd
0000f4  6820              LDR      r0,[r4,#0]            ;1205
0000f6  6c40              LDR      r0,[r0,#0x44]         ;1205
0000f8  f4404000          ORR      r0,r0,#0x8000         ;1205
0000fc  6821              LDR      r1,[r4,#0]            ;1205
0000fe  6448              STR      r0,[r1,#0x44]         ;1205
000100  6820              LDR      r0,[r4,#0]            ;1208
000102  6800              LDR      r0,[r0,#0]            ;1208
000104  f0400001          ORR      r0,r0,#1              ;1208
000108  6821              LDR      r1,[r4,#0]            ;1208
00010a  6008              STR      r0,[r1,#0]            ;1208
00010c  2000              MOVS     r0,#0                 ;1211
00010e  e781              B        |L30.20|
;;;1213   
                          ENDP

                  |L30.272|
                          DCD      TIM_DMADelayPulseCplt
                  |L30.276|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_PWMN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Start_IT PROC
;;;969      */
;;;970    HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;971    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;972      /* Check the parameters */
;;;973      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;974      
;;;975      switch (Channel)
000006  b135              CBZ      r5,|L31.22|
000008  2d04              CMP      r5,#4
00000a  d00b              BEQ      |L31.36|
00000c  2d08              CMP      r5,#8
00000e  d010              BEQ      |L31.50|
000010  2d0c              CMP      r5,#0xc
000012  d11c              BNE      |L31.78|
000014  e014              B        |L31.64|
                  |L31.22|
;;;976      {
;;;977        case TIM_CHANNEL_1:
;;;978        {       
;;;979          /* Enable the TIM Capture/Compare 1 interrupt */
;;;980          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f0400002          ORR      r0,r0,#2
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;981        }
;;;982        break;
000022  e015              B        |L31.80|
                  |L31.36|
;;;983        
;;;984        case TIM_CHANNEL_2:
;;;985        {
;;;986          /* Enable the TIM Capture/Compare 2 interrupt */
;;;987          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f0400004          ORR      r0,r0,#4
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;988        }
;;;989        break;
000030  e00e              B        |L31.80|
                  |L31.50|
;;;990        
;;;991        case TIM_CHANNEL_3:
;;;992        {
;;;993          /* Enable the TIM Capture/Compare 3 interrupt */
;;;994          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f0400008          ORR      r0,r0,#8
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;995        }
;;;996        break;
00003e  e007              B        |L31.80|
                  |L31.64|
;;;997        
;;;998        case TIM_CHANNEL_4:
;;;999        {
;;;1000         /* Enable the TIM Capture/Compare 4 interrupt */
;;;1001         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f0400010          ORR      r0,r0,#0x10
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;1002       }
;;;1003       break;
00004c  e000              B        |L31.80|
                  |L31.78|
;;;1004       
;;;1005       default:
;;;1006       break;
00004e  bf00              NOP      
                  |L31.80|
000050  bf00              NOP                            ;982
;;;1007     } 
;;;1008     
;;;1009     /* Enable the TIM Break interrupt */
;;;1010     __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
000052  6820              LDR      r0,[r4,#0]
000054  68c0              LDR      r0,[r0,#0xc]
000056  f0400080          ORR      r0,r0,#0x80
00005a  6821              LDR      r1,[r4,#0]
00005c  60c8              STR      r0,[r1,#0xc]
;;;1011     
;;;1012     /* Enable the complementary PWM output  */
;;;1013     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
00005e  2204              MOVS     r2,#4
000060  4629              MOV      r1,r5
000062  6820              LDR      r0,[r4,#0]
000064  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1014     
;;;1015     /* Enable the Main Output */
;;;1016     __HAL_TIM_MOE_ENABLE(htim);
000068  6820              LDR      r0,[r4,#0]
00006a  6c40              LDR      r0,[r0,#0x44]
00006c  f4404000          ORR      r0,r0,#0x8000
000070  6821              LDR      r1,[r4,#0]
000072  6448              STR      r0,[r1,#0x44]
;;;1017     
;;;1018     /* Enable the Peripheral */
;;;1019     __HAL_TIM_ENABLE(htim);
000074  6820              LDR      r0,[r4,#0]
000076  6800              LDR      r0,[r0,#0]
000078  f0400001          ORR      r0,r0,#1
00007c  6821              LDR      r1,[r4,#0]
00007e  6008              STR      r0,[r1,#0]
;;;1020     
;;;1021     /* Return function status */
;;;1022     return HAL_OK;
000080  2000              MOVS     r0,#0
;;;1023   } 
000082  bd70              POP      {r4-r6,pc}
;;;1024   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop PROC
;;;938      */
;;;939    HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;940    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;941      /* Check the parameters */
;;;942      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;943      
;;;944      /* Disable the complementary PWM output  */
;;;945      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);  
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;946      
;;;947      /* Disable the Main Output */
;;;948      __HAL_TIM_MOE_DISABLE(htim);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  6a00              LDR      r0,[r0,#0x20]
000016  f2411111          MOV      r1,#0x1111
00001a  4008              ANDS     r0,r0,r1
00001c  b950              CBNZ     r0,|L32.52|
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  1089              ASRS     r1,r1,#2
000024  4008              ANDS     r0,r0,r1
000026  b928              CBNZ     r0,|L32.52|
000028  6820              LDR      r0,[r4,#0]
00002a  6c40              LDR      r0,[r0,#0x44]
00002c  f4204000          BIC      r0,r0,#0x8000
000030  6821              LDR      r1,[r4,#0]
000032  6448              STR      r0,[r1,#0x44]
                  |L32.52|
000034  bf00              NOP      
;;;949      
;;;950      /* Disable the Peripheral */
;;;951      __HAL_TIM_DISABLE(htim);
000036  bf00              NOP      
000038  6820              LDR      r0,[r4,#0]
00003a  6a00              LDR      r0,[r0,#0x20]
00003c  f2411111          MOV      r1,#0x1111
000040  4008              ANDS     r0,r0,r1
000042  b950              CBNZ     r0,|L32.90|
000044  6820              LDR      r0,[r4,#0]
000046  6a00              LDR      r0,[r0,#0x20]
000048  1089              ASRS     r1,r1,#2
00004a  4008              ANDS     r0,r0,r1
00004c  b928              CBNZ     r0,|L32.90|
00004e  6820              LDR      r0,[r4,#0]
000050  6800              LDR      r0,[r0,#0]
000052  f0200001          BIC      r0,r0,#1
000056  6821              LDR      r1,[r4,#0]
000058  6008              STR      r0,[r1,#0]
                  |L32.90|
00005a  bf00              NOP      
;;;952      
;;;953      /* Return function status */
;;;954      return HAL_OK;
00005c  2000              MOVS     r0,#0
;;;955    } 
00005e  bd70              POP      {r4-r6,pc}
;;;956    
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop_DMA PROC
;;;1226     */
;;;1227   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1228   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1229     /* Check the parameters */
;;;1230     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1231     
;;;1232     switch (Channel)
000006  b135              CBZ      r5,|L33.22|
000008  2d04              CMP      r5,#4
00000a  d00b              BEQ      |L33.36|
00000c  2d08              CMP      r5,#8
00000e  d010              BEQ      |L33.50|
000010  2d0c              CMP      r5,#0xc
000012  d11c              BNE      |L33.78|
000014  e014              B        |L33.64|
                  |L33.22|
;;;1233     {
;;;1234       case TIM_CHANNEL_1:
;;;1235       {       
;;;1236         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1237         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f4207000          BIC      r0,r0,#0x200
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;1238       }
;;;1239       break;
000022  e015              B        |L33.80|
                  |L33.36|
;;;1240       
;;;1241       case TIM_CHANNEL_2:
;;;1242       {
;;;1243         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1244         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f4206080          BIC      r0,r0,#0x400
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;1245       }
;;;1246       break;
000030  e00e              B        |L33.80|
                  |L33.50|
;;;1247       
;;;1248       case TIM_CHANNEL_3:
;;;1249       {
;;;1250         /* Disable the TIM Capture/Compare 3 DMA request */
;;;1251         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f4206000          BIC      r0,r0,#0x800
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;1252       }
;;;1253       break;
00003e  e007              B        |L33.80|
                  |L33.64|
;;;1254       
;;;1255       case TIM_CHANNEL_4:
;;;1256       {
;;;1257         /* Disable the TIM Capture/Compare 4 DMA request */
;;;1258         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f4205080          BIC      r0,r0,#0x1000
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;1259       }
;;;1260       break;
00004c  e000              B        |L33.80|
                  |L33.78|
;;;1261       
;;;1262       default:
;;;1263       break;
00004e  bf00              NOP      
                  |L33.80|
000050  bf00              NOP                            ;1239
;;;1264     } 
;;;1265     
;;;1266     /* Disable the complementary PWM output */
;;;1267       TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000052  2200              MOVS     r2,#0
000054  4629              MOV      r1,r5
000056  6820              LDR      r0,[r4,#0]
000058  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1268        
;;;1269     /* Disable the Main Output */
;;;1270       __HAL_TIM_MOE_DISABLE(htim);
00005c  bf00              NOP      
00005e  6820              LDR      r0,[r4,#0]
000060  6a00              LDR      r0,[r0,#0x20]
000062  f2411111          MOV      r1,#0x1111
000066  4008              ANDS     r0,r0,r1
000068  b950              CBNZ     r0,|L33.128|
00006a  6820              LDR      r0,[r4,#0]
00006c  6a00              LDR      r0,[r0,#0x20]
00006e  1089              ASRS     r1,r1,#2
000070  4008              ANDS     r0,r0,r1
000072  b928              CBNZ     r0,|L33.128|
000074  6820              LDR      r0,[r4,#0]
000076  6c40              LDR      r0,[r0,#0x44]
000078  f4204000          BIC      r0,r0,#0x8000
00007c  6821              LDR      r1,[r4,#0]
00007e  6448              STR      r0,[r1,#0x44]
                  |L33.128|
000080  bf00              NOP      
;;;1271   
;;;1272     /* Disable the Peripheral */
;;;1273     __HAL_TIM_DISABLE(htim);
000082  bf00              NOP      
000084  6820              LDR      r0,[r4,#0]
000086  6a00              LDR      r0,[r0,#0x20]
000088  f2411111          MOV      r1,#0x1111
00008c  4008              ANDS     r0,r0,r1
00008e  b950              CBNZ     r0,|L33.166|
000090  6820              LDR      r0,[r4,#0]
000092  6a00              LDR      r0,[r0,#0x20]
000094  1089              ASRS     r1,r1,#2
000096  4008              ANDS     r0,r0,r1
000098  b928              CBNZ     r0,|L33.166|
00009a  6820              LDR      r0,[r4,#0]
00009c  6800              LDR      r0,[r0,#0]
00009e  f0200001          BIC      r0,r0,#1
0000a2  6821              LDR      r1,[r4,#0]
0000a4  6008              STR      r0,[r1,#0]
                  |L33.166|
0000a6  bf00              NOP      
;;;1274     
;;;1275     /* Change the htim state */
;;;1276     htim->State = HAL_TIM_STATE_READY;
0000a8  2001              MOVS     r0,#1
0000aa  f8840039          STRB     r0,[r4,#0x39]
;;;1277     
;;;1278     /* Return function status */
;;;1279     return HAL_OK;
0000ae  2000              MOVS     r0,#0
;;;1280   }
0000b0  bd70              POP      {r4-r6,pc}
;;;1281   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop_IT PROC
;;;1037     */
;;;1038   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1039   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1040     /* Check the parameters */
;;;1041     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
;;;1042   
;;;1043     switch (Channel)
000006  b135              CBZ      r5,|L34.22|
000008  2d04              CMP      r5,#4
00000a  d00b              BEQ      |L34.36|
00000c  2d08              CMP      r5,#8
00000e  d010              BEQ      |L34.50|
000010  2d0c              CMP      r5,#0xc
000012  d11c              BNE      |L34.78|
000014  e014              B        |L34.64|
                  |L34.22|
;;;1044     {
;;;1045       case TIM_CHANNEL_1:
;;;1046       {       
;;;1047         /* Disable the TIM Capture/Compare 1 interrupt */
;;;1048         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f0200002          BIC      r0,r0,#2
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;1049       }
;;;1050       break;
000022  e015              B        |L34.80|
                  |L34.36|
;;;1051       
;;;1052       case TIM_CHANNEL_2:
;;;1053       {
;;;1054         /* Disable the TIM Capture/Compare 2 interrupt */
;;;1055         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f0200004          BIC      r0,r0,#4
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;1056       }
;;;1057       break;
000030  e00e              B        |L34.80|
                  |L34.50|
;;;1058       
;;;1059       case TIM_CHANNEL_3:
;;;1060       {
;;;1061         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1062         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f0200008          BIC      r0,r0,#8
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;1063       }
;;;1064       break;
00003e  e007              B        |L34.80|
                  |L34.64|
;;;1065       
;;;1066       case TIM_CHANNEL_4:
;;;1067       {
;;;1068         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1069         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f0200010          BIC      r0,r0,#0x10
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;1070       }
;;;1071       break;
00004c  e000              B        |L34.80|
                  |L34.78|
;;;1072       
;;;1073       default:
;;;1074       break; 
00004e  bf00              NOP      
                  |L34.80|
000050  bf00              NOP                            ;1050
;;;1075     }
;;;1076     
;;;1077     /* Disable the complementary PWM output  */
;;;1078     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000052  2200              MOVS     r2,#0
000054  4629              MOV      r1,r5
000056  6820              LDR      r0,[r4,#0]
000058  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1079     
;;;1080     /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;1081     if((READ_REG(htim->Instance->CCER) & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
00005c  6820              LDR      r0,[r4,#0]
00005e  6a00              LDR      r0,[r0,#0x20]
000060  f2404144          MOV      r1,#0x444
000064  4008              ANDS     r0,r0,r1
000066  b928              CBNZ     r0,|L34.116|
;;;1082     {
;;;1083       __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
000068  6820              LDR      r0,[r4,#0]
00006a  68c0              LDR      r0,[r0,#0xc]
00006c  f0200080          BIC      r0,r0,#0x80
000070  6821              LDR      r1,[r4,#0]
000072  60c8              STR      r0,[r1,#0xc]
                  |L34.116|
;;;1084     }
;;;1085     
;;;1086     /* Disable the Main Output */
;;;1087     __HAL_TIM_MOE_DISABLE(htim);
000074  bf00              NOP      
000076  6820              LDR      r0,[r4,#0]
000078  6a00              LDR      r0,[r0,#0x20]
00007a  f2411111          MOV      r1,#0x1111
00007e  4008              ANDS     r0,r0,r1
000080  b950              CBNZ     r0,|L34.152|
000082  6820              LDR      r0,[r4,#0]
000084  6a00              LDR      r0,[r0,#0x20]
000086  1089              ASRS     r1,r1,#2
000088  4008              ANDS     r0,r0,r1
00008a  b928              CBNZ     r0,|L34.152|
00008c  6820              LDR      r0,[r4,#0]
00008e  6c40              LDR      r0,[r0,#0x44]
000090  f4204000          BIC      r0,r0,#0x8000
000094  6821              LDR      r1,[r4,#0]
000096  6448              STR      r0,[r1,#0x44]
                  |L34.152|
000098  bf00              NOP      
;;;1088     
;;;1089     /* Disable the Peripheral */
;;;1090     __HAL_TIM_DISABLE(htim);
00009a  bf00              NOP      
00009c  6820              LDR      r0,[r4,#0]
00009e  6a00              LDR      r0,[r0,#0x20]
0000a0  f2411111          MOV      r1,#0x1111
0000a4  4008              ANDS     r0,r0,r1
0000a6  b950              CBNZ     r0,|L34.190|
0000a8  6820              LDR      r0,[r4,#0]
0000aa  6a00              LDR      r0,[r0,#0x20]
0000ac  1089              ASRS     r1,r1,#2
0000ae  4008              ANDS     r0,r0,r1
0000b0  b928              CBNZ     r0,|L34.190|
0000b2  6820              LDR      r0,[r4,#0]
0000b4  6800              LDR      r0,[r0,#0]
0000b6  f0200001          BIC      r0,r0,#1
0000ba  6821              LDR      r1,[r4,#0]
0000bc  6008              STR      r0,[r1,#0]
                  |L34.190|
0000be  bf00              NOP      
;;;1091     
;;;1092     /* Return function status */
;;;1093     return HAL_OK;
0000c0  2000              MOVS     r0,#0
;;;1094   } 
0000c2  bd70              POP      {r4-r6,pc}
;;;1095   
                          ENDP


                          AREA ||i.HAL_TIMEx_RemapConfig||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_RemapConfig PROC
;;;1712     */
;;;1713   HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
000000  4602              MOV      r2,r0
;;;1714   {
;;;1715     __HAL_LOCK(htim);
000002  bf00              NOP      
000004  f8920038          LDRB     r0,[r2,#0x38]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L35.16|
00000c  2002              MOVS     r0,#2
                  |L35.14|
;;;1716       
;;;1717     /* Check parameters */
;;;1718     assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
;;;1719     assert_param(IS_TIM_REMAP(Remap));
;;;1720     
;;;1721     /* Set the Timer remapping configuration */
;;;1722     htim->Instance->OR = Remap;
;;;1723     
;;;1724     htim->State = HAL_TIM_STATE_READY;
;;;1725     
;;;1726     __HAL_UNLOCK(htim);  
;;;1727     
;;;1728     return HAL_OK;
;;;1729   }
00000e  4770              BX       lr
                  |L35.16|
000010  2001              MOVS     r0,#1                 ;1715
000012  f8820038          STRB     r0,[r2,#0x38]         ;1715
000016  bf00              NOP                            ;1715
000018  6810              LDR      r0,[r2,#0]            ;1722
00001a  6501              STR      r1,[r0,#0x50]         ;1722
00001c  2001              MOVS     r0,#1                 ;1724
00001e  f8820039          STRB     r0,[r2,#0x39]         ;1724
000022  bf00              NOP                            ;1726
000024  2000              MOVS     r0,#0                 ;1726
000026  f8820038          STRB     r0,[r2,#0x38]         ;1726
00002a  bf00              NOP                            ;1726
00002c  bf00              NOP                            ;1728
00002e  e7ee              B        |L35.14|
;;;1730   
                          ENDP


                          AREA ||i.TIMEx_DMACommutationCplt||, CODE, READONLY, ALIGN=1

                  TIMEx_DMACommutationCplt PROC
;;;1819     */
;;;1820   void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;1821   {
000002  4604              MOV      r4,r0
;;;1822     TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;1823     
;;;1824     htim->State= HAL_TIM_STATE_READY;
000006  2001              MOVS     r0,#1
000008  f8850039          STRB     r0,[r5,#0x39]
;;;1825       
;;;1826     HAL_TIMEx_CommutationCallback(htim); 
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       HAL_TIMEx_CommutationCallback
;;;1827   }
000012  bd70              POP      {r4-r6,pc}
;;;1828   /**
                          ENDP


                          AREA ||i.TIM_CCxNChannelCmd||, CODE, READONLY, ALIGN=1

                  TIM_CCxNChannelCmd PROC
;;;1843     */
;;;1844   static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
000000  b530              PUSH     {r4,r5,lr}
;;;1845   {
;;;1846     uint32_t tmp = 0;
000002  2300              MOVS     r3,#0
;;;1847   
;;;1848     /* Check the parameters */
;;;1849     assert_param(IS_TIM_CC4_INSTANCE(TIMx));
;;;1850     assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));
;;;1851   
;;;1852     tmp = TIM_CCER_CC1NE << Channel;
000004  2404              MOVS     r4,#4
000006  fa04f301          LSL      r3,r4,r1
;;;1853   
;;;1854     /* Reset the CCxNE Bit */
;;;1855     TIMx->CCER &= ~tmp;
00000a  6a04              LDR      r4,[r0,#0x20]
00000c  439c              BICS     r4,r4,r3
00000e  6204              STR      r4,[r0,#0x20]
;;;1856   
;;;1857     /* Set or reset the CCxNE Bit */ 
;;;1858     TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
000010  6a04              LDR      r4,[r0,#0x20]
000012  fa02f501          LSL      r5,r2,r1
000016  432c              ORRS     r4,r4,r5
000018  6204              STR      r4,[r0,#0x20]
;;;1859   }
00001a  bd30              POP      {r4,r5,pc}
;;;1860   
                          ENDP


;*** Start embedded assembler ***

#line 1 "HALLIB\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_tim_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920____REVSH|
#line 402
|__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920____RRX|
#line 587
|__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
