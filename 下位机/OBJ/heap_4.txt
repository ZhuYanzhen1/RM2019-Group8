; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\heap_4.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\heap_4.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\heap_4.crf FreeRTOS\heap_4.c]
                          THUMB

                          AREA ||i.prvHeapInit||, CODE, READONLY, ALIGN=2

                  prvHeapInit PROC
;;;328    
;;;329    static void prvHeapInit( void )
000000  b530              PUSH     {r4,r5,lr}
;;;330    {
;;;331    BlockLink_t *pxFirstFreeBlock;
;;;332    uint8_t *pucAlignedHeap;
;;;333    size_t uxAddress;
;;;334    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
000002  f44f33c0          MOV      r3,#0x18000
;;;335    
;;;336    	/* Ensure the heap starts on a correctly aligned boundary. */
;;;337    	uxAddress = ( size_t ) ucHeap;
000006  4817              LDR      r0,|L1.100|
;;;338    
;;;339    	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
000008  f0000407          AND      r4,r0,#7
00000c  b12c              CBZ      r4,|L1.26|
;;;340    	{
;;;341    		uxAddress += ( portBYTE_ALIGNMENT - 1 );
00000e  1dc0              ADDS     r0,r0,#7
;;;342    		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
000010  f0200007          BIC      r0,r0,#7
;;;343    		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
000014  4c13              LDR      r4,|L1.100|
000016  1b04              SUBS     r4,r0,r4
000018  1b1b              SUBS     r3,r3,r4
                  |L1.26|
;;;344    	}
;;;345    
;;;346    	pucAlignedHeap = ( uint8_t * ) uxAddress;
00001a  4602              MOV      r2,r0
;;;347    
;;;348    	/* xStart is used to hold a pointer to the first item in the list of free
;;;349    	blocks.  The void cast is used to prevent compiler warnings. */
;;;350    	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
00001c  4c12              LDR      r4,|L1.104|
00001e  6022              STR      r2,[r4,#0]  ; xStart
;;;351    	xStart.xBlockSize = ( size_t ) 0;
000020  2400              MOVS     r4,#0
000022  4d11              LDR      r5,|L1.104|
000024  606c              STR      r4,[r5,#4]  ; xStart
;;;352    
;;;353    	/* pxEnd is used to mark the end of the list of free blocks and is inserted
;;;354    	at the end of the heap space. */
;;;355    	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
000026  18d0              ADDS     r0,r2,r3
;;;356    	uxAddress -= xHeapStructSize;
000028  3808              SUBS     r0,r0,#8
;;;357    	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
00002a  f0200007          BIC      r0,r0,#7
;;;358    	pxEnd = ( void * ) uxAddress;
00002e  4c0f              LDR      r4,|L1.108|
000030  6020              STR      r0,[r4,#0]  ; pxEnd
;;;359    	pxEnd->xBlockSize = 0;
000032  2400              MOVS     r4,#0
000034  4d0d              LDR      r5,|L1.108|
000036  682d              LDR      r5,[r5,#0]  ; pxEnd
000038  606c              STR      r4,[r5,#4]
;;;360    	pxEnd->pxNextFreeBlock = NULL;
00003a  4d0c              LDR      r5,|L1.108|
00003c  682d              LDR      r5,[r5,#0]  ; pxEnd
00003e  602c              STR      r4,[r5,#0]
;;;361    
;;;362    	/* To start with there is a single free block that is sized to take up the
;;;363    	entire heap space, minus the space taken by pxEnd. */
;;;364    	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
000040  4611              MOV      r1,r2
;;;365    	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
000042  1a44              SUBS     r4,r0,r1
000044  604c              STR      r4,[r1,#4]
;;;366    	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
000046  4c09              LDR      r4,|L1.108|
000048  6824              LDR      r4,[r4,#0]  ; pxEnd
00004a  600c              STR      r4,[r1,#0]
;;;367    
;;;368    	/* Only one block exists - and it covers the entire usable heap space. */
;;;369    	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
00004c  4d08              LDR      r5,|L1.112|
00004e  684c              LDR      r4,[r1,#4]
000050  602c              STR      r4,[r5,#0]  ; xMinimumEverFreeBytesRemaining
;;;370    	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
000052  4d08              LDR      r5,|L1.116|
000054  684c              LDR      r4,[r1,#4]
000056  602c              STR      r4,[r5,#0]  ; xFreeBytesRemaining
;;;371    
;;;372    	/* Work out the position of the top bit in a size_t variable. */
;;;373    	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
000058  f04f4400          MOV      r4,#0x80000000
00005c  4d06              LDR      r5,|L1.120|
00005e  602c              STR      r4,[r5,#0]  ; xBlockAllocatedBit
;;;374    }
000060  bd30              POP      {r4,r5,pc}
;;;375    /*-----------------------------------------------------------*/
                          ENDP

000062  0000              DCW      0x0000
                  |L1.100|
                          DCD      ucHeap
                  |L1.104|
                          DCD      xStart
                  |L1.108|
                          DCD      pxEnd
                  |L1.112|
                          DCD      xMinimumEverFreeBytesRemaining
                  |L1.116|
                          DCD      xFreeBytesRemaining
                  |L1.120|
                          DCD      xBlockAllocatedBit

                          AREA ||i.prvInsertBlockIntoFreeList||, CODE, READONLY, ALIGN=2

                  prvInsertBlockIntoFreeList PROC
;;;376    
;;;377    static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
000000  b510              PUSH     {r4,lr}
;;;378    {
000002  4601              MOV      r1,r0
;;;379    BlockLink_t *pxIterator;
;;;380    uint8_t *puc;
;;;381    
;;;382    	/* Iterate through the list until a block is found that has a higher address
;;;383    	than the block being inserted. */
;;;384    	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
000004  4816              LDR      r0,|L2.96|
000006  e000              B        |L2.10|
                  |L2.8|
000008  6800              LDR      r0,[r0,#0]
                  |L2.10|
00000a  6803              LDR      r3,[r0,#0]
00000c  428b              CMP      r3,r1
00000e  d3fb              BCC      |L2.8|
;;;385    	{
;;;386    		/* Nothing to do here, just iterate to the right position. */
;;;387    	}
;;;388    
;;;389    	/* Do the block being inserted, and the block it is being inserted after
;;;390    	make a contiguous block of memory? */
;;;391    	puc = ( uint8_t * ) pxIterator;
000010  4602              MOV      r2,r0
;;;392    	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
000012  6843              LDR      r3,[r0,#4]
000014  4413              ADD      r3,r3,r2
000016  428b              CMP      r3,r1
000018  d104              BNE      |L2.36|
;;;393    	{
;;;394    		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
00001a  6843              LDR      r3,[r0,#4]
00001c  684c              LDR      r4,[r1,#4]
00001e  4423              ADD      r3,r3,r4
000020  6043              STR      r3,[r0,#4]
;;;395    		pxBlockToInsert = pxIterator;
000022  4601              MOV      r1,r0
                  |L2.36|
;;;396    	}
;;;397    	else
;;;398    	{
;;;399    		mtCOVERAGE_TEST_MARKER();
;;;400    	}
;;;401    
;;;402    	/* Do the block being inserted, and the block it is being inserted before
;;;403    	make a contiguous block of memory? */
;;;404    	puc = ( uint8_t * ) pxBlockToInsert;
000024  460a              MOV      r2,r1
;;;405    	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
000026  684b              LDR      r3,[r1,#4]
000028  4413              ADD      r3,r3,r2
00002a  6804              LDR      r4,[r0,#0]
00002c  42a3              CMP      r3,r4
00002e  d111              BNE      |L2.84|
;;;406    	{
;;;407    		if( pxIterator->pxNextFreeBlock != pxEnd )
000030  4c0c              LDR      r4,|L2.100|
000032  6803              LDR      r3,[r0,#0]
000034  6824              LDR      r4,[r4,#0]  ; pxEnd
000036  42a3              CMP      r3,r4
000038  d008              BEQ      |L2.76|
;;;408    		{
;;;409    			/* Form one big block from the two blocks. */
;;;410    			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
00003a  684b              LDR      r3,[r1,#4]
00003c  6804              LDR      r4,[r0,#0]
00003e  6864              LDR      r4,[r4,#4]
000040  4423              ADD      r3,r3,r4
000042  604b              STR      r3,[r1,#4]
;;;411    			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
000044  6803              LDR      r3,[r0,#0]
000046  681b              LDR      r3,[r3,#0]
000048  600b              STR      r3,[r1,#0]
00004a  e005              B        |L2.88|
                  |L2.76|
;;;412    		}
;;;413    		else
;;;414    		{
;;;415    			pxBlockToInsert->pxNextFreeBlock = pxEnd;
00004c  4b05              LDR      r3,|L2.100|
00004e  681b              LDR      r3,[r3,#0]  ; pxEnd
000050  600b              STR      r3,[r1,#0]
000052  e001              B        |L2.88|
                  |L2.84|
;;;416    		}
;;;417    	}
;;;418    	else
;;;419    	{
;;;420    		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
000054  6803              LDR      r3,[r0,#0]
000056  600b              STR      r3,[r1,#0]
                  |L2.88|
;;;421    	}
;;;422    
;;;423    	/* If the block being inserted plugged a gab, so was merged with the block
;;;424    	before and the block after, then it's pxNextFreeBlock pointer will have
;;;425    	already been set, and should not be set here as that would make it point
;;;426    	to itself. */
;;;427    	if( pxIterator != pxBlockToInsert )
000058  4288              CMP      r0,r1
00005a  d000              BEQ      |L2.94|
;;;428    	{
;;;429    		pxIterator->pxNextFreeBlock = pxBlockToInsert;
00005c  6001              STR      r1,[r0,#0]
                  |L2.94|
;;;430    	}
;;;431    	else
;;;432    	{
;;;433    		mtCOVERAGE_TEST_MARKER();
;;;434    	}
;;;435    }
00005e  bd10              POP      {r4,pc}
;;;436    
                          ENDP

                  |L2.96|
                          DCD      xStart
                  |L2.100|
                          DCD      pxEnd

                          AREA ||i.pvPortMalloc||, CODE, READONLY, ALIGN=2

                  pvPortMalloc PROC
;;;112    
;;;113    void *pvPortMalloc( size_t xWantedSize )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;114    {
000004  4604              MOV      r4,r0
;;;115    BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
;;;116    void *pvReturn = NULL;
000006  f04f0800          MOV      r8,#0
;;;117    
;;;118    	vTaskSuspendAll();
00000a  f7fffffe          BL       vTaskSuspendAll
;;;119    	{
;;;120    		/* If this is the first call to malloc then the heap will require
;;;121    		initialisation to setup the list of free blocks. */
;;;122    		if( pxEnd == NULL )
00000e  4846              LDR      r0,|L3.296|
000010  6800              LDR      r0,[r0,#0]  ; pxEnd
000012  b908              CBNZ     r0,|L3.24|
;;;123    		{
;;;124    			prvHeapInit();
000014  f7fffffe          BL       prvHeapInit
                  |L3.24|
;;;125    		}
;;;126    		else
;;;127    		{
;;;128    			mtCOVERAGE_TEST_MARKER();
;;;129    		}
;;;130    
;;;131    		/* Check the requested block size is not so large that the top bit is
;;;132    		set.  The top bit of the block size member of the BlockLink_t structure
;;;133    		is used to determine who owns the block - the application or the
;;;134    		kernel, so it must be free. */
;;;135    		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
000018  4844              LDR      r0,|L3.300|
00001a  6800              LDR      r0,[r0,#0]  ; xBlockAllocatedBit
00001c  4020              ANDS     r0,r0,r4
00001e  2800              CMP      r0,#0
000020  d16b              BNE      |L3.250|
;;;136    		{
;;;137    			/* The wanted size is increased so it can contain a BlockLink_t
;;;138    			structure in addition to the requested amount of bytes. */
;;;139    			if( xWantedSize > 0 )
000022  b1d4              CBZ      r4,|L3.90|
;;;140    			{
;;;141    				xWantedSize += xHeapStructSize;
000024  3408              ADDS     r4,r4,#8
;;;142    
;;;143    				/* Ensure that blocks are always aligned to the required number
;;;144    				of bytes. */
;;;145    				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
000026  f0040007          AND      r0,r4,#7
00002a  b1b0              CBZ      r0,|L3.90|
;;;146    				{
;;;147    					/* Byte alignment required. */
;;;148    					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
00002c  f0040007          AND      r0,r4,#7
000030  f1c00008          RSB      r0,r0,#8
000034  4404              ADD      r4,r4,r0
;;;149    					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
000036  f0040007          AND      r0,r4,#7
00003a  b908              CBNZ     r0,|L3.64|
00003c  2001              MOVS     r0,#1
00003e  e000              B        |L3.66|
                  |L3.64|
000040  2000              MOVS     r0,#0
                  |L3.66|
000042  b950              CBNZ     r0,|L3.90|
000044  bf00              NOP      
000046  2040              MOVS     r0,#0x40
000048  f3808811          MSR      BASEPRI,r0
00004c  f3bf8f4f          DSB      
000050  f3bf8f6f          ISB      
000054  bf00              NOP      
000056  bf00              NOP      
                  |L3.88|
000058  e7fe              B        |L3.88|
                  |L3.90|
;;;150    				}
;;;151    				else
;;;152    				{
;;;153    					mtCOVERAGE_TEST_MARKER();
;;;154    				}
;;;155    			}
;;;156    			else
;;;157    			{
;;;158    				mtCOVERAGE_TEST_MARKER();
;;;159    			}
;;;160    
;;;161    			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
00005a  2c00              CMP      r4,#0
00005c  d04d              BEQ      |L3.250|
00005e  4834              LDR      r0,|L3.304|
000060  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
000062  4284              CMP      r4,r0
000064  d849              BHI      |L3.250|
;;;162    			{
;;;163    				/* Traverse the list from the start	(lowest address) block until
;;;164    				one	of adequate size is found. */
;;;165    				pxPreviousBlock = &xStart;
000066  4e33              LDR      r6,|L3.308|
;;;166    				pxBlock = xStart.pxNextFreeBlock;
000068  4630              MOV      r0,r6
00006a  6805              LDR      r5,[r0,#0]  ; xStart
;;;167    				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
00006c  e001              B        |L3.114|
                  |L3.110|
;;;168    				{
;;;169    					pxPreviousBlock = pxBlock;
00006e  462e              MOV      r6,r5
;;;170    					pxBlock = pxBlock->pxNextFreeBlock;
000070  682d              LDR      r5,[r5,#0]
                  |L3.114|
000072  6868              LDR      r0,[r5,#4]            ;167
000074  42a0              CMP      r0,r4                 ;167
000076  d202              BCS      |L3.126|
000078  6828              LDR      r0,[r5,#0]            ;167
00007a  2800              CMP      r0,#0                 ;167
00007c  d1f7              BNE      |L3.110|
                  |L3.126|
;;;171    				}
;;;172    
;;;173    				/* If the end marker was reached then a block of adequate size
;;;174    				was	not found. */
;;;175    				if( pxBlock != pxEnd )
00007e  482a              LDR      r0,|L3.296|
000080  6800              LDR      r0,[r0,#0]  ; pxEnd
000082  4285              CMP      r5,r0
000084  d039              BEQ      |L3.250|
;;;176    				{
;;;177    					/* Return the memory space pointed to - jumping over the
;;;178    					BlockLink_t structure at its start. */
;;;179    					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
000086  6830              LDR      r0,[r6,#0]
000088  f1000808          ADD      r8,r0,#8
;;;180    
;;;181    					/* This block is being returned for use so must be taken out
;;;182    					of the list of free blocks. */
;;;183    					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
00008c  6828              LDR      r0,[r5,#0]
00008e  6030              STR      r0,[r6,#0]
;;;184    
;;;185    					/* If the block is larger than required it can be split into
;;;186    					two. */
;;;187    					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
000090  6868              LDR      r0,[r5,#4]
000092  1b00              SUBS     r0,r0,r4
000094  2810              CMP      r0,#0x10
000096  d919              BLS      |L3.204|
;;;188    					{
;;;189    						/* This block is to be split into two.  Create a new
;;;190    						block following the number of bytes requested. The void
;;;191    						cast is used to prevent byte alignment warnings from the
;;;192    						compiler. */
;;;193    						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
000098  192f              ADDS     r7,r5,r4
;;;194    						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
00009a  f0070007          AND      r0,r7,#7
00009e  b908              CBNZ     r0,|L3.164|
0000a0  2001              MOVS     r0,#1
0000a2  e000              B        |L3.166|
                  |L3.164|
0000a4  2000              MOVS     r0,#0
                  |L3.166|
0000a6  b950              CBNZ     r0,|L3.190|
0000a8  bf00              NOP      
0000aa  2040              MOVS     r0,#0x40
0000ac  f3808811          MSR      BASEPRI,r0
0000b0  f3bf8f4f          DSB      
0000b4  f3bf8f6f          ISB      
0000b8  bf00              NOP      
0000ba  bf00              NOP      
                  |L3.188|
0000bc  e7fe              B        |L3.188|
                  |L3.190|
;;;195    
;;;196    						/* Calculate the sizes of two blocks split from the
;;;197    						single block. */
;;;198    						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
0000be  6868              LDR      r0,[r5,#4]
0000c0  1b00              SUBS     r0,r0,r4
0000c2  6078              STR      r0,[r7,#4]
;;;199    						pxBlock->xBlockSize = xWantedSize;
0000c4  606c              STR      r4,[r5,#4]
;;;200    
;;;201    						/* Insert the new block into the list of free blocks. */
;;;202    						prvInsertBlockIntoFreeList( pxNewBlockLink );
0000c6  4638              MOV      r0,r7
0000c8  f7fffffe          BL       prvInsertBlockIntoFreeList
                  |L3.204|
;;;203    					}
;;;204    					else
;;;205    					{
;;;206    						mtCOVERAGE_TEST_MARKER();
;;;207    					}
;;;208    
;;;209    					xFreeBytesRemaining -= pxBlock->xBlockSize;
0000cc  4918              LDR      r1,|L3.304|
0000ce  6868              LDR      r0,[r5,#4]
0000d0  6809              LDR      r1,[r1,#0]  ; xFreeBytesRemaining
0000d2  1a08              SUBS     r0,r1,r0
0000d4  4916              LDR      r1,|L3.304|
0000d6  6008              STR      r0,[r1,#0]  ; xFreeBytesRemaining
;;;210    
;;;211    					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
0000d8  4608              MOV      r0,r1
0000da  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
0000dc  4916              LDR      r1,|L3.312|
0000de  6809              LDR      r1,[r1,#0]  ; xMinimumEverFreeBytesRemaining
0000e0  4288              CMP      r0,r1
0000e2  d203              BCS      |L3.236|
;;;212    					{
;;;213    						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
0000e4  4812              LDR      r0,|L3.304|
0000e6  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
0000e8  4913              LDR      r1,|L3.312|
0000ea  6008              STR      r0,[r1,#0]  ; xMinimumEverFreeBytesRemaining
                  |L3.236|
;;;214    					}
;;;215    					else
;;;216    					{
;;;217    						mtCOVERAGE_TEST_MARKER();
;;;218    					}
;;;219    
;;;220    					/* The block is being returned - it is allocated and owned
;;;221    					by the application and has no "next" block. */
;;;222    					pxBlock->xBlockSize |= xBlockAllocatedBit;
0000ec  490f              LDR      r1,|L3.300|
0000ee  6868              LDR      r0,[r5,#4]
0000f0  6809              LDR      r1,[r1,#0]  ; xBlockAllocatedBit
0000f2  4308              ORRS     r0,r0,r1
0000f4  6068              STR      r0,[r5,#4]
;;;223    					pxBlock->pxNextFreeBlock = NULL;
0000f6  2000              MOVS     r0,#0
0000f8  6028              STR      r0,[r5,#0]
                  |L3.250|
;;;224    				}
;;;225    				else
;;;226    				{
;;;227    					mtCOVERAGE_TEST_MARKER();
;;;228    				}
;;;229    			}
;;;230    			else
;;;231    			{
;;;232    				mtCOVERAGE_TEST_MARKER();
;;;233    			}
;;;234    		}
;;;235    		else
;;;236    		{
;;;237    			mtCOVERAGE_TEST_MARKER();
;;;238    		}
;;;239    
;;;240    		traceMALLOC( pvReturn, xWantedSize );
;;;241    	}
;;;242    	( void ) xTaskResumeAll();
0000fa  f7fffffe          BL       xTaskResumeAll
;;;243    
;;;244    	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
;;;245    	{
;;;246    		if( pvReturn == NULL )
;;;247    		{
;;;248    			extern void vApplicationMallocFailedHook( void );
;;;249    			vApplicationMallocFailedHook();
;;;250    		}
;;;251    		else
;;;252    		{
;;;253    			mtCOVERAGE_TEST_MARKER();
;;;254    		}
;;;255    	}
;;;256    	#endif
;;;257    
;;;258    	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
0000fe  f0080007          AND      r0,r8,#7
000102  b908              CBNZ     r0,|L3.264|
000104  2001              MOVS     r0,#1
000106  e000              B        |L3.266|
                  |L3.264|
000108  2000              MOVS     r0,#0
                  |L3.266|
00010a  b950              CBNZ     r0,|L3.290|
00010c  bf00              NOP      
00010e  2040              MOVS     r0,#0x40
000110  f3808811          MSR      BASEPRI,r0
000114  f3bf8f4f          DSB      
000118  f3bf8f6f          ISB      
00011c  bf00              NOP      
00011e  bf00              NOP      
                  |L3.288|
000120  e7fe              B        |L3.288|
                  |L3.290|
;;;259    	return pvReturn;
000122  4640              MOV      r0,r8
;;;260    }
000124  e8bd81f0          POP      {r4-r8,pc}
;;;261    /*-----------------------------------------------------------*/
                          ENDP

                  |L3.296|
                          DCD      pxEnd
                  |L3.300|
                          DCD      xBlockAllocatedBit
                  |L3.304|
                          DCD      xFreeBytesRemaining
                  |L3.308|
                          DCD      xStart
                  |L3.312|
                          DCD      xMinimumEverFreeBytesRemaining

                          AREA ||i.vPortFree||, CODE, READONLY, ALIGN=2

                  vPortFree PROC
;;;262    
;;;263    void vPortFree( void *pv )
000000  b570              PUSH     {r4-r6,lr}
;;;264    {
000002  4606              MOV      r6,r0
;;;265    uint8_t *puc = ( uint8_t * ) pv;
000004  4635              MOV      r5,r6
;;;266    BlockLink_t *pxLink;
;;;267    
;;;268    	if( pv != NULL )
000006  2e00              CMP      r6,#0
000008  d03f              BEQ      |L4.138|
;;;269    	{
;;;270    		/* The memory being freed will have an BlockLink_t structure immediately
;;;271    		before it. */
;;;272    		puc -= xHeapStructSize;
00000a  3d08              SUBS     r5,r5,#8
;;;273    
;;;274    		/* This casting is to keep the compiler from issuing warnings. */
;;;275    		pxLink = ( void * ) puc;
00000c  462c              MOV      r4,r5
;;;276    
;;;277    		/* Check the block is actually allocated. */
;;;278    		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
00000e  491f              LDR      r1,|L4.140|
000010  6860              LDR      r0,[r4,#4]
000012  6809              LDR      r1,[r1,#0]  ; xBlockAllocatedBit
000014  4008              ANDS     r0,r0,r1
000016  b108              CBZ      r0,|L4.28|
000018  2001              MOVS     r0,#1
00001a  e000              B        |L4.30|
                  |L4.28|
00001c  2000              MOVS     r0,#0
                  |L4.30|
00001e  b950              CBNZ     r0,|L4.54|
000020  bf00              NOP      
000022  2040              MOVS     r0,#0x40
000024  f3808811          MSR      BASEPRI,r0
000028  f3bf8f4f          DSB      
00002c  f3bf8f6f          ISB      
000030  bf00              NOP      
000032  bf00              NOP      
                  |L4.52|
000034  e7fe              B        |L4.52|
                  |L4.54|
;;;279    		configASSERT( pxLink->pxNextFreeBlock == NULL );
000036  6820              LDR      r0,[r4,#0]
000038  b908              CBNZ     r0,|L4.62|
00003a  2001              MOVS     r0,#1
00003c  e000              B        |L4.64|
                  |L4.62|
00003e  2000              MOVS     r0,#0
                  |L4.64|
000040  b950              CBNZ     r0,|L4.88|
000042  bf00              NOP      
000044  2040              MOVS     r0,#0x40
000046  f3808811          MSR      BASEPRI,r0
00004a  f3bf8f4f          DSB      
00004e  f3bf8f6f          ISB      
000052  bf00              NOP      
000054  bf00              NOP      
                  |L4.86|
000056  e7fe              B        |L4.86|
                  |L4.88|
;;;280    
;;;281    		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
000058  490c              LDR      r1,|L4.140|
00005a  6860              LDR      r0,[r4,#4]
00005c  6809              LDR      r1,[r1,#0]  ; xBlockAllocatedBit
00005e  4008              ANDS     r0,r0,r1
000060  b198              CBZ      r0,|L4.138|
;;;282    		{
;;;283    			if( pxLink->pxNextFreeBlock == NULL )
000062  6820              LDR      r0,[r4,#0]
000064  b988              CBNZ     r0,|L4.138|
;;;284    			{
;;;285    				/* The block is being returned to the heap - it is no longer
;;;286    				allocated. */
;;;287    				pxLink->xBlockSize &= ~xBlockAllocatedBit;
000066  4909              LDR      r1,|L4.140|
000068  6860              LDR      r0,[r4,#4]
00006a  6809              LDR      r1,[r1,#0]  ; xBlockAllocatedBit
00006c  4388              BICS     r0,r0,r1
00006e  6060              STR      r0,[r4,#4]
;;;288    
;;;289    				vTaskSuspendAll();
000070  f7fffffe          BL       vTaskSuspendAll
;;;290    				{
;;;291    					/* Add this block to the list of free blocks. */
;;;292    					xFreeBytesRemaining += pxLink->xBlockSize;
000074  4906              LDR      r1,|L4.144|
000076  6860              LDR      r0,[r4,#4]
000078  6809              LDR      r1,[r1,#0]  ; xFreeBytesRemaining
00007a  4408              ADD      r0,r0,r1
00007c  4904              LDR      r1,|L4.144|
00007e  6008              STR      r0,[r1,#0]  ; xFreeBytesRemaining
;;;293    					traceFREE( pv, pxLink->xBlockSize );
;;;294    					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
000080  4620              MOV      r0,r4
000082  f7fffffe          BL       prvInsertBlockIntoFreeList
;;;295    				}
;;;296    				( void ) xTaskResumeAll();
000086  f7fffffe          BL       xTaskResumeAll
                  |L4.138|
;;;297    			}
;;;298    			else
;;;299    			{
;;;300    				mtCOVERAGE_TEST_MARKER();
;;;301    			}
;;;302    		}
;;;303    		else
;;;304    		{
;;;305    			mtCOVERAGE_TEST_MARKER();
;;;306    		}
;;;307    	}
;;;308    }
00008a  bd70              POP      {r4-r6,pc}
;;;309    /*-----------------------------------------------------------*/
                          ENDP

                  |L4.140|
                          DCD      xBlockAllocatedBit
                  |L4.144|
                          DCD      xFreeBytesRemaining

                          AREA ||i.vPortInitialiseBlocks||, CODE, READONLY, ALIGN=1

                  vPortInitialiseBlocks PROC
;;;322    
;;;323    void vPortInitialiseBlocks( void )
000000  4770              BX       lr
;;;324    {
;;;325    	/* This just exists to keep the linker quiet. */
;;;326    }
;;;327    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xPortGetFreeHeapSize||, CODE, READONLY, ALIGN=2

                  xPortGetFreeHeapSize PROC
;;;310    
;;;311    size_t xPortGetFreeHeapSize( void )
000000  4801              LDR      r0,|L6.8|
;;;312    {
;;;313    	return xFreeBytesRemaining;
000002  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
;;;314    }
000004  4770              BX       lr
;;;315    /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      xFreeBytesRemaining

                          AREA ||i.xPortGetMinimumEverFreeHeapSize||, CODE, READONLY, ALIGN=2

                  xPortGetMinimumEverFreeHeapSize PROC
;;;316    
;;;317    size_t xPortGetMinimumEverFreeHeapSize( void )
000000  4801              LDR      r0,|L7.8|
;;;318    {
;;;319    	return xMinimumEverFreeBytesRemaining;
000002  6800              LDR      r0,[r0,#0]  ; xMinimumEverFreeBytesRemaining
;;;320    }
000004  4770              BX       lr
;;;321    /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      xMinimumEverFreeBytesRemaining

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ucHeap
                          %        98304

                          AREA ||.data||, DATA, ALIGN=2

                  xStart
                          %        8
                  pxEnd
                          DCD      0x00000000
                  xFreeBytesRemaining
                          DCD      0x00000000
                  xMinimumEverFreeBytesRemaining
                          DCD      0x00000000
                  xBlockAllocatedBit
                          DCD      0x00000000
