; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\tasks.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\tasks.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\tasks.crf App\Tasks.c]
                          THUMB

                          AREA ||i.PID_Init||, CODE, READONLY, ALIGN=2

                  PID_Init PROC
;;;24     }
;;;25     void PID_Init(void)         //初始化PID值
000000  b510              PUSH     {r4,lr}
;;;26     {
;;;27     	Set_PID(&PID1,M2006_SPEED);
000002  2100              MOVS     r1,#0
000004  4843              LDR      r0,|L1.276|
000006  f7fffffe          BL       Set_PID
;;;28     	Set_PID(&PID2,M2006_SPEED);
00000a  2100              MOVS     r1,#0
00000c  4842              LDR      r0,|L1.280|
00000e  f7fffffe          BL       Set_PID
;;;29     	Set_PID(&PID3,M2006_SPEED);
000012  2100              MOVS     r1,#0
000014  4841              LDR      r0,|L1.284|
000016  f7fffffe          BL       Set_PID
;;;30     	Set_PID(&PID4,M2006_SPEED);
00001a  2100              MOVS     r1,#0
00001c  4840              LDR      r0,|L1.288|
00001e  f7fffffe          BL       Set_PID
;;;31     	Set_PID(&PID5,M3510_SPEED);
000022  2104              MOVS     r1,#4
000024  483f              LDR      r0,|L1.292|
000026  f7fffffe          BL       Set_PID
;;;32     	Set_PID(&PID6,M3510_SPEED);
00002a  2104              MOVS     r1,#4
00002c  483e              LDR      r0,|L1.296|
00002e  f7fffffe          BL       Set_PID
;;;33     	Set_PID(&PID7,M2006_SPEED);
000032  2100              MOVS     r1,#0
000034  483d              LDR      r0,|L1.300|
000036  f7fffffe          BL       Set_PID
;;;34     	Set_PID(&PID8,M2006_SPEED);
00003a  2100              MOVS     r1,#0
00003c  483c              LDR      r0,|L1.304|
00003e  f7fffffe          BL       Set_PID
;;;35     	Set_PID(&Ball2_Angle,CASCADE_ANGLE);
000042  2106              MOVS     r1,#6
000044  483b              LDR      r0,|L1.308|
000046  f7fffffe          BL       Set_PID
;;;36     	Set_PID(&Ball1_Angle,CASCADE_ANGLE);
00004a  2106              MOVS     r1,#6
00004c  483a              LDR      r0,|L1.312|
00004e  f7fffffe          BL       Set_PID
;;;37     	
;;;38     	Chassis_Vx.Kp=1;
000052  eeb70a00          VMOV.F32 s0,#1.00000000
000056  ee100a10          VMOV     r0,s0
00005a  4938              LDR      r1,|L1.316|
00005c  6008              STR      r0,[r1,#0]  ; Chassis_Vx
;;;39     	Chassis_Vy.Kp=1;
00005e  eeb70a00          VMOV.F32 s0,#1.00000000
000062  ee100a10          VMOV     r0,s0
000066  4936              LDR      r1,|L1.320|
000068  6008              STR      r0,[r1,#0]  ; Chassis_Vy
;;;40     	Chassis_Vy.Maxinum=2;
00006a  eeb00a00          VMOV.F32 s0,#2.00000000
00006e  ee100a10          VMOV     r0,s0
000072  6248              STR      r0,[r1,#0x24]  ; Chassis_Vy
;;;41     	Chassis_Vy.Minium=-2;
000074  eeb80a00          VMOV.F32 s0,#-2.00000000
000078  ee100a10          VMOV     r0,s0
00007c  6288              STR      r0,[r1,#0x28]  ; Chassis_Vy
;;;42     	Chassis_Vx.Maxinum=2;
00007e  eeb00a00          VMOV.F32 s0,#2.00000000
000082  ee100a10          VMOV     r0,s0
000086  492d              LDR      r1,|L1.316|
000088  6248              STR      r0,[r1,#0x24]  ; Chassis_Vx
;;;43     	Chassis_Vx.Minium=-2;
00008a  eeb80a00          VMOV.F32 s0,#-2.00000000
00008e  ee100a10          VMOV     r0,s0
000092  6288              STR      r0,[r1,#0x28]  ; Chassis_Vx
;;;44     
;;;45     	Chassis_Wz.Kp=1.7;
000094  ed9f0a2b          VLDR     s0,|L1.324|
000098  ee100a10          VMOV     r0,s0
00009c  492a              LDR      r1,|L1.328|
00009e  6008              STR      r0,[r1,#0]  ; Chassis_Wz
;;;46     	Chassis_Wz.Ki=0;
0000a0  ed9f0a2a          VLDR     s0,|L1.332|
0000a4  ee100a10          VMOV     r0,s0
0000a8  6048              STR      r0,[r1,#4]  ; Chassis_Wz
;;;47     	Chassis_Wz.Kd=5;
0000aa  eeb10a04          VMOV.F32 s0,#5.00000000
0000ae  ee100a10          VMOV     r0,s0
0000b2  6088              STR      r0,[r1,#8]  ; Chassis_Wz
;;;48     	Chassis_Wz.I_Sum_Max=20;
0000b4  eeb30a04          VMOV.F32 s0,#20.00000000
0000b8  ee100a10          VMOV     r0,s0
0000bc  62c8              STR      r0,[r1,#0x2c]  ; Chassis_Wz
;;;49     	Chassis_Wz.Maxinum=30;
0000be  eeb30a0e          VMOV.F32 s0,#30.00000000
0000c2  ee100a10          VMOV     r0,s0
0000c6  6248              STR      r0,[r1,#0x24]  ; Chassis_Wz
;;;50     	Chassis_Wz.Minium=-30;
0000c8  eebb0a0e          VMOV.F32 s0,#-30.00000000
0000cc  ee100a10          VMOV     r0,s0
0000d0  6288              STR      r0,[r1,#0x28]  ; Chassis_Wz
;;;51     	
;;;52     	Chassis_Victor_y.Kp=1;
0000d2  eeb70a00          VMOV.F32 s0,#1.00000000
0000d6  ee100a10          VMOV     r0,s0
0000da  491d              LDR      r1,|L1.336|
0000dc  6008              STR      r0,[r1,#0]  ; Chassis_Victor_y
;;;53     	Chassis_Victor_y.Maxinum=0.5;
0000de  eeb60a00          VMOV.F32 s0,#0.50000000
0000e2  ee100a10          VMOV     r0,s0
0000e6  6248              STR      r0,[r1,#0x24]  ; Chassis_Victor_y
;;;54     	Chassis_Victor_y.Minium=-0.5;
0000e8  eebe0a00          VMOV.F32 s0,#-0.50000000
0000ec  ee100a10          VMOV     r0,s0
0000f0  6288              STR      r0,[r1,#0x28]  ; Chassis_Victor_y
;;;55     
;;;56     	Chassis_Victor_x.Kp=1;
0000f2  eeb70a00          VMOV.F32 s0,#1.00000000
0000f6  ee100a10          VMOV     r0,s0
0000fa  4916              LDR      r1,|L1.340|
0000fc  6008              STR      r0,[r1,#0]  ; Chassis_Victor_x
;;;57     	Chassis_Victor_x.Maxinum=0.5;
0000fe  eeb60a00          VMOV.F32 s0,#0.50000000
000102  ee100a10          VMOV     r0,s0
000106  6248              STR      r0,[r1,#0x24]  ; Chassis_Victor_x
;;;58     	Chassis_Victor_x.Minium=-0.5;
000108  eebe0a00          VMOV.F32 s0,#-0.50000000
00010c  ee100a10          VMOV     r0,s0
000110  6288              STR      r0,[r1,#0x28]  ; Chassis_Victor_x
;;;59     }
000112  bd10              POP      {r4,pc}
;;;60     void Remote_Control(void* pvParameters)              //周期处理遥控器接收值
                          ENDP

                  |L1.276|
                          DCD      PID1
                  |L1.280|
                          DCD      PID2
                  |L1.284|
                          DCD      PID3
                  |L1.288|
                          DCD      PID4
                  |L1.292|
                          DCD      PID5
                  |L1.296|
                          DCD      PID6
                  |L1.300|
                          DCD      PID7
                  |L1.304|
                          DCD      PID8
                  |L1.308|
                          DCD      Ball2_Angle
                  |L1.312|
                          DCD      Ball1_Angle
                  |L1.316|
                          DCD      Chassis_Vx
                  |L1.320|
                          DCD      Chassis_Vy
                  |L1.324|
000144  3fd9999a          DCFS     0x3fd9999a ; 1.7000000476837158
                  |L1.328|
                          DCD      Chassis_Wz
                  |L1.332|
00014c  00000000          DCFS     0x00000000 ; 0
                  |L1.336|
                          DCD      Chassis_Victor_y
                  |L1.340|
                          DCD      Chassis_Victor_x

                          AREA ||i.Remote_Control||, CODE, READONLY, ALIGN=2

                  Remote_Control PROC
;;;59     }
;;;60     void Remote_Control(void* pvParameters)              //周期处理遥控器接收值
000000  e08c              B        |L2.284|
                  |L2.2|
;;;61     {
;;;62     	while(1)
;;;63     	{
;;;64     		if(Remote.sw1==Left_L&&Remote.sw2==Right_L)
000002  4847              LDR      r0,|L2.288|
000004  7a00              LDRB     r0,[r0,#8]  ; Remote
000006  2802              CMP      r0,#2
000008  d135              BNE      |L2.118|
00000a  4845              LDR      r0,|L2.288|
00000c  7a40              LDRB     r0,[r0,#9]  ; Remote
00000e  2802              CMP      r0,#2
000010  d131              BNE      |L2.118|
;;;65     		{
;;;66     			Chassis_Vx.User = -1*(Remote.ch1/330.0f);
000012  4843              LDR      r0,|L2.288|
000014  f9b00000          LDRSH    r0,[r0,#0]  ; Remote
000018  ee000a10          VMOV     s0,r0
00001c  eef80ac0          VCVT.F32.S32 s1,s0
000020  ed9f1a40          VLDR     s2,|L2.292|
000024  ee800a81          VDIV.F32 s0,s1,s2
000028  eeff0a00          VMOV.F32 s1,#-1.00000000
00002c  ee200a20          VMUL.F32 s0,s0,s1
000030  ee100a10          VMOV     r0,s0
000034  493c              LDR      r1,|L2.296|
000036  61c8              STR      r0,[r1,#0x1c]  ; Chassis_Vx
;;;67     			Chassis_Vy.User = Remote.ch2/330.0f;
000038  4839              LDR      r0,|L2.288|
00003a  f9b00002          LDRSH    r0,[r0,#2]  ; Remote
00003e  ee000a10          VMOV     s0,r0
000042  eef80ac0          VCVT.F32.S32 s1,s0
000046  ed9f1a37          VLDR     s2,|L2.292|
00004a  ee800a81          VDIV.F32 s0,s1,s2
00004e  ee100a10          VMOV     r0,s0
000052  4936              LDR      r1,|L2.300|
000054  61c8              STR      r0,[r1,#0x1c]  ; Chassis_Vy
;;;68     			Chassis_Wz.User = Remote.ch3/16.0f;
000056  4832              LDR      r0,|L2.288|
000058  f9b00004          LDRSH    r0,[r0,#4]  ; Remote
00005c  ee000a10          VMOV     s0,r0
000060  eef80ac0          VCVT.F32.S32 s1,s0
000064  eeb31a00          VMOV.F32 s2,#16.00000000
000068  ee800a81          VDIV.F32 s0,s1,s2
00006c  ee100a10          VMOV     r0,s0
000070  492f              LDR      r1,|L2.304|
000072  61c8              STR      r0,[r1,#0x1c]  ; Chassis_Wz
000074  e04f              B        |L2.278|
                  |L2.118|
;;;69     		}
;;;70     		else if(Remote.sw1==Left_L&&Remote.sw2==Right_M)
000076  482a              LDR      r0,|L2.288|
000078  7a00              LDRB     r0,[r0,#8]  ; Remote
00007a  2802              CMP      r0,#2
00007c  d114              BNE      |L2.168|
00007e  4828              LDR      r0,|L2.288|
000080  7a40              LDRB     r0,[r0,#9]  ; Remote
000082  2803              CMP      r0,#3
000084  d110              BNE      |L2.168|
;;;71     		{
;;;72     			Ball1_Angle.User+=49152;
000086  482b              LDR      r0,|L2.308|
000088  69c0              LDR      r0,[r0,#0x1c]  ; Ball1_Angle
00008a  ee000a10          VMOV     s0,r0
00008e  eddf0a2a          VLDR     s1,|L2.312|
000092  ee300a20          VADD.F32 s0,s0,s1
000096  ee100a10          VMOV     r0,s0
00009a  4926              LDR      r1,|L2.308|
00009c  61c8              STR      r0,[r1,#0x1c]  ; Ball1_Angle
;;;73     			vTaskDelay(1000);
00009e  f44f707a          MOV      r0,#0x3e8
0000a2  f7fffffe          BL       vTaskDelay
0000a6  e036              B        |L2.278|
                  |L2.168|
;;;74     		}
;;;75     		else if(Remote.sw1==Left_M&&Remote.sw2==Right_M)
0000a8  481d              LDR      r0,|L2.288|
0000aa  7a00              LDRB     r0,[r0,#8]  ; Remote
0000ac  2803              CMP      r0,#3
0000ae  d114              BNE      |L2.218|
0000b0  481b              LDR      r0,|L2.288|
0000b2  7a40              LDRB     r0,[r0,#9]  ; Remote
0000b4  2803              CMP      r0,#3
0000b6  d110              BNE      |L2.218|
;;;76     		{
;;;77     			Ball2_Angle.User+=49152;
0000b8  4820              LDR      r0,|L2.316|
0000ba  69c0              LDR      r0,[r0,#0x1c]  ; Ball2_Angle
0000bc  ee000a10          VMOV     s0,r0
0000c0  eddf0a1d          VLDR     s1,|L2.312|
0000c4  ee300a20          VADD.F32 s0,s0,s1
0000c8  ee100a10          VMOV     r0,s0
0000cc  491b              LDR      r1,|L2.316|
0000ce  61c8              STR      r0,[r1,#0x1c]  ; Ball2_Angle
;;;78     			vTaskDelay(1000);
0000d0  f44f707a          MOV      r0,#0x3e8
0000d4  f7fffffe          BL       vTaskDelay
0000d8  e01d              B        |L2.278|
                  |L2.218|
;;;79     		}
;;;80     		else
;;;81     		{
;;;82     			PID5.User=0;
0000da  ed9f0a19          VLDR     s0,|L2.320|
0000de  ee100a10          VMOV     r0,s0
0000e2  4918              LDR      r1,|L2.324|
0000e4  61c8              STR      r0,[r1,#0x1c]  ; PID5
;;;83     			PID6.User=0;
0000e6  ed9f0a16          VLDR     s0,|L2.320|
0000ea  ee100a10          VMOV     r0,s0
0000ee  4916              LDR      r1,|L2.328|
0000f0  61c8              STR      r0,[r1,#0x1c]  ; PID6
;;;84     			Chassis_Vx.User = 0;
0000f2  ed9f0a13          VLDR     s0,|L2.320|
0000f6  ee100a10          VMOV     r0,s0
0000fa  490b              LDR      r1,|L2.296|
0000fc  61c8              STR      r0,[r1,#0x1c]  ; Chassis_Vx
;;;85     			Chassis_Vy.User = 0;
0000fe  ed9f0a10          VLDR     s0,|L2.320|
000102  ee100a10          VMOV     r0,s0
000106  4909              LDR      r1,|L2.300|
000108  61c8              STR      r0,[r1,#0x1c]  ; Chassis_Vy
;;;86     			Chassis_Wz.User = 0;
00010a  ed9f0a0d          VLDR     s0,|L2.320|
00010e  ee100a10          VMOV     r0,s0
000112  4907              LDR      r1,|L2.304|
000114  61c8              STR      r0,[r1,#0x1c]  ; Chassis_Wz
                  |L2.278|
;;;87     		}
;;;88     		vTaskDelay(5);
000116  2005              MOVS     r0,#5
000118  f7fffffe          BL       vTaskDelay
                  |L2.284|
00011c  e771              B        |L2.2|
;;;89     	}
;;;90     }
;;;91     
                          ENDP

00011e  0000              DCW      0x0000
                  |L2.288|
                          DCD      Remote
                  |L2.292|
000124  43a50000          DCFS     0x43a50000 ; 330
                  |L2.296|
                          DCD      Chassis_Vx
                  |L2.300|
                          DCD      Chassis_Vy
                  |L2.304|
                          DCD      Chassis_Wz
                  |L2.308|
                          DCD      Ball1_Angle
                  |L2.312|
000138  47400000          DCFS     0x47400000 ; 49152
                  |L2.316|
                          DCD      Ball2_Angle
                  |L2.320|
000140  00000000          DCFS     0x00000000 ; 0
                  |L2.324|
                          DCD      PID5
                  |L2.328|
                          DCD      PID6

                          AREA ||i.Renew_PID||, CODE, READONLY, ALIGN=2

                  Renew_PID PROC
;;;2      #if(USING_TASK == 1)
;;;3      void Renew_PID(void)         //更新PID值
000000  b510              PUSH     {r4,lr}
;;;4      {
;;;5      	PID_Renew(&PID1,moto_chassis[0].speed_rpm);
000002  483c              LDR      r0,|L3.244|
000004  f9b00000          LDRSH    r0,[r0,#0]  ; moto_chassis
000008  ee000a90          VMOV     s1,r0
00000c  eef80ae0          VCVT.F32.S32 s1,s1
000010  eeb00a60          VMOV.F32 s0,s1
000014  4838              LDR      r0,|L3.248|
000016  f7fffffe          BL       PID_Renew
;;;6      	PID_Renew(&PID2,moto_chassis[1].speed_rpm);
00001a  4836              LDR      r0,|L3.244|
00001c  f9b00028          LDRSH    r0,[r0,#0x28]  ; moto_chassis
000020  ee000a90          VMOV     s1,r0
000024  eef80ae0          VCVT.F32.S32 s1,s1
000028  eeb00a60          VMOV.F32 s0,s1
00002c  4833              LDR      r0,|L3.252|
00002e  f7fffffe          BL       PID_Renew
;;;7      	PID_Renew(&PID3,moto_chassis[2].speed_rpm);
000032  4830              LDR      r0,|L3.244|
000034  f9b00050          LDRSH    r0,[r0,#0x50]  ; moto_chassis
000038  ee000a90          VMOV     s1,r0
00003c  eef80ae0          VCVT.F32.S32 s1,s1
000040  eeb00a60          VMOV.F32 s0,s1
000044  482e              LDR      r0,|L3.256|
000046  f7fffffe          BL       PID_Renew
;;;8      	PID_Renew(&PID4,moto_chassis[3].speed_rpm);
00004a  482a              LDR      r0,|L3.244|
00004c  f9b00078          LDRSH    r0,[r0,#0x78]  ; moto_chassis
000050  ee000a90          VMOV     s1,r0
000054  eef80ae0          VCVT.F32.S32 s1,s1
000058  eeb00a60          VMOV.F32 s0,s1
00005c  4829              LDR      r0,|L3.260|
00005e  f7fffffe          BL       PID_Renew
;;;9      	PID_Renew(&PID5,moto_chassis[4].speed_rpm);
000062  4824              LDR      r0,|L3.244|
000064  f9b000a0          LDRSH    r0,[r0,#0xa0]  ; moto_chassis
000068  ee000a90          VMOV     s1,r0
00006c  eef80ae0          VCVT.F32.S32 s1,s1
000070  eeb00a60          VMOV.F32 s0,s1
000074  4824              LDR      r0,|L3.264|
000076  f7fffffe          BL       PID_Renew
;;;10     	PID_Renew(&PID6,moto_chassis[5].speed_rpm);
00007a  481e              LDR      r0,|L3.244|
00007c  f9b000c8          LDRSH    r0,[r0,#0xc8]  ; moto_chassis
000080  ee000a90          VMOV     s1,r0
000084  eef80ae0          VCVT.F32.S32 s1,s1
000088  eeb00a60          VMOV.F32 s0,s1
00008c  481f              LDR      r0,|L3.268|
00008e  f7fffffe          BL       PID_Renew
;;;11     	PID_Renew(&PID7,moto_chassis[6].speed_rpm);
000092  4818              LDR      r0,|L3.244|
000094  f9b000f0          LDRSH    r0,[r0,#0xf0]  ; moto_chassis
000098  ee000a90          VMOV     s1,r0
00009c  eef80ae0          VCVT.F32.S32 s1,s1
0000a0  eeb00a60          VMOV.F32 s0,s1
0000a4  481a              LDR      r0,|L3.272|
0000a6  f7fffffe          BL       PID_Renew
;;;12     	PID_Renew(&PID8,moto_chassis[7].speed_rpm);
0000aa  4812              LDR      r0,|L3.244|
0000ac  f9b00118          LDRSH    r0,[r0,#0x118]  ; moto_chassis
0000b0  ee000a90          VMOV     s1,r0
0000b4  eef80ae0          VCVT.F32.S32 s1,s1
0000b8  eeb00a60          VMOV.F32 s0,s1
0000bc  4815              LDR      r0,|L3.276|
0000be  f7fffffe          BL       PID_Renew
;;;13     	PID_Renew(&Ball2_Angle,moto_chassis[7].total_angle);
0000c2  480c              LDR      r0,|L3.244|
0000c4  f8d0012a          LDR      r0,[r0,#0x12a]
0000c8  ee000a90          VMOV     s1,r0
0000cc  eef80ae0          VCVT.F32.S32 s1,s1
0000d0  eeb00a60          VMOV.F32 s0,s1
0000d4  4810              LDR      r0,|L3.280|
0000d6  f7fffffe          BL       PID_Renew
;;;14     	PID_Renew(&Ball1_Angle,moto_chassis[6].total_angle);
0000da  4806              LDR      r0,|L3.244|
0000dc  f8d00102          LDR      r0,[r0,#0x102]
0000e0  ee000a90          VMOV     s1,r0
0000e4  eef80ae0          VCVT.F32.S32 s1,s1
0000e8  eeb00a60          VMOV.F32 s0,s1
0000ec  480b              LDR      r0,|L3.284|
0000ee  f7fffffe          BL       PID_Renew
;;;15     	
;;;16     //	Chassis_Vy.Collect[1] = Chassis_Vy.Collect[0];
;;;17     //	Chassis_Vy.Collect[0] = VO_Y;
;;;18     //	Chassis_Vx.Collect[1] = Chassis_Vx.Collect[0];
;;;19     //	Chassis_Vx.Collect[0] = VO_X;
;;;20     //	Chassis_Wz.Collect[1] = Chassis_Wz.Collect[0];
;;;21     //	Chassis_Wz.Collect[0] = single_gyro.angle;
;;;22     //	Chassis_Victor_y.Collect[1] = Chassis_Victor_y.Collect[0];
;;;23     //	Chassis_Victor_y.Collect[0] = VectorO_Y;
;;;24     }
0000f2  bd10              POP      {r4,pc}
;;;25     void PID_Init(void)         //初始化PID值
                          ENDP

                  |L3.244|
                          DCD      moto_chassis
                  |L3.248|
                          DCD      PID1
                  |L3.252|
                          DCD      PID2
                  |L3.256|
                          DCD      PID3
                  |L3.260|
                          DCD      PID4
                  |L3.264|
                          DCD      PID5
                  |L3.268|
                          DCD      PID6
                  |L3.272|
                          DCD      PID7
                  |L3.276|
                          DCD      PID8
                  |L3.280|
                          DCD      Ball2_Angle
                  |L3.284|
                          DCD      Ball1_Angle

;*** Start embedded assembler ***

#line 1 "App\\Tasks.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_Tasks_c_453c068e____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___7_Tasks_c_453c068e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_Tasks_c_453c068e____REVSH|
#line 402
|__asm___7_Tasks_c_453c068e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_Tasks_c_453c068e____RRX|
#line 587
|__asm___7_Tasks_c_453c068e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
