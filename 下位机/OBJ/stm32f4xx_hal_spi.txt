; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_hal_spi.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm32f4xx_hal_spi.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm32f4xx_hal_spi.crf HALLIB\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_spi.c]
                          THUMB

                          AREA ||i.HAL_SPI_DMAPause||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DMAPause PROC
;;;1419     */
;;;1420   HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
000000  4601              MOV      r1,r0
;;;1421   {
;;;1422     /* Process Locked */
;;;1423     __HAL_LOCK(hspi);
000002  bf00              NOP      
000004  f8910050          LDRB     r0,[r1,#0x50]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L1.16|
00000c  2002              MOVS     r0,#2
                  |L1.14|
;;;1424     
;;;1425     /* Disable the SPI DMA Tx & Rx requests */
;;;1426     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_TXDMAEN);
;;;1427     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_RXDMAEN);
;;;1428     
;;;1429     /* Process Unlocked */
;;;1430     __HAL_UNLOCK(hspi);
;;;1431     
;;;1432     return HAL_OK; 
;;;1433   }
00000e  4770              BX       lr
                  |L1.16|
000010  2001              MOVS     r0,#1                 ;1423
000012  f8810050          STRB     r0,[r1,#0x50]         ;1423
000016  bf00              NOP                            ;1423
000018  6808              LDR      r0,[r1,#0]            ;1426
00001a  6840              LDR      r0,[r0,#4]            ;1426
00001c  f0200002          BIC      r0,r0,#2              ;1426
000020  680a              LDR      r2,[r1,#0]            ;1426
000022  6050              STR      r0,[r2,#4]            ;1426
000024  6808              LDR      r0,[r1,#0]            ;1427
000026  6840              LDR      r0,[r0,#4]            ;1427
000028  f0200001          BIC      r0,r0,#1              ;1427
00002c  680a              LDR      r2,[r1,#0]            ;1427
00002e  6050              STR      r0,[r2,#4]            ;1427
000030  bf00              NOP                            ;1430
000032  2000              MOVS     r0,#0                 ;1430
000034  f8810050          STRB     r0,[r1,#0x50]         ;1430
000038  bf00              NOP                            ;1430
00003a  bf00              NOP                            ;1432
00003c  e7e7              B        |L1.14|
;;;1434   
                          ENDP


                          AREA ||i.HAL_SPI_DMAResume||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DMAResume PROC
;;;1440     */
;;;1441   HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
000000  4601              MOV      r1,r0
;;;1442   {
;;;1443     /* Process Locked */
;;;1444     __HAL_LOCK(hspi);
000002  bf00              NOP      
000004  f8910050          LDRB     r0,[r1,#0x50]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L2.16|
00000c  2002              MOVS     r0,#2
                  |L2.14|
;;;1445     
;;;1446     /* Enable the SPI DMA Tx & Rx requests */
;;;1447     hspi->Instance->CR2 |= SPI_CR2_TXDMAEN;
;;;1448     hspi->Instance->CR2 |= SPI_CR2_RXDMAEN;
;;;1449     
;;;1450     /* Process Unlocked */
;;;1451     __HAL_UNLOCK(hspi);
;;;1452     
;;;1453     return HAL_OK;
;;;1454   }
00000e  4770              BX       lr
                  |L2.16|
000010  2001              MOVS     r0,#1                 ;1444
000012  f8810050          STRB     r0,[r1,#0x50]         ;1444
000016  bf00              NOP                            ;1444
000018  6808              LDR      r0,[r1,#0]            ;1447
00001a  6840              LDR      r0,[r0,#4]            ;1447
00001c  f0400002          ORR      r0,r0,#2              ;1447
000020  680a              LDR      r2,[r1,#0]            ;1447
000022  6050              STR      r0,[r2,#4]            ;1447
000024  6808              LDR      r0,[r1,#0]            ;1448
000026  6840              LDR      r0,[r0,#4]            ;1448
000028  f0400001          ORR      r0,r0,#1              ;1448
00002c  680a              LDR      r2,[r1,#0]            ;1448
00002e  6050              STR      r0,[r2,#4]            ;1448
000030  bf00              NOP                            ;1451
000032  2000              MOVS     r0,#0                 ;1451
000034  f8810050          STRB     r0,[r1,#0x50]         ;1451
000038  bf00              NOP                            ;1451
00003a  bf00              NOP                            ;1453
00003c  e7e7              B        |L2.14|
;;;1455   
                          ENDP


                          AREA ||i.HAL_SPI_DMAStop||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DMAStop PROC
;;;1461     */
;;;1462   HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;1463   {
000002  4604              MOV      r4,r0
;;;1464     /* The Lock is not implemented on this API to allow the user application
;;;1465        to call the HAL SPI API under callbacks HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback():
;;;1466        when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
;;;1467        and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
;;;1468        */
;;;1469     
;;;1470     /* Abort the SPI DMA tx Stream */
;;;1471     if(hspi->hdmatx != NULL)
000004  6c20              LDR      r0,[r4,#0x40]
000006  b110              CBZ      r0,|L3.14|
;;;1472     {
;;;1473       HAL_DMA_Abort(hspi->hdmatx);
000008  6c20              LDR      r0,[r4,#0x40]
00000a  f7fffffe          BL       HAL_DMA_Abort
                  |L3.14|
;;;1474     }
;;;1475     /* Abort the SPI DMA rx Stream */
;;;1476     if(hspi->hdmarx != NULL)
00000e  6c60              LDR      r0,[r4,#0x44]
000010  b110              CBZ      r0,|L3.24|
;;;1477     {
;;;1478       HAL_DMA_Abort(hspi->hdmarx);
000012  6c60              LDR      r0,[r4,#0x44]
000014  f7fffffe          BL       HAL_DMA_Abort
                  |L3.24|
;;;1479     }
;;;1480     
;;;1481     /* Disable the SPI DMA Tx & Rx requests */
;;;1482     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_TXDMAEN);
000018  6820              LDR      r0,[r4,#0]
00001a  6840              LDR      r0,[r0,#4]
00001c  f0200002          BIC      r0,r0,#2
000020  6821              LDR      r1,[r4,#0]
000022  6048              STR      r0,[r1,#4]
;;;1483     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_RXDMAEN);
000024  6820              LDR      r0,[r4,#0]
000026  6840              LDR      r0,[r0,#4]
000028  f0200001          BIC      r0,r0,#1
00002c  6821              LDR      r1,[r4,#0]
00002e  6048              STR      r0,[r1,#4]
;;;1484     
;;;1485     hspi->State = HAL_SPI_STATE_READY;
000030  2001              MOVS     r0,#1
000032  f8840051          STRB     r0,[r4,#0x51]
;;;1486     
;;;1487     return HAL_OK;
000036  2000              MOVS     r0,#0
;;;1488   }
000038  bd10              POP      {r4,pc}
;;;1489   
                          ENDP


                          AREA ||i.HAL_SPI_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_DeInit PROC
;;;237      */
;;;238    HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;239    {
000002  4604              MOV      r4,r0
;;;240      /* Check the SPI handle allocation */
;;;241      if(hspi == NULL)
000004  b90c              CBNZ     r4,|L4.10|
;;;242      {
;;;243        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L4.8|
;;;244      }
;;;245    
;;;246      /* Disable the SPI Peripheral Clock */
;;;247      __HAL_SPI_DISABLE(hspi);
;;;248    
;;;249      /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
;;;250      HAL_SPI_MspDeInit(hspi);
;;;251    
;;;252      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
;;;253      hspi->State = HAL_SPI_STATE_RESET;
;;;254    
;;;255      /* Release Lock */
;;;256      __HAL_UNLOCK(hspi);
;;;257    
;;;258      return HAL_OK;
;;;259    }
000008  bd10              POP      {r4,pc}
                  |L4.10|
00000a  6820              LDR      r0,[r4,#0]            ;247
00000c  6800              LDR      r0,[r0,#0]            ;247
00000e  f0200040          BIC      r0,r0,#0x40           ;247
000012  6821              LDR      r1,[r4,#0]            ;247
000014  6008              STR      r0,[r1,#0]            ;247
000016  4620              MOV      r0,r4                 ;250
000018  f7fffffe          BL       HAL_SPI_MspDeInit
00001c  2000              MOVS     r0,#0                 ;252
00001e  6560              STR      r0,[r4,#0x54]         ;252
000020  f8840051          STRB     r0,[r4,#0x51]         ;253
000024  bf00              NOP                            ;256
000026  f8840050          STRB     r0,[r4,#0x50]         ;256
00002a  bf00              NOP                            ;256
00002c  bf00              NOP                            ;258
00002e  e7eb              B        |L4.8|
;;;260    
                          ENDP


                          AREA ||i.HAL_SPI_ErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_ErrorCallback PROC
;;;1655     */
;;;1656    __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1657   {
;;;1658     /* Prevent unused argument(s) compilation warning */
;;;1659     UNUSED(hspi);
;;;1660     /* NOTE : - This function Should not be modified, when the callback is needed,
;;;1661               the HAL_SPI_ErrorCallback() could be implemented in the user file.
;;;1662               - The ErrorCode parameter in the hspi handle is updated by the SPI processes
;;;1663               and user can use HAL_SPI_GetError() API to check the latest error occurred.
;;;1664      */
;;;1665   }
;;;1666   
                          ENDP


                          AREA ||i.HAL_SPI_GetError||, CODE, READONLY, ALIGN=1

                  HAL_SPI_GetError PROC
;;;1702     */
;;;1703   uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
000000  4601              MOV      r1,r0
;;;1704   {
;;;1705     return hspi->ErrorCode;
000002  6d48              LDR      r0,[r1,#0x54]
;;;1706   }
000004  4770              BX       lr
;;;1707   
                          ENDP


                          AREA ||i.HAL_SPI_GetState||, CODE, READONLY, ALIGN=1

                  HAL_SPI_GetState PROC
;;;1691     */
;;;1692   HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
000000  4601              MOV      r1,r0
;;;1693   {
;;;1694     return hspi->State;
000002  f8910051          LDRB     r0,[r1,#0x51]
;;;1695   }
000006  4770              BX       lr
;;;1696   
                          ENDP


                          AREA ||i.HAL_SPI_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_SPI_IRQHandler PROC
;;;1495     */
;;;1496   void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1497   {
000002  4604              MOV      r4,r0
;;;1498     uint32_t tmp1 = 0, tmp2 = 0, tmp3 = 0;
000004  2500              MOVS     r5,#0
000006  2600              MOVS     r6,#0
000008  2700              MOVS     r7,#0
;;;1499   
;;;1500     tmp1 = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE);
00000a  6820              LDR      r0,[r4,#0]
00000c  6880              LDR      r0,[r0,#8]
00000e  f0000501          AND      r5,r0,#1
;;;1501     tmp2 = __HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_RXNE);
000012  6820              LDR      r0,[r4,#0]
000014  6840              LDR      r0,[r0,#4]
000016  f3c01680          UBFX     r6,r0,#6,#1
;;;1502     tmp3 = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR);
00001a  6820              LDR      r0,[r4,#0]
00001c  6880              LDR      r0,[r0,#8]
00001e  f3c01780          UBFX     r7,r0,#6,#1
;;;1503     /* SPI in mode Receiver and Overrun not occurred ---------------------------*/
;;;1504     if((tmp1 != RESET) && (tmp2 != RESET) && (tmp3 == RESET))
000022  b12d              CBZ      r5,|L8.48|
000024  b126              CBZ      r6,|L8.48|
000026  b91f              CBNZ     r7,|L8.48|
;;;1505     {
;;;1506       hspi->RxISR(hspi);
000028  4620              MOV      r0,r4
00002a  6ca1              LDR      r1,[r4,#0x48]
00002c  4788              BLX      r1
                  |L8.46|
;;;1507       return;
;;;1508     } 
;;;1509   
;;;1510     tmp1 = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE);
;;;1511     tmp2 = __HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_TXE);
;;;1512     /* SPI in mode Transmitter ---------------------------------------------------*/
;;;1513     if((tmp1 != RESET) && (tmp2 != RESET))
;;;1514     {
;;;1515       hspi->TxISR(hspi);
;;;1516       return;
;;;1517     }
;;;1518   
;;;1519     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_ERR) != RESET)
;;;1520     {
;;;1521       /* SPI CRC error interrupt occurred ---------------------------------------*/
;;;1522       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
;;;1523       {
;;;1524         hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
;;;1525         __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
;;;1526       }
;;;1527       /* SPI Mode Fault error interrupt occurred --------------------------------*/
;;;1528       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_MODF) != RESET)
;;;1529       {
;;;1530         hspi->ErrorCode |= HAL_SPI_ERROR_MODF;
;;;1531         __HAL_SPI_CLEAR_MODFFLAG(hspi);
;;;1532       }
;;;1533       
;;;1534       /* SPI Overrun error interrupt occurred -----------------------------------*/
;;;1535       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR) != RESET)
;;;1536       {
;;;1537         if(hspi->State != HAL_SPI_STATE_BUSY_TX)
;;;1538         {
;;;1539           hspi->ErrorCode |= HAL_SPI_ERROR_OVR;
;;;1540           __HAL_SPI_CLEAR_OVRFLAG(hspi);      
;;;1541         }
;;;1542       }
;;;1543   
;;;1544       /* SPI Frame error interrupt occurred -------------------------------------*/
;;;1545       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_FRE) != RESET)
;;;1546       {
;;;1547         hspi->ErrorCode |= HAL_SPI_ERROR_FRE;
;;;1548         __HAL_SPI_CLEAR_FREFLAG(hspi);
;;;1549       }
;;;1550   
;;;1551       /* Call the Error call Back in case of Errors */
;;;1552       if(hspi->ErrorCode!=HAL_SPI_ERROR_NONE)
;;;1553       {
;;;1554         hspi->State = HAL_SPI_STATE_READY;
;;;1555         HAL_SPI_ErrorCallback(hspi);
;;;1556       }
;;;1557     }
;;;1558   }
00002e  bdf8              POP      {r3-r7,pc}
                  |L8.48|
000030  6820              LDR      r0,[r4,#0]            ;1510
000032  6880              LDR      r0,[r0,#8]            ;1510
000034  f3c00540          UBFX     r5,r0,#1,#1           ;1510
000038  6820              LDR      r0,[r4,#0]            ;1511
00003a  6840              LDR      r0,[r0,#4]            ;1511
00003c  f3c016c0          UBFX     r6,r0,#7,#1           ;1511
000040  b125              CBZ      r5,|L8.76|
000042  b11e              CBZ      r6,|L8.76|
000044  4620              MOV      r0,r4                 ;1515
000046  6ce1              LDR      r1,[r4,#0x4c]         ;1515
000048  4788              BLX      r1                    ;1515
00004a  e7f0              B        |L8.46|
                  |L8.76|
00004c  6820              LDR      r0,[r4,#0]            ;1519
00004e  6840              LDR      r0,[r0,#4]            ;1519
000050  f3c01040          UBFX     r0,r0,#5,#1           ;1519
000054  2800              CMP      r0,#0                 ;1519
000056  d054              BEQ      |L8.258|
000058  6820              LDR      r0,[r4,#0]            ;1522
00005a  6880              LDR      r0,[r0,#8]            ;1522
00005c  f3c01000          UBFX     r0,r0,#4,#1           ;1522
000060  b138              CBZ      r0,|L8.114|
000062  6d60              LDR      r0,[r4,#0x54]         ;1524
000064  f0400002          ORR      r0,r0,#2              ;1524
000068  6560              STR      r0,[r4,#0x54]         ;1524
00006a  f06f0010          MVN      r0,#0x10              ;1525
00006e  6821              LDR      r1,[r4,#0]            ;1525
000070  6088              STR      r0,[r1,#8]            ;1525
                  |L8.114|
000072  6820              LDR      r0,[r4,#0]            ;1528
000074  6880              LDR      r0,[r0,#8]            ;1528
000076  f3c01040          UBFX     r0,r0,#5,#1           ;1528
00007a  b188              CBZ      r0,|L8.160|
00007c  6d60              LDR      r0,[r4,#0x54]         ;1530
00007e  f0400001          ORR      r0,r0,#1              ;1530
000082  6560              STR      r0,[r4,#0x54]         ;1530
000084  bf00              NOP                            ;1531
000086  2000              MOVS     r0,#0                 ;1531
000088  9000              STR      r0,[sp,#0]            ;1531
00008a  6820              LDR      r0,[r4,#0]            ;1531
00008c  6880              LDR      r0,[r0,#8]            ;1531
00008e  9000              STR      r0,[sp,#0]            ;1531
000090  6820              LDR      r0,[r4,#0]            ;1531
000092  6800              LDR      r0,[r0,#0]            ;1531
000094  f0200040          BIC      r0,r0,#0x40           ;1531
000098  6821              LDR      r1,[r4,#0]            ;1531
00009a  6008              STR      r0,[r1,#0]            ;1531
00009c  bf00              NOP                            ;1531
00009e  bf00              NOP                            ;1531
                  |L8.160|
0000a0  6820              LDR      r0,[r4,#0]            ;1535
0000a2  6880              LDR      r0,[r0,#8]            ;1535
0000a4  f3c01080          UBFX     r0,r0,#6,#1           ;1535
0000a8  b190              CBZ      r0,|L8.208|
0000aa  f8940051          LDRB     r0,[r4,#0x51]         ;1537
0000ae  2812              CMP      r0,#0x12              ;1537
0000b0  d00e              BEQ      |L8.208|
0000b2  6d60              LDR      r0,[r4,#0x54]         ;1539
0000b4  f0400004          ORR      r0,r0,#4              ;1539
0000b8  6560              STR      r0,[r4,#0x54]         ;1539
0000ba  bf00              NOP                            ;1540
0000bc  2000              MOVS     r0,#0                 ;1540
0000be  9000              STR      r0,[sp,#0]            ;1540
0000c0  6820              LDR      r0,[r4,#0]            ;1540
0000c2  68c0              LDR      r0,[r0,#0xc]          ;1540
0000c4  9000              STR      r0,[sp,#0]            ;1540
0000c6  6820              LDR      r0,[r4,#0]            ;1540
0000c8  6880              LDR      r0,[r0,#8]            ;1540
0000ca  9000              STR      r0,[sp,#0]            ;1540
0000cc  bf00              NOP                            ;1540
0000ce  bf00              NOP                            ;1540
                  |L8.208|
0000d0  6820              LDR      r0,[r4,#0]            ;1545
0000d2  6880              LDR      r0,[r0,#8]            ;1545
0000d4  f3c02000          UBFX     r0,r0,#8,#1           ;1545
0000d8  b158              CBZ      r0,|L8.242|
0000da  6d60              LDR      r0,[r4,#0x54]         ;1547
0000dc  f0400008          ORR      r0,r0,#8              ;1547
0000e0  6560              STR      r0,[r4,#0x54]         ;1547
0000e2  bf00              NOP                            ;1548
0000e4  2000              MOVS     r0,#0                 ;1548
0000e6  9000              STR      r0,[sp,#0]            ;1548
0000e8  6820              LDR      r0,[r4,#0]            ;1548
0000ea  6880              LDR      r0,[r0,#8]            ;1548
0000ec  9000              STR      r0,[sp,#0]            ;1548
0000ee  bf00              NOP                            ;1548
0000f0  bf00              NOP                            ;1548
                  |L8.242|
0000f2  6d60              LDR      r0,[r4,#0x54]         ;1552
0000f4  b128              CBZ      r0,|L8.258|
0000f6  2001              MOVS     r0,#1                 ;1554
0000f8  f8840051          STRB     r0,[r4,#0x51]         ;1554
0000fc  4620              MOV      r0,r4                 ;1555
0000fe  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L8.258|
000102  bf00              NOP      
000104  e793              B        |L8.46|
;;;1559   
                          ENDP


                          AREA ||i.HAL_SPI_Init||, CODE, READONLY, ALIGN=1

                  HAL_SPI_Init PROC
;;;174      */
;;;175    HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;176    {
000002  4604              MOV      r4,r0
;;;177      /* Check the SPI handle allocation */
;;;178      if(hspi == NULL)
000004  b90c              CBNZ     r4,|L9.10|
;;;179      {
;;;180        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L9.8|
;;;181      }
;;;182    
;;;183      /* Check the parameters */
;;;184      assert_param(IS_SPI_MODE(hspi->Init.Mode));
;;;185      assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
;;;186      assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
;;;187      assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
;;;188      assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
;;;189      assert_param(IS_SPI_NSS(hspi->Init.NSS));
;;;190      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
;;;191      assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
;;;192      assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
;;;193      assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
;;;194      assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
;;;195    
;;;196      if(hspi->State == HAL_SPI_STATE_RESET)
;;;197      {
;;;198        /* Allocate lock resource and initialize it */
;;;199        hspi->Lock = HAL_UNLOCKED;
;;;200        /* Init the low level hardware : GPIO, CLOCK, NVIC... */
;;;201        HAL_SPI_MspInit(hspi);
;;;202      }
;;;203      
;;;204      hspi->State = HAL_SPI_STATE_BUSY;
;;;205    
;;;206      /* Disable the selected SPI peripheral */
;;;207      __HAL_SPI_DISABLE(hspi);
;;;208    
;;;209      /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
;;;210      /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
;;;211      Communication speed, First bit and CRC calculation state */
;;;212      hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
;;;213                             hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
;;;214                             hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
;;;215    
;;;216      /* Configure : NSS management */
;;;217      hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode);
;;;218    
;;;219      /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
;;;220      /* Configure : CRC Polynomial */
;;;221      hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
;;;222    
;;;223      /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
;;;224      hspi->Instance->I2SCFGR &= (uint32_t)(~SPI_I2SCFGR_I2SMOD);
;;;225    
;;;226      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
;;;227      hspi->State = HAL_SPI_STATE_READY;
;;;228      
;;;229      return HAL_OK;
;;;230    }
000008  bd10              POP      {r4,pc}
                  |L9.10|
00000a  f8940051          LDRB     r0,[r4,#0x51]         ;196
00000e  b928              CBNZ     r0,|L9.28|
000010  2000              MOVS     r0,#0                 ;199
000012  f8840050          STRB     r0,[r4,#0x50]         ;199
000016  4620              MOV      r0,r4                 ;201
000018  f7fffffe          BL       HAL_SPI_MspInit
                  |L9.28|
00001c  2002              MOVS     r0,#2                 ;204
00001e  f8840051          STRB     r0,[r4,#0x51]         ;204
000022  6820              LDR      r0,[r4,#0]            ;207
000024  6800              LDR      r0,[r0,#0]            ;207
000026  f0200040          BIC      r0,r0,#0x40           ;207
00002a  6821              LDR      r1,[r4,#0]            ;207
00002c  6008              STR      r0,[r1,#0]            ;207
00002e  e9d40101          LDRD     r0,r1,[r4,#4]         ;212
000032  4308              ORRS     r0,r0,r1              ;212
000034  68e1              LDR      r1,[r4,#0xc]          ;212
000036  4308              ORRS     r0,r0,r1              ;212
000038  6921              LDR      r1,[r4,#0x10]         ;212
00003a  4308              ORRS     r0,r0,r1              ;212
00003c  6961              LDR      r1,[r4,#0x14]         ;212
00003e  4308              ORRS     r0,r0,r1              ;212
000040  8b21              LDRH     r1,[r4,#0x18]         ;212
000042  f4017100          AND      r1,r1,#0x200          ;212
000046  4308              ORRS     r0,r0,r1              ;212
000048  69e1              LDR      r1,[r4,#0x1c]         ;212
00004a  4308              ORRS     r0,r0,r1              ;212
00004c  6a21              LDR      r1,[r4,#0x20]         ;212
00004e  4308              ORRS     r0,r0,r1              ;212
000050  6aa1              LDR      r1,[r4,#0x28]         ;212
000052  4308              ORRS     r0,r0,r1              ;212
000054  6821              LDR      r1,[r4,#0]            ;212
000056  6008              STR      r0,[r1,#0]            ;212
000058  2104              MOVS     r1,#4                 ;217
00005a  69a0              LDR      r0,[r4,#0x18]         ;217
00005c  ea014010          AND      r0,r1,r0,LSR #16      ;217
000060  6a61              LDR      r1,[r4,#0x24]         ;217
000062  4308              ORRS     r0,r0,r1              ;217
000064  6821              LDR      r1,[r4,#0]            ;217
000066  6048              STR      r0,[r1,#4]            ;217
000068  6821              LDR      r1,[r4,#0]            ;221
00006a  6ae0              LDR      r0,[r4,#0x2c]         ;221
00006c  6108              STR      r0,[r1,#0x10]         ;221
00006e  6820              LDR      r0,[r4,#0]            ;224
000070  69c0              LDR      r0,[r0,#0x1c]         ;224
000072  f4206000          BIC      r0,r0,#0x800          ;224
000076  6821              LDR      r1,[r4,#0]            ;224
000078  61c8              STR      r0,[r1,#0x1c]         ;224
00007a  2000              MOVS     r0,#0                 ;226
00007c  6560              STR      r0,[r4,#0x54]         ;226
00007e  2001              MOVS     r0,#1                 ;227
000080  f8840051          STRB     r0,[r4,#0x51]         ;227
000084  2000              MOVS     r0,#0                 ;229
000086  e7bf              B        |L9.8|
;;;231    
                          ENDP


                          AREA ||i.HAL_SPI_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_MspDeInit PROC
;;;281      */
;;;282     __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;283    {
;;;284      /* Prevent unused argument(s) compilation warning */
;;;285      UNUSED(hspi);
;;;286      /* NOTE : This function Should not be modified, when the callback is needed,
;;;287                the HAL_SPI_MspDeInit could be implemented in the user file
;;;288       */
;;;289    }
;;;290    
                          ENDP


                          AREA ||i.HAL_SPI_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_MspInit PROC
;;;266      */
;;;267     __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;268     {
;;;269      /* Prevent unused argument(s) compilation warning */
;;;270      UNUSED(hspi);
;;;271       /* NOTE : This function Should not be modified, when the callback is needed,
;;;272                the HAL_SPI_MspInit could be implemented in the user file
;;;273       */
;;;274    }
;;;275    
                          ENDP


                          AREA ||i.HAL_SPI_Receive||, CODE, READONLY, ALIGN=1

                  HAL_SPI_Receive PROC
;;;477      */
;;;478    HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;479    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;480      __IO uint16_t tmpreg;
;;;481      uint32_t tmp = 0;
00000c  f04f0800          MOV      r8,#0
;;;482    
;;;483      if(hspi->State == HAL_SPI_STATE_READY)
000010  f8940051          LDRB     r0,[r4,#0x51]
000014  2801              CMP      r0,#1
000016  d17a              BNE      |L12.270|
;;;484      {
;;;485        if((pData == NULL ) || (Size == 0)) 
000018  b106              CBZ      r6,|L12.28|
00001a  b915              CBNZ     r5,|L12.34|
                  |L12.28|
;;;486        {
;;;487          return  HAL_ERROR;
00001c  2001              MOVS     r0,#1
                  |L12.30|
;;;488        }
;;;489    
;;;490        /* Process Locked */
;;;491        __HAL_LOCK(hspi);
;;;492    
;;;493        /* Configure communication */
;;;494        hspi->State       = HAL_SPI_STATE_BUSY_RX;
;;;495        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;496    
;;;497        hspi->pRxBuffPtr  = pData;
;;;498        hspi->RxXferSize  = Size;
;;;499        hspi->RxXferCount = Size;
;;;500    
;;;501        /*Init field not used in handle to zero */
;;;502        hspi->RxISR = 0;
;;;503        hspi->TxISR = 0;
;;;504        hspi->TxXferSize   = 0;
;;;505        hspi->TxXferCount  = 0;
;;;506    
;;;507        /* Configure communication direction : 1Line */
;;;508        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;509        {
;;;510          SPI_1LINE_RX(hspi);
;;;511        }
;;;512    
;;;513        /* Reset CRC Calculation */
;;;514        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;515        {
;;;516          SPI_RESET_CRC(hspi);
;;;517        }
;;;518        
;;;519        if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
;;;520        {
;;;521          /* Process Unlocked */
;;;522          __HAL_UNLOCK(hspi);
;;;523    
;;;524          /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;525          return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
;;;526        }
;;;527    
;;;528        /* Check if the SPI is already enabled */ 
;;;529        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;530        {
;;;531          /* Enable SPI peripheral */
;;;532          __HAL_SPI_ENABLE(hspi);
;;;533        }
;;;534    
;;;535        /* Receive data in 8 Bit mode */
;;;536        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;537        {
;;;538          while(hspi->RxXferCount > 1)
;;;539          {
;;;540            /* Wait until RXNE flag is set */
;;;541            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;542            { 
;;;543              return HAL_TIMEOUT;
;;;544            }
;;;545    
;;;546            (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;547            hspi->RxXferCount--;
;;;548          }
;;;549          /* Enable CRC Transmission */
;;;550          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;551          {
;;;552            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;553          }
;;;554        }
;;;555        /* Receive data in 16 Bit mode */
;;;556        else
;;;557        {
;;;558          while(hspi->RxXferCount > 1)
;;;559          {
;;;560            /* Wait until RXNE flag is set to read data */
;;;561            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;562            { 
;;;563              return HAL_TIMEOUT;
;;;564            }
;;;565    
;;;566            *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;567            hspi->pRxBuffPtr+=2;
;;;568            hspi->RxXferCount--;
;;;569          }
;;;570          /* Enable CRC Transmission */
;;;571          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;572          {
;;;573            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;574          }
;;;575        }
;;;576    
;;;577        /* Wait until RXNE flag is set */
;;;578        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;579        { 
;;;580          return HAL_TIMEOUT;
;;;581        }
;;;582    
;;;583        /* Receive last data in 8 Bit mode */
;;;584        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;585        {
;;;586          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;587        }
;;;588        /* Receive last data in 16 Bit mode */
;;;589        else
;;;590        {
;;;591          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;592          hspi->pRxBuffPtr+=2;
;;;593        }
;;;594        hspi->RxXferCount--;
;;;595    
;;;596        /* Wait until RXNE flag is set: CRC Received */
;;;597        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;598        {
;;;599          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;600          {
;;;601            hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
;;;602            return HAL_TIMEOUT;
;;;603          }
;;;604    
;;;605          /* Read CRC to Flush RXNE flag */
;;;606          tmpreg = hspi->Instance->DR;
;;;607          UNUSED(tmpreg);
;;;608        }
;;;609        
;;;610        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
;;;611        {
;;;612          /* Disable SPI peripheral */
;;;613          __HAL_SPI_DISABLE(hspi);
;;;614        }
;;;615    
;;;616        hspi->State = HAL_SPI_STATE_READY;
;;;617    
;;;618        tmp = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR);
;;;619        /* Check if CRC error occurred */
;;;620        if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (tmp != RESET))
;;;621        {  
;;;622          hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
;;;623    
;;;624          /* Reset CRC Calculation */
;;;625          SPI_RESET_CRC(hspi);
;;;626    
;;;627          /* Process Unlocked */
;;;628          __HAL_UNLOCK(hspi);
;;;629    
;;;630          return HAL_ERROR; 
;;;631        }
;;;632    
;;;633        /* Process Unlocked */
;;;634        __HAL_UNLOCK(hspi);
;;;635    
;;;636        return HAL_OK;
;;;637      }
;;;638      else
;;;639      {
;;;640        return HAL_BUSY;
;;;641      }
;;;642    }
00001e  e8bd81fc          POP      {r2-r8,pc}
                  |L12.34|
000022  bf00              NOP                            ;491
000024  f8940050          LDRB     r0,[r4,#0x50]         ;491
000028  2801              CMP      r0,#1                 ;491
00002a  d101              BNE      |L12.48|
00002c  2002              MOVS     r0,#2                 ;491
00002e  e7f6              B        |L12.30|
                  |L12.48|
000030  2001              MOVS     r0,#1                 ;491
000032  f8840050          STRB     r0,[r4,#0x50]         ;491
000036  bf00              NOP                            ;491
000038  2022              MOVS     r0,#0x22              ;494
00003a  f8840051          STRB     r0,[r4,#0x51]         ;494
00003e  2000              MOVS     r0,#0                 ;495
000040  6560              STR      r0,[r4,#0x54]         ;495
000042  63a6              STR      r6,[r4,#0x38]         ;497
000044  87a5              STRH     r5,[r4,#0x3c]         ;498
000046  87e5              STRH     r5,[r4,#0x3e]         ;499
000048  64a0              STR      r0,[r4,#0x48]         ;502
00004a  64e0              STR      r0,[r4,#0x4c]         ;503
00004c  86a0              STRH     r0,[r4,#0x34]         ;504
00004e  86e0              STRH     r0,[r4,#0x36]         ;505
000050  68a0              LDR      r0,[r4,#8]            ;508
000052  f5b04f00          CMP      r0,#0x8000            ;508
000056  d105              BNE      |L12.100|
000058  6820              LDR      r0,[r4,#0]            ;510
00005a  6800              LDR      r0,[r0,#0]            ;510
00005c  f4204080          BIC      r0,r0,#0x4000         ;510
000060  6821              LDR      r1,[r4,#0]            ;510
000062  6008              STR      r0,[r1,#0]            ;510
                  |L12.100|
000064  6aa0              LDR      r0,[r4,#0x28]         ;514
000066  f5b05f00          CMP      r0,#0x2000            ;514
00006a  d10d              BNE      |L12.136|
00006c  bf00              NOP                            ;516
00006e  6820              LDR      r0,[r4,#0]            ;516
000070  6800              LDR      r0,[r0,#0]            ;516
000072  f4205000          BIC      r0,r0,#0x2000         ;516
000076  6821              LDR      r1,[r4,#0]            ;516
000078  6008              STR      r0,[r1,#0]            ;516
00007a  6820              LDR      r0,[r4,#0]            ;516
00007c  6800              LDR      r0,[r0,#0]            ;516
00007e  f4405000          ORR      r0,r0,#0x2000         ;516
000082  6821              LDR      r1,[r4,#0]            ;516
000084  6008              STR      r0,[r1,#0]            ;516
000086  bf00              NOP                            ;516
                  |L12.136|
000088  6860              LDR      r0,[r4,#4]            ;519
00008a  f5b07f82          CMP      r0,#0x104             ;519
00008e  d10e              BNE      |L12.174|
000090  68a0              LDR      r0,[r4,#8]            ;519
000092  b960              CBNZ     r0,|L12.174|
000094  bf00              NOP                            ;522
000096  2000              MOVS     r0,#0                 ;522
000098  f8840050          STRB     r0,[r4,#0x50]         ;522
00009c  bf00              NOP                            ;522
00009e  462b              MOV      r3,r5                 ;525
0000a0  4632              MOV      r2,r6                 ;525
0000a2  4631              MOV      r1,r6                 ;525
0000a4  4620              MOV      r0,r4                 ;525
0000a6  9700              STR      r7,[sp,#0]            ;525
0000a8  f7fffffe          BL       HAL_SPI_TransmitReceive
0000ac  e7b7              B        |L12.30|
                  |L12.174|
0000ae  6820              LDR      r0,[r4,#0]            ;529
0000b0  6800              LDR      r0,[r0,#0]            ;529
0000b2  f0000040          AND      r0,r0,#0x40           ;529
0000b6  2840              CMP      r0,#0x40              ;529
0000b8  d005              BEQ      |L12.198|
0000ba  6820              LDR      r0,[r4,#0]            ;532
0000bc  6800              LDR      r0,[r0,#0]            ;532
0000be  f0400040          ORR      r0,r0,#0x40           ;532
0000c2  6821              LDR      r1,[r4,#0]            ;532
0000c4  6008              STR      r0,[r1,#0]            ;532
                  |L12.198|
0000c6  68e0              LDR      r0,[r4,#0xc]          ;536
0000c8  bb10              CBNZ     r0,|L12.272|
0000ca  e012              B        |L12.242|
                  |L12.204|
0000cc  463b              MOV      r3,r7                 ;541
0000ce  2200              MOVS     r2,#0                 ;541
0000d0  2101              MOVS     r1,#1                 ;541
0000d2  4620              MOV      r0,r4                 ;541
0000d4  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000d8  b108              CBZ      r0,|L12.222|
0000da  2003              MOVS     r0,#3                 ;543
0000dc  e79f              B        |L12.30|
                  |L12.222|
0000de  6820              LDR      r0,[r4,#0]            ;546
0000e0  68c0              LDR      r0,[r0,#0xc]          ;546
0000e2  b2c1              UXTB     r1,r0                 ;546
0000e4  6ba2              LDR      r2,[r4,#0x38]         ;546
0000e6  1c50              ADDS     r0,r2,#1              ;546
0000e8  63a0              STR      r0,[r4,#0x38]         ;546
0000ea  7011              STRB     r1,[r2,#0]            ;546
0000ec  8fe0              LDRH     r0,[r4,#0x3e]         ;547
0000ee  1e40              SUBS     r0,r0,#1              ;547
0000f0  87e0              STRH     r0,[r4,#0x3e]         ;547
                  |L12.242|
0000f2  8fe0              LDRH     r0,[r4,#0x3e]         ;538
0000f4  2801              CMP      r0,#1                 ;538
0000f6  dce9              BGT      |L12.204|
0000f8  6aa0              LDR      r0,[r4,#0x28]         ;550
0000fa  f5b05f00          CMP      r0,#0x2000            ;550
0000fe  d128              BNE      |L12.338|
000100  6820              LDR      r0,[r4,#0]            ;552
000102  6800              LDR      r0,[r0,#0]            ;552
000104  f4405080          ORR      r0,r0,#0x1000         ;552
000108  6821              LDR      r1,[r4,#0]            ;552
00010a  6008              STR      r0,[r1,#0]            ;552
00010c  e021              B        |L12.338|
                  |L12.270|
00010e  e093              B        |L12.568|
                  |L12.272|
000110  e012              B        |L12.312|
                  |L12.274|
000112  463b              MOV      r3,r7                 ;561
000114  2200              MOVS     r2,#0                 ;561
000116  2101              MOVS     r1,#1                 ;561
000118  4620              MOV      r0,r4                 ;561
00011a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00011e  b108              CBZ      r0,|L12.292|
000120  2003              MOVS     r0,#3                 ;563
000122  e77c              B        |L12.30|
                  |L12.292|
000124  6820              LDR      r0,[r4,#0]            ;566
000126  68c0              LDR      r0,[r0,#0xc]          ;566
000128  6ba1              LDR      r1,[r4,#0x38]         ;566
00012a  8008              STRH     r0,[r1,#0]            ;566
00012c  6ba0              LDR      r0,[r4,#0x38]         ;567
00012e  1c80              ADDS     r0,r0,#2              ;567
000130  63a0              STR      r0,[r4,#0x38]         ;567
000132  8fe0              LDRH     r0,[r4,#0x3e]         ;568
000134  1e40              SUBS     r0,r0,#1              ;568
000136  87e0              STRH     r0,[r4,#0x3e]         ;568
                  |L12.312|
000138  8fe0              LDRH     r0,[r4,#0x3e]         ;558
00013a  2801              CMP      r0,#1                 ;558
00013c  dce9              BGT      |L12.274|
00013e  6aa0              LDR      r0,[r4,#0x28]         ;571
000140  f5b05f00          CMP      r0,#0x2000            ;571
000144  d105              BNE      |L12.338|
000146  6820              LDR      r0,[r4,#0]            ;573
000148  6800              LDR      r0,[r0,#0]            ;573
00014a  f4405080          ORR      r0,r0,#0x1000         ;573
00014e  6821              LDR      r1,[r4,#0]            ;573
000150  6008              STR      r0,[r1,#0]            ;573
                  |L12.338|
000152  463b              MOV      r3,r7                 ;578
000154  2200              MOVS     r2,#0                 ;578
000156  2101              MOVS     r1,#1                 ;578
000158  4620              MOV      r0,r4                 ;578
00015a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00015e  b108              CBZ      r0,|L12.356|
000160  2003              MOVS     r0,#3                 ;580
000162  e75c              B        |L12.30|
                  |L12.356|
000164  68e0              LDR      r0,[r4,#0xc]          ;584
000166  b938              CBNZ     r0,|L12.376|
000168  6820              LDR      r0,[r4,#0]            ;586
00016a  68c0              LDR      r0,[r0,#0xc]          ;586
00016c  b2c1              UXTB     r1,r0                 ;586
00016e  6ba2              LDR      r2,[r4,#0x38]         ;586
000170  1c50              ADDS     r0,r2,#1              ;586
000172  63a0              STR      r0,[r4,#0x38]         ;586
000174  7011              STRB     r1,[r2,#0]            ;586
000176  e006              B        |L12.390|
                  |L12.376|
000178  6820              LDR      r0,[r4,#0]            ;591
00017a  68c0              LDR      r0,[r0,#0xc]          ;591
00017c  6ba1              LDR      r1,[r4,#0x38]         ;591
00017e  8008              STRH     r0,[r1,#0]            ;591
000180  6ba0              LDR      r0,[r4,#0x38]         ;592
000182  1c80              ADDS     r0,r0,#2              ;592
000184  63a0              STR      r0,[r4,#0x38]         ;592
                  |L12.390|
000186  8fe0              LDRH     r0,[r4,#0x3e]         ;594
000188  1e40              SUBS     r0,r0,#1              ;594
00018a  87e0              STRH     r0,[r4,#0x3e]         ;594
00018c  6aa0              LDR      r0,[r4,#0x28]         ;597
00018e  f5b05f00          CMP      r0,#0x2000            ;597
000192  d112              BNE      |L12.442|
000194  463b              MOV      r3,r7                 ;599
000196  2200              MOVS     r2,#0                 ;599
000198  2101              MOVS     r1,#1                 ;599
00019a  4620              MOV      r0,r4                 ;599
00019c  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0001a0  b128              CBZ      r0,|L12.430|
0001a2  6d60              LDR      r0,[r4,#0x54]         ;601
0001a4  f0400002          ORR      r0,r0,#2              ;601
0001a8  6560              STR      r0,[r4,#0x54]         ;601
0001aa  2003              MOVS     r0,#3                 ;602
0001ac  e737              B        |L12.30|
                  |L12.430|
0001ae  6820              LDR      r0,[r4,#0]            ;606
0001b0  68c0              LDR      r0,[r0,#0xc]          ;606
0001b2  b280              UXTH     r0,r0                 ;606
0001b4  9001              STR      r0,[sp,#4]            ;606
0001b6  f8bd0004          LDRH     r0,[sp,#4]            ;607
                  |L12.442|
0001ba  6860              LDR      r0,[r4,#4]            ;610
0001bc  f5b07f82          CMP      r0,#0x104             ;610
0001c0  d10d              BNE      |L12.478|
0001c2  68a0              LDR      r0,[r4,#8]            ;610
0001c4  f5b04f00          CMP      r0,#0x8000            ;610
0001c8  d003              BEQ      |L12.466|
0001ca  68a0              LDR      r0,[r4,#8]            ;610
0001cc  f5b06f80          CMP      r0,#0x400             ;610
0001d0  d105              BNE      |L12.478|
                  |L12.466|
0001d2  6820              LDR      r0,[r4,#0]            ;613
0001d4  6800              LDR      r0,[r0,#0]            ;613
0001d6  f0200040          BIC      r0,r0,#0x40           ;613
0001da  6821              LDR      r1,[r4,#0]            ;613
0001dc  6008              STR      r0,[r1,#0]            ;613
                  |L12.478|
0001de  2001              MOVS     r0,#1                 ;616
0001e0  f8840051          STRB     r0,[r4,#0x51]         ;616
0001e4  6820              LDR      r0,[r4,#0]            ;618
0001e6  6880              LDR      r0,[r0,#8]            ;618
0001e8  f3c01800          UBFX     r8,r0,#4,#1           ;618
0001ec  6aa0              LDR      r0,[r4,#0x28]         ;620
0001ee  f5b05f00          CMP      r0,#0x2000            ;620
0001f2  d11b              BNE      |L12.556|
0001f4  f1b80f00          CMP      r8,#0                 ;620
0001f8  d018              BEQ      |L12.556|
0001fa  6d60              LDR      r0,[r4,#0x54]         ;622
0001fc  f0400002          ORR      r0,r0,#2              ;622
000200  6560              STR      r0,[r4,#0x54]         ;622
000202  bf00              NOP                            ;625
000204  6820              LDR      r0,[r4,#0]            ;625
000206  6800              LDR      r0,[r0,#0]            ;625
000208  f4205000          BIC      r0,r0,#0x2000         ;625
00020c  6821              LDR      r1,[r4,#0]            ;625
00020e  6008              STR      r0,[r1,#0]            ;625
000210  6820              LDR      r0,[r4,#0]            ;625
000212  6800              LDR      r0,[r0,#0]            ;625
000214  f4405000          ORR      r0,r0,#0x2000         ;625
000218  6821              LDR      r1,[r4,#0]            ;625
00021a  6008              STR      r0,[r1,#0]            ;625
00021c  bf00              NOP                            ;625
00021e  bf00              NOP                            ;628
000220  2000              MOVS     r0,#0                 ;628
000222  f8840050          STRB     r0,[r4,#0x50]         ;628
000226  bf00              NOP                            ;628
000228  2001              MOVS     r0,#1                 ;630
00022a  e6f8              B        |L12.30|
                  |L12.556|
00022c  bf00              NOP                            ;634
00022e  2000              MOVS     r0,#0                 ;634
000230  f8840050          STRB     r0,[r4,#0x50]         ;634
000234  bf00              NOP                            ;634
000236  e6f2              B        |L12.30|
                  |L12.568|
000238  2002              MOVS     r0,#2                 ;640
00023a  e6f0              B        |L12.30|
;;;643    
                          ENDP


                          AREA ||i.HAL_SPI_Receive_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Receive_DMA PROC
;;;1216     */
;;;1217   HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1218   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;1219     if(hspi->State == HAL_SPI_STATE_READY)
00000a  f8940051          LDRB     r0,[r4,#0x51]
00000e  2801              CMP      r0,#1
000010  d175              BNE      |L13.254|
;;;1220     {
;;;1221       if((pData == NULL) || (Size == 0))
000012  b106              CBZ      r6,|L13.22|
000014  b915              CBNZ     r5,|L13.28|
                  |L13.22|
;;;1222       {
;;;1223         return  HAL_ERROR;
000016  2001              MOVS     r0,#1
                  |L13.24|
;;;1224       }
;;;1225   
;;;1226       /* Process Locked */
;;;1227       __HAL_LOCK(hspi);
;;;1228   
;;;1229       /* Configure communication */
;;;1230       hspi->State       = HAL_SPI_STATE_BUSY_RX;
;;;1231       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1232   
;;;1233       hspi->pRxBuffPtr  = pData;
;;;1234       hspi->RxXferSize  = Size;
;;;1235       hspi->RxXferCount = Size;
;;;1236   
;;;1237       /*Init field not used in handle to zero */
;;;1238       hspi->RxISR = 0;
;;;1239       hspi->TxISR = 0;
;;;1240       hspi->TxXferSize   = 0;
;;;1241       hspi->TxXferCount  = 0;
;;;1242   
;;;1243       /* Configure communication direction : 1Line */
;;;1244       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;1245       {
;;;1246          SPI_1LINE_RX(hspi);
;;;1247       }
;;;1248       else if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
;;;1249       {
;;;1250          /* Process Unlocked */
;;;1251          __HAL_UNLOCK(hspi);
;;;1252   
;;;1253          /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;1254          return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
;;;1255       }
;;;1256   
;;;1257       /* Reset CRC Calculation */
;;;1258       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1259       {
;;;1260         SPI_RESET_CRC(hspi);
;;;1261       }
;;;1262   
;;;1263       /* Set the SPI RxDMA Half transfer complete callback */
;;;1264       hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
;;;1265       
;;;1266       /* Set the SPI Rx DMA transfer complete callback */
;;;1267       hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
;;;1268   
;;;1269       /* Set the DMA error callback */
;;;1270       hspi->hdmarx->XferErrorCallback = SPI_DMAError;
;;;1271   
;;;1272       /* Enable the Rx DMA Stream */
;;;1273       HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
;;;1274   
;;;1275       /* Process Unlocked */
;;;1276       __HAL_UNLOCK(hspi);
;;;1277   
;;;1278       /* Check if the SPI is already enabled */ 
;;;1279       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1280       {
;;;1281         /* Enable SPI peripheral */
;;;1282         __HAL_SPI_ENABLE(hspi);
;;;1283       }
;;;1284   
;;;1285       /* Enable Rx DMA Request */  
;;;1286       hspi->Instance->CR2 |= SPI_CR2_RXDMAEN;
;;;1287   
;;;1288       return HAL_OK;
;;;1289     }
;;;1290     else
;;;1291     {
;;;1292       return HAL_BUSY;
;;;1293     }
;;;1294   }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L13.28|
00001c  bf00              NOP                            ;1227
00001e  f8940050          LDRB     r0,[r4,#0x50]         ;1227
000022  2801              CMP      r0,#1                 ;1227
000024  d101              BNE      |L13.42|
000026  2002              MOVS     r0,#2                 ;1227
000028  e7f6              B        |L13.24|
                  |L13.42|
00002a  2001              MOVS     r0,#1                 ;1227
00002c  f8840050          STRB     r0,[r4,#0x50]         ;1227
000030  bf00              NOP                            ;1227
000032  2022              MOVS     r0,#0x22              ;1230
000034  f8840051          STRB     r0,[r4,#0x51]         ;1230
000038  2000              MOVS     r0,#0                 ;1231
00003a  6560              STR      r0,[r4,#0x54]         ;1231
00003c  63a6              STR      r6,[r4,#0x38]         ;1233
00003e  87a5              STRH     r5,[r4,#0x3c]         ;1234
000040  87e5              STRH     r5,[r4,#0x3e]         ;1235
000042  64a0              STR      r0,[r4,#0x48]         ;1238
000044  64e0              STR      r0,[r4,#0x4c]         ;1239
000046  86a0              STRH     r0,[r4,#0x34]         ;1240
000048  86e0              STRH     r0,[r4,#0x36]         ;1241
00004a  68a0              LDR      r0,[r4,#8]            ;1244
00004c  f5b04f00          CMP      r0,#0x8000            ;1244
000050  d106              BNE      |L13.96|
000052  6820              LDR      r0,[r4,#0]            ;1246
000054  6800              LDR      r0,[r0,#0]            ;1246
000056  f4204080          BIC      r0,r0,#0x4000         ;1246
00005a  6821              LDR      r1,[r4,#0]            ;1246
00005c  6008              STR      r0,[r1,#0]            ;1246
00005e  e011              B        |L13.132|
                  |L13.96|
000060  68a0              LDR      r0,[r4,#8]            ;1248
000062  b978              CBNZ     r0,|L13.132|
000064  6860              LDR      r0,[r4,#4]            ;1248
000066  f5b07f82          CMP      r0,#0x104             ;1248
00006a  d10b              BNE      |L13.132|
00006c  bf00              NOP                            ;1251
00006e  2000              MOVS     r0,#0                 ;1251
000070  f8840050          STRB     r0,[r4,#0x50]         ;1251
000074  bf00              NOP                            ;1251
000076  462b              MOV      r3,r5                 ;1254
000078  4632              MOV      r2,r6                 ;1254
00007a  4631              MOV      r1,r6                 ;1254
00007c  4620              MOV      r0,r4                 ;1254
00007e  f7fffffe          BL       HAL_SPI_TransmitReceive_DMA
000082  e7c9              B        |L13.24|
                  |L13.132|
000084  6aa0              LDR      r0,[r4,#0x28]         ;1258
000086  f5b05f00          CMP      r0,#0x2000            ;1258
00008a  d10d              BNE      |L13.168|
00008c  bf00              NOP                            ;1260
00008e  6820              LDR      r0,[r4,#0]            ;1260
000090  6800              LDR      r0,[r0,#0]            ;1260
000092  f4205000          BIC      r0,r0,#0x2000         ;1260
000096  6821              LDR      r1,[r4,#0]            ;1260
000098  6008              STR      r0,[r1,#0]            ;1260
00009a  6820              LDR      r0,[r4,#0]            ;1260
00009c  6800              LDR      r0,[r0,#0]            ;1260
00009e  f4405000          ORR      r0,r0,#0x2000         ;1260
0000a2  6821              LDR      r1,[r4,#0]            ;1260
0000a4  6008              STR      r0,[r1,#0]            ;1260
0000a6  bf00              NOP                            ;1260
                  |L13.168|
0000a8  4816              LDR      r0,|L13.260|
0000aa  6c61              LDR      r1,[r4,#0x44]         ;1264
0000ac  6408              STR      r0,[r1,#0x40]         ;1264
0000ae  4816              LDR      r0,|L13.264|
0000b0  6c61              LDR      r1,[r4,#0x44]         ;1267
0000b2  63c8              STR      r0,[r1,#0x3c]         ;1267
0000b4  4815              LDR      r0,|L13.268|
0000b6  6c61              LDR      r1,[r4,#0x44]         ;1270
0000b8  6488              STR      r0,[r1,#0x48]         ;1270
0000ba  8fe3              LDRH     r3,[r4,#0x3e]         ;1273
0000bc  6827              LDR      r7,[r4,#0]            ;1273
0000be  f107010c          ADD      r1,r7,#0xc            ;1273
0000c2  6ba2              LDR      r2,[r4,#0x38]         ;1273
0000c4  6c60              LDR      r0,[r4,#0x44]         ;1273
0000c6  f7fffffe          BL       HAL_DMA_Start_IT
0000ca  bf00              NOP                            ;1276
0000cc  2000              MOVS     r0,#0                 ;1276
0000ce  f8840050          STRB     r0,[r4,#0x50]         ;1276
0000d2  bf00              NOP                            ;1276
0000d4  6820              LDR      r0,[r4,#0]            ;1279
0000d6  6800              LDR      r0,[r0,#0]            ;1279
0000d8  f0000040          AND      r0,r0,#0x40           ;1279
0000dc  2840              CMP      r0,#0x40              ;1279
0000de  d005              BEQ      |L13.236|
0000e0  6820              LDR      r0,[r4,#0]            ;1282
0000e2  6800              LDR      r0,[r0,#0]            ;1282
0000e4  f0400040          ORR      r0,r0,#0x40           ;1282
0000e8  6821              LDR      r1,[r4,#0]            ;1282
0000ea  6008              STR      r0,[r1,#0]            ;1282
                  |L13.236|
0000ec  6820              LDR      r0,[r4,#0]            ;1286
0000ee  6840              LDR      r0,[r0,#4]            ;1286
0000f0  f0400001          ORR      r0,r0,#1              ;1286
0000f4  6821              LDR      r1,[r4,#0]            ;1286
0000f6  6048              STR      r0,[r1,#4]            ;1286
0000f8  2000              MOVS     r0,#0                 ;1288
0000fa  e78d              B        |L13.24|
0000fc  e7ff              B        |L13.254|
                  |L13.254|
0000fe  2002              MOVS     r0,#2                 ;1292
000100  e78a              B        |L13.24|
;;;1295   
                          ENDP

000102  0000              DCW      0x0000
                  |L13.260|
                          DCD      SPI_DMAHalfReceiveCplt
                  |L13.264|
                          DCD      SPI_DMAReceiveCplt
                  |L13.268|
                          DCD      SPI_DMAError

                          AREA ||i.HAL_SPI_Receive_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Receive_IT PROC
;;;980      */
;;;981    HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b570              PUSH     {r4-r6,lr}
;;;982    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;983      if(hspi->State == HAL_SPI_STATE_READY)
000008  f8940051          LDRB     r0,[r4,#0x51]
00000c  2801              CMP      r0,#1
00000e  d164              BNE      |L14.218|
;;;984      {
;;;985        if((pData == NULL) || (Size == 0)) 
000010  b106              CBZ      r6,|L14.20|
000012  b90d              CBNZ     r5,|L14.24|
                  |L14.20|
;;;986        {
;;;987          return  HAL_ERROR;
000014  2001              MOVS     r0,#1
                  |L14.22|
;;;988        }
;;;989    
;;;990        /* Process Locked */
;;;991        __HAL_LOCK(hspi);
;;;992    
;;;993        /* Configure communication */
;;;994        hspi->State        = HAL_SPI_STATE_BUSY_RX;
;;;995        hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
;;;996    
;;;997        hspi->RxISR = &SPI_RxISR;
;;;998        hspi->pRxBuffPtr   = pData;
;;;999        hspi->RxXferSize   = Size;
;;;1000       hspi->RxXferCount  = Size ; 
;;;1001   
;;;1002      /*Init field not used in handle to zero */
;;;1003       hspi->TxISR = 0;
;;;1004       hspi->TxXferSize   = 0;
;;;1005       hspi->TxXferCount  = 0;
;;;1006   
;;;1007       /* Configure communication direction : 1Line */
;;;1008       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;1009       {
;;;1010          SPI_1LINE_RX(hspi);
;;;1011       }
;;;1012       else if((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
;;;1013       {
;;;1014          /* Process Unlocked */
;;;1015          __HAL_UNLOCK(hspi);
;;;1016   
;;;1017          /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
;;;1018          return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
;;;1019       }
;;;1020   
;;;1021       /* Reset CRC Calculation */
;;;1022       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1023       {
;;;1024         SPI_RESET_CRC(hspi);
;;;1025       }
;;;1026   
;;;1027       /* Enable TXE and ERR interrupt */
;;;1028       __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
;;;1029   
;;;1030       /* Process Unlocked */
;;;1031       __HAL_UNLOCK(hspi);
;;;1032   
;;;1033       /* Note : The SPI must be enabled after unlocking current process 
;;;1034                 to avoid the risk of SPI interrupt handle execution before current
;;;1035                 process unlock */
;;;1036   
;;;1037           /* Check if the SPI is already enabled */ 
;;;1038       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1039       {
;;;1040         /* Enable SPI peripheral */
;;;1041         __HAL_SPI_ENABLE(hspi);
;;;1042       }
;;;1043   
;;;1044       return HAL_OK;
;;;1045     }
;;;1046     else
;;;1047     {
;;;1048       return HAL_BUSY; 
;;;1049     }
;;;1050   }
000016  bd70              POP      {r4-r6,pc}
                  |L14.24|
000018  bf00              NOP                            ;991
00001a  f8940050          LDRB     r0,[r4,#0x50]         ;991
00001e  2801              CMP      r0,#1                 ;991
000020  d101              BNE      |L14.38|
000022  2002              MOVS     r0,#2                 ;991
000024  e7f7              B        |L14.22|
                  |L14.38|
000026  2001              MOVS     r0,#1                 ;991
000028  f8840050          STRB     r0,[r4,#0x50]         ;991
00002c  bf00              NOP                            ;991
00002e  2022              MOVS     r0,#0x22              ;994
000030  f8840051          STRB     r0,[r4,#0x51]         ;994
000034  2000              MOVS     r0,#0                 ;995
000036  6560              STR      r0,[r4,#0x54]         ;995
000038  4829              LDR      r0,|L14.224|
00003a  64a0              STR      r0,[r4,#0x48]         ;997
00003c  63a6              STR      r6,[r4,#0x38]         ;998
00003e  87a5              STRH     r5,[r4,#0x3c]         ;999
000040  87e5              STRH     r5,[r4,#0x3e]         ;1000
000042  2000              MOVS     r0,#0                 ;1003
000044  64e0              STR      r0,[r4,#0x4c]         ;1003
000046  86a0              STRH     r0,[r4,#0x34]         ;1004
000048  86e0              STRH     r0,[r4,#0x36]         ;1005
00004a  68a0              LDR      r0,[r4,#8]            ;1008
00004c  f5b04f00          CMP      r0,#0x8000            ;1008
000050  d106              BNE      |L14.96|
000052  6820              LDR      r0,[r4,#0]            ;1010
000054  6800              LDR      r0,[r0,#0]            ;1010
000056  f4204080          BIC      r0,r0,#0x4000         ;1010
00005a  6821              LDR      r1,[r4,#0]            ;1010
00005c  6008              STR      r0,[r1,#0]            ;1010
00005e  e011              B        |L14.132|
                  |L14.96|
000060  68a0              LDR      r0,[r4,#8]            ;1012
000062  b978              CBNZ     r0,|L14.132|
000064  6860              LDR      r0,[r4,#4]            ;1012
000066  f5b07f82          CMP      r0,#0x104             ;1012
00006a  d10b              BNE      |L14.132|
00006c  bf00              NOP                            ;1015
00006e  2000              MOVS     r0,#0                 ;1015
000070  f8840050          STRB     r0,[r4,#0x50]         ;1015
000074  bf00              NOP                            ;1015
000076  462b              MOV      r3,r5                 ;1018
000078  4632              MOV      r2,r6                 ;1018
00007a  4631              MOV      r1,r6                 ;1018
00007c  4620              MOV      r0,r4                 ;1018
00007e  f7fffffe          BL       HAL_SPI_TransmitReceive_IT
000082  e7c8              B        |L14.22|
                  |L14.132|
000084  6aa0              LDR      r0,[r4,#0x28]         ;1022
000086  f5b05f00          CMP      r0,#0x2000            ;1022
00008a  d10d              BNE      |L14.168|
00008c  bf00              NOP                            ;1024
00008e  6820              LDR      r0,[r4,#0]            ;1024
000090  6800              LDR      r0,[r0,#0]            ;1024
000092  f4205000          BIC      r0,r0,#0x2000         ;1024
000096  6821              LDR      r1,[r4,#0]            ;1024
000098  6008              STR      r0,[r1,#0]            ;1024
00009a  6820              LDR      r0,[r4,#0]            ;1024
00009c  6800              LDR      r0,[r0,#0]            ;1024
00009e  f4405000          ORR      r0,r0,#0x2000         ;1024
0000a2  6821              LDR      r1,[r4,#0]            ;1024
0000a4  6008              STR      r0,[r1,#0]            ;1024
0000a6  bf00              NOP                            ;1024
                  |L14.168|
0000a8  6820              LDR      r0,[r4,#0]            ;1028
0000aa  6840              LDR      r0,[r0,#4]            ;1028
0000ac  f0400060          ORR      r0,r0,#0x60           ;1028
0000b0  6821              LDR      r1,[r4,#0]            ;1028
0000b2  6048              STR      r0,[r1,#4]            ;1028
0000b4  bf00              NOP                            ;1031
0000b6  2000              MOVS     r0,#0                 ;1031
0000b8  f8840050          STRB     r0,[r4,#0x50]         ;1031
0000bc  bf00              NOP                            ;1031
0000be  6820              LDR      r0,[r4,#0]            ;1038
0000c0  6800              LDR      r0,[r0,#0]            ;1038
0000c2  f0000040          AND      r0,r0,#0x40           ;1038
0000c6  2840              CMP      r0,#0x40              ;1038
0000c8  d005              BEQ      |L14.214|
0000ca  6820              LDR      r0,[r4,#0]            ;1041
0000cc  6800              LDR      r0,[r0,#0]            ;1041
0000ce  f0400040          ORR      r0,r0,#0x40           ;1041
0000d2  6821              LDR      r1,[r4,#0]            ;1041
0000d4  6008              STR      r0,[r1,#0]            ;1041
                  |L14.214|
0000d6  2000              MOVS     r0,#0                 ;1044
0000d8  e79d              B        |L14.22|
                  |L14.218|
0000da  2002              MOVS     r0,#2                 ;1048
0000dc  e79b              B        |L14.22|
;;;1051   
                          ENDP

0000de  0000              DCW      0x0000
                  |L14.224|
                          DCD      SPI_RxISR

                          AREA ||i.HAL_SPI_RxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_RxCpltCallback PROC
;;;1580     */
;;;1581   __weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1582   {
;;;1583     /* Prevent unused argument(s) compilation warning */
;;;1584     UNUSED(hspi);
;;;1585     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1586               the HAL_SPI_RxCpltCallback() could be implemented in the user file
;;;1587      */
;;;1588   }
;;;1589   
                          ENDP


                          AREA ||i.HAL_SPI_RxHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_RxHalfCpltCallback PROC
;;;1625     */
;;;1626   __weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1627   {
;;;1628     /* Prevent unused argument(s) compilation warning */
;;;1629     UNUSED(hspi);
;;;1630     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1631               the HAL_SPI_RxHalfCpltCallback() could be implemented in the user file
;;;1632      */
;;;1633   }
;;;1634   
                          ENDP


                          AREA ||i.HAL_SPI_Transmit||, CODE, READONLY, ALIGN=1

                  HAL_SPI_Transmit PROC
;;;335      */
;;;336    HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
000000  b5f8              PUSH     {r3-r7,lr}
;;;337    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;338    
;;;339      if(hspi->State == HAL_SPI_STATE_READY)
00000a  f8940051          LDRB     r0,[r4,#0x51]
00000e  2801              CMP      r0,#1
000010  d173              BNE      |L17.250|
;;;340      {
;;;341        if((pData == NULL ) || (Size == 0)) 
000012  b106              CBZ      r6,|L17.22|
000014  b90d              CBNZ     r5,|L17.26|
                  |L17.22|
;;;342        {
;;;343          return  HAL_ERROR;
000016  2001              MOVS     r0,#1
                  |L17.24|
;;;344        }
;;;345    
;;;346        /* Check the parameters */
;;;347        assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;348    
;;;349        /* Process Locked */
;;;350        __HAL_LOCK(hspi);
;;;351    
;;;352        /* Configure communication */
;;;353        hspi->State = HAL_SPI_STATE_BUSY_TX;
;;;354        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;355    
;;;356        hspi->pTxBuffPtr = pData;
;;;357        hspi->TxXferSize = Size;
;;;358        hspi->TxXferCount = Size;
;;;359    
;;;360        /*Init field not used in handle to zero */
;;;361        hspi->TxISR = 0;
;;;362        hspi->RxISR = 0;
;;;363        hspi->RxXferSize   = 0;
;;;364        hspi->RxXferCount  = 0;
;;;365    
;;;366        /* Reset CRC Calculation */
;;;367        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;368        {
;;;369          SPI_RESET_CRC(hspi);
;;;370        }
;;;371    
;;;372        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;373        {
;;;374          /* Configure communication direction : 1Line */
;;;375          SPI_1LINE_TX(hspi);
;;;376        }
;;;377    
;;;378        /* Check if the SPI is already enabled */ 
;;;379        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;380        {
;;;381          /* Enable SPI peripheral */
;;;382          __HAL_SPI_ENABLE(hspi);
;;;383        }
;;;384    
;;;385        /* Transmit data in 8 Bit mode */
;;;386        if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
;;;387        {
;;;388          if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
;;;389          {
;;;390            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;391            hspi->TxXferCount--;
;;;392          }
;;;393          while(hspi->TxXferCount > 0)
;;;394          {
;;;395            /* Wait until TXE flag is set to send data */
;;;396            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;397            { 
;;;398              return HAL_TIMEOUT;
;;;399            }
;;;400            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;401            hspi->TxXferCount--;
;;;402          }
;;;403          /* Enable CRC Transmission */
;;;404          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;405          {
;;;406            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;407          }
;;;408        }
;;;409        /* Transmit data in 16 Bit mode */
;;;410        else
;;;411        {
;;;412          if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
;;;413          {
;;;414            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;415            hspi->pTxBuffPtr+=2;
;;;416            hspi->TxXferCount--;
;;;417          }
;;;418          while(hspi->TxXferCount > 0)
;;;419          {
;;;420            /* Wait until TXE flag is set to send data */
;;;421            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;422            { 
;;;423              return HAL_TIMEOUT;
;;;424            }
;;;425            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;426            hspi->pTxBuffPtr+=2;
;;;427            hspi->TxXferCount--;
;;;428          }
;;;429          /* Enable CRC Transmission */
;;;430          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
;;;431          {
;;;432            hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;433          }
;;;434        }
;;;435    
;;;436        /* Wait until TXE flag is set to send data */
;;;437        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;438        {
;;;439          hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
;;;440          return HAL_TIMEOUT;
;;;441        }
;;;442    
;;;443        /* Wait until Busy flag is reset before disabling SPI */
;;;444        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
;;;445        { 
;;;446          hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
;;;447          return HAL_TIMEOUT;
;;;448        }
;;;449     
;;;450        /* Clear OVERRUN flag in 2 Lines communication mode because received is not read */
;;;451        if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
;;;452        {
;;;453          __HAL_SPI_CLEAR_OVRFLAG(hspi);
;;;454        }
;;;455    
;;;456        hspi->State = HAL_SPI_STATE_READY; 
;;;457    
;;;458        /* Process Unlocked */
;;;459        __HAL_UNLOCK(hspi);
;;;460    
;;;461        return HAL_OK;
;;;462      }
;;;463      else
;;;464      {
;;;465        return HAL_BUSY;
;;;466      }
;;;467    }
000018  bdf8              POP      {r3-r7,pc}
                  |L17.26|
00001a  bf00              NOP                            ;350
00001c  f8940050          LDRB     r0,[r4,#0x50]         ;350
000020  2801              CMP      r0,#1                 ;350
000022  d101              BNE      |L17.40|
000024  2002              MOVS     r0,#2                 ;350
000026  e7f7              B        |L17.24|
                  |L17.40|
000028  2001              MOVS     r0,#1                 ;350
00002a  f8840050          STRB     r0,[r4,#0x50]         ;350
00002e  bf00              NOP                            ;350
000030  2012              MOVS     r0,#0x12              ;353
000032  f8840051          STRB     r0,[r4,#0x51]         ;353
000036  2000              MOVS     r0,#0                 ;354
000038  6560              STR      r0,[r4,#0x54]         ;354
00003a  6326              STR      r6,[r4,#0x30]         ;356
00003c  86a5              STRH     r5,[r4,#0x34]         ;357
00003e  86e5              STRH     r5,[r4,#0x36]         ;358
000040  64e0              STR      r0,[r4,#0x4c]         ;361
000042  64a0              STR      r0,[r4,#0x48]         ;362
000044  87a0              STRH     r0,[r4,#0x3c]         ;363
000046  87e0              STRH     r0,[r4,#0x3e]         ;364
000048  6aa0              LDR      r0,[r4,#0x28]         ;367
00004a  f5b05f00          CMP      r0,#0x2000            ;367
00004e  d10d              BNE      |L17.108|
000050  bf00              NOP                            ;369
000052  6820              LDR      r0,[r4,#0]            ;369
000054  6800              LDR      r0,[r0,#0]            ;369
000056  f4205000          BIC      r0,r0,#0x2000         ;369
00005a  6821              LDR      r1,[r4,#0]            ;369
00005c  6008              STR      r0,[r1,#0]            ;369
00005e  6820              LDR      r0,[r4,#0]            ;369
000060  6800              LDR      r0,[r0,#0]            ;369
000062  f4405000          ORR      r0,r0,#0x2000         ;369
000066  6821              LDR      r1,[r4,#0]            ;369
000068  6008              STR      r0,[r1,#0]            ;369
00006a  bf00              NOP                            ;369
                  |L17.108|
00006c  68a0              LDR      r0,[r4,#8]            ;372
00006e  f5b04f00          CMP      r0,#0x8000            ;372
000072  d105              BNE      |L17.128|
000074  6820              LDR      r0,[r4,#0]            ;375
000076  6800              LDR      r0,[r0,#0]            ;375
000078  f4404080          ORR      r0,r0,#0x4000         ;375
00007c  6821              LDR      r1,[r4,#0]            ;375
00007e  6008              STR      r0,[r1,#0]            ;375
                  |L17.128|
000080  6820              LDR      r0,[r4,#0]            ;379
000082  6800              LDR      r0,[r0,#0]            ;379
000084  f0000040          AND      r0,r0,#0x40           ;379
000088  2840              CMP      r0,#0x40              ;379
00008a  d005              BEQ      |L17.152|
00008c  6820              LDR      r0,[r4,#0]            ;382
00008e  6800              LDR      r0,[r0,#0]            ;382
000090  f0400040          ORR      r0,r0,#0x40           ;382
000094  6821              LDR      r1,[r4,#0]            ;382
000096  6008              STR      r0,[r1,#0]            ;382
                  |L17.152|
000098  68e0              LDR      r0,[r4,#0xc]          ;386
00009a  bb78              CBNZ     r0,|L17.252|
00009c  6860              LDR      r0,[r4,#4]            ;388
00009e  b110              CBZ      r0,|L17.166|
0000a0  8ee0              LDRH     r0,[r4,#0x36]         ;388
0000a2  2801              CMP      r0,#1                 ;388
0000a4  d108              BNE      |L17.184|
                  |L17.166|
0000a6  6b21              LDR      r1,[r4,#0x30]         ;390
0000a8  1c48              ADDS     r0,r1,#1              ;390
0000aa  6320              STR      r0,[r4,#0x30]         ;390
0000ac  7808              LDRB     r0,[r1,#0]            ;390
0000ae  6821              LDR      r1,[r4,#0]            ;390
0000b0  60c8              STR      r0,[r1,#0xc]          ;390
0000b2  8ee0              LDRH     r0,[r4,#0x36]         ;391
0000b4  1e40              SUBS     r0,r0,#1              ;391
0000b6  86e0              STRH     r0,[r4,#0x36]         ;391
                  |L17.184|
0000b8  e011              B        |L17.222|
                  |L17.186|
0000ba  463b              MOV      r3,r7                 ;396
0000bc  2200              MOVS     r2,#0                 ;396
0000be  2102              MOVS     r1,#2                 ;396
0000c0  4620              MOV      r0,r4                 ;396
0000c2  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000c6  b108              CBZ      r0,|L17.204|
0000c8  2003              MOVS     r0,#3                 ;398
0000ca  e7a5              B        |L17.24|
                  |L17.204|
0000cc  6b21              LDR      r1,[r4,#0x30]         ;400
0000ce  1c48              ADDS     r0,r1,#1              ;400
0000d0  6320              STR      r0,[r4,#0x30]         ;400
0000d2  7808              LDRB     r0,[r1,#0]            ;400
0000d4  6821              LDR      r1,[r4,#0]            ;400
0000d6  60c8              STR      r0,[r1,#0xc]          ;400
0000d8  8ee0              LDRH     r0,[r4,#0x36]         ;401
0000da  1e40              SUBS     r0,r0,#1              ;401
0000dc  86e0              STRH     r0,[r4,#0x36]         ;401
                  |L17.222|
0000de  8ee0              LDRH     r0,[r4,#0x36]         ;393
0000e0  2800              CMP      r0,#0                 ;393
0000e2  dcea              BGT      |L17.186|
0000e4  6aa0              LDR      r0,[r4,#0x28]         ;404
0000e6  f5b05f00          CMP      r0,#0x2000            ;404
0000ea  d138              BNE      |L17.350|
0000ec  6820              LDR      r0,[r4,#0]            ;406
0000ee  6800              LDR      r0,[r0,#0]            ;406
0000f0  f4405080          ORR      r0,r0,#0x1000         ;406
0000f4  6821              LDR      r1,[r4,#0]            ;406
0000f6  6008              STR      r0,[r1,#0]            ;406
0000f8  e031              B        |L17.350|
                  |L17.250|
0000fa  e060              B        |L17.446|
                  |L17.252|
0000fc  e7ff              B        |L17.254|
                  |L17.254|
0000fe  6860              LDR      r0,[r4,#4]            ;412
000100  b110              CBZ      r0,|L17.264|
000102  8ee0              LDRH     r0,[r4,#0x36]         ;412
000104  2801              CMP      r0,#1                 ;412
000106  d109              BNE      |L17.284|
                  |L17.264|
000108  6b20              LDR      r0,[r4,#0x30]         ;414
00010a  8800              LDRH     r0,[r0,#0]            ;414
00010c  6821              LDR      r1,[r4,#0]            ;414
00010e  60c8              STR      r0,[r1,#0xc]          ;414
000110  6b20              LDR      r0,[r4,#0x30]         ;415
000112  1c80              ADDS     r0,r0,#2              ;415
000114  6320              STR      r0,[r4,#0x30]         ;415
000116  8ee0              LDRH     r0,[r4,#0x36]         ;416
000118  1e40              SUBS     r0,r0,#1              ;416
00011a  86e0              STRH     r0,[r4,#0x36]         ;416
                  |L17.284|
00011c  e012              B        |L17.324|
                  |L17.286|
00011e  463b              MOV      r3,r7                 ;421
000120  2200              MOVS     r2,#0                 ;421
000122  2102              MOVS     r1,#2                 ;421
000124  4620              MOV      r0,r4                 ;421
000126  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00012a  b108              CBZ      r0,|L17.304|
00012c  2003              MOVS     r0,#3                 ;423
00012e  e773              B        |L17.24|
                  |L17.304|
000130  6b20              LDR      r0,[r4,#0x30]         ;425
000132  8800              LDRH     r0,[r0,#0]            ;425
000134  6821              LDR      r1,[r4,#0]            ;425
000136  60c8              STR      r0,[r1,#0xc]          ;425
000138  6b20              LDR      r0,[r4,#0x30]         ;426
00013a  1c80              ADDS     r0,r0,#2              ;426
00013c  6320              STR      r0,[r4,#0x30]         ;426
00013e  8ee0              LDRH     r0,[r4,#0x36]         ;427
000140  1e40              SUBS     r0,r0,#1              ;427
000142  86e0              STRH     r0,[r4,#0x36]         ;427
                  |L17.324|
000144  8ee0              LDRH     r0,[r4,#0x36]         ;418
000146  2800              CMP      r0,#0                 ;418
000148  dce9              BGT      |L17.286|
00014a  6aa0              LDR      r0,[r4,#0x28]         ;430
00014c  f5b05f00          CMP      r0,#0x2000            ;430
000150  d105              BNE      |L17.350|
000152  6820              LDR      r0,[r4,#0]            ;432
000154  6800              LDR      r0,[r0,#0]            ;432
000156  f4405080          ORR      r0,r0,#0x1000         ;432
00015a  6821              LDR      r1,[r4,#0]            ;432
00015c  6008              STR      r0,[r1,#0]            ;432
                  |L17.350|
00015e  463b              MOV      r3,r7                 ;437
000160  2200              MOVS     r2,#0                 ;437
000162  2102              MOVS     r1,#2                 ;437
000164  4620              MOV      r0,r4                 ;437
000166  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00016a  b128              CBZ      r0,|L17.376|
00016c  6d60              LDR      r0,[r4,#0x54]         ;439
00016e  f0400020          ORR      r0,r0,#0x20           ;439
000172  6560              STR      r0,[r4,#0x54]         ;439
000174  2003              MOVS     r0,#3                 ;440
000176  e74f              B        |L17.24|
                  |L17.376|
000178  463b              MOV      r3,r7                 ;444
00017a  2201              MOVS     r2,#1                 ;444
00017c  2180              MOVS     r1,#0x80              ;444
00017e  4620              MOV      r0,r4                 ;444
000180  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000184  b128              CBZ      r0,|L17.402|
000186  6d60              LDR      r0,[r4,#0x54]         ;446
000188  f0400020          ORR      r0,r0,#0x20           ;446
00018c  6560              STR      r0,[r4,#0x54]         ;446
00018e  2003              MOVS     r0,#3                 ;447
000190  e742              B        |L17.24|
                  |L17.402|
000192  68a0              LDR      r0,[r4,#8]            ;451
000194  b950              CBNZ     r0,|L17.428|
000196  bf00              NOP                            ;453
000198  2000              MOVS     r0,#0                 ;453
00019a  9000              STR      r0,[sp,#0]            ;453
00019c  6820              LDR      r0,[r4,#0]            ;453
00019e  68c0              LDR      r0,[r0,#0xc]          ;453
0001a0  9000              STR      r0,[sp,#0]            ;453
0001a2  6820              LDR      r0,[r4,#0]            ;453
0001a4  6880              LDR      r0,[r0,#8]            ;453
0001a6  9000              STR      r0,[sp,#0]            ;453
0001a8  bf00              NOP                            ;453
0001aa  bf00              NOP                            ;453
                  |L17.428|
0001ac  2001              MOVS     r0,#1                 ;456
0001ae  f8840051          STRB     r0,[r4,#0x51]         ;456
0001b2  bf00              NOP                            ;459
0001b4  2000              MOVS     r0,#0                 ;459
0001b6  f8840050          STRB     r0,[r4,#0x50]         ;459
0001ba  bf00              NOP                            ;459
0001bc  e72c              B        |L17.24|
                  |L17.446|
0001be  2002              MOVS     r0,#2                 ;465
0001c0  e72a              B        |L17.24|
;;;468    
                          ENDP


                          AREA ||i.HAL_SPI_TransmitReceive||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TransmitReceive PROC
;;;653      */
;;;654    HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;655    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
00000c  f8dd9028          LDR      r9,[sp,#0x28]
;;;656      __IO uint16_t tmpreg;
;;;657      uint32_t tmpstate = 0, tmp = 0;
000010  f04f0800          MOV      r8,#0
000014  46c2              MOV      r10,r8
;;;658      
;;;659      tmpstate = hspi->State; 
000016  f8948051          LDRB     r8,[r4,#0x51]
;;;660      if((tmpstate == HAL_SPI_STATE_READY) || (tmpstate == HAL_SPI_STATE_BUSY_RX))
00001a  f1b80f01          CMP      r8,#1
00001e  d002              BEQ      |L18.38|
000020  f1b80f22          CMP      r8,#0x22
000024  d176              BNE      |L18.276|
                  |L18.38|
;;;661      {
;;;662        if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
000026  b10e              CBZ      r6,|L18.44|
000028  b107              CBZ      r7,|L18.44|
00002a  b915              CBNZ     r5,|L18.50|
                  |L18.44|
;;;663        {
;;;664          return  HAL_ERROR;
00002c  2001              MOVS     r0,#1
                  |L18.46|
;;;665        }
;;;666    
;;;667        /* Check the parameters */
;;;668        assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;669    
;;;670        /* Process Locked */
;;;671        __HAL_LOCK(hspi);
;;;672     
;;;673        /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;674        if(hspi->State == HAL_SPI_STATE_READY)
;;;675        {
;;;676          hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;677        }
;;;678    
;;;679         /* Configure communication */   
;;;680        hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;681    
;;;682        hspi->pRxBuffPtr  = pRxData;
;;;683        hspi->RxXferSize  = Size;
;;;684        hspi->RxXferCount = Size;  
;;;685        
;;;686        hspi->pTxBuffPtr  = pTxData;
;;;687        hspi->TxXferSize  = Size; 
;;;688        hspi->TxXferCount = Size;
;;;689    
;;;690        /*Init field not used in handle to zero */
;;;691        hspi->RxISR = 0;
;;;692        hspi->TxISR = 0;
;;;693    
;;;694        /* Reset CRC Calculation */
;;;695        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;696        {
;;;697          SPI_RESET_CRC(hspi);
;;;698        }
;;;699    
;;;700        /* Check if the SPI is already enabled */ 
;;;701        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;702        {
;;;703          /* Enable SPI peripheral */
;;;704          __HAL_SPI_ENABLE(hspi);
;;;705        }
;;;706    
;;;707        /* Transmit and Receive data in 16 Bit mode */
;;;708        if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
;;;709        {
;;;710          if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
;;;711          {
;;;712            hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;713            hspi->pTxBuffPtr+=2;
;;;714            hspi->TxXferCount--;
;;;715          }
;;;716          if(hspi->TxXferCount == 0)
;;;717          {
;;;718            /* Enable CRC Transmission */
;;;719            if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;720            {
;;;721              hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;722            }
;;;723    
;;;724            /* Wait until RXNE flag is set */
;;;725            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;726            { 
;;;727              return HAL_TIMEOUT;
;;;728            }
;;;729    
;;;730            *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;731            hspi->pRxBuffPtr+=2;
;;;732            hspi->RxXferCount--;
;;;733          }
;;;734          else
;;;735          {
;;;736            while(hspi->TxXferCount > 0)
;;;737            {
;;;738              /* Wait until TXE flag is set to send data */
;;;739              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;740              { 
;;;741                return HAL_TIMEOUT;
;;;742              }
;;;743    
;;;744              hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
;;;745              hspi->pTxBuffPtr+=2;
;;;746              hspi->TxXferCount--;
;;;747    
;;;748              /* Enable CRC Transmission */
;;;749              if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
;;;750              {
;;;751                hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;752              }
;;;753    
;;;754              /* Wait until RXNE flag is set */
;;;755              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;756              { 
;;;757                return HAL_TIMEOUT;
;;;758              }
;;;759              
;;;760              *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;761              hspi->pRxBuffPtr+=2;
;;;762              hspi->RxXferCount--;
;;;763            }
;;;764            /* Receive the last byte */
;;;765            if(hspi->Init.Mode == SPI_MODE_SLAVE)
;;;766            {
;;;767              /* Wait until RXNE flag is set */
;;;768              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;769              {
;;;770                return HAL_TIMEOUT;
;;;771              }
;;;772              
;;;773              *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;774              hspi->pRxBuffPtr+=2;
;;;775              hspi->RxXferCount--;
;;;776            }
;;;777          }
;;;778        }
;;;779        /* Transmit and Receive data in 8 Bit mode */
;;;780        else
;;;781        {
;;;782          if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
;;;783          {
;;;784            hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;785            hspi->TxXferCount--;
;;;786          }
;;;787          if(hspi->TxXferCount == 0)
;;;788          {
;;;789            /* Enable CRC Transmission */
;;;790            if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;791            {
;;;792              hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;793            }
;;;794    
;;;795            /* Wait until RXNE flag is set */
;;;796            if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;797            {
;;;798              return HAL_TIMEOUT;
;;;799            }
;;;800    
;;;801            (*hspi->pRxBuffPtr) = hspi->Instance->DR;
;;;802            hspi->RxXferCount--;
;;;803          }
;;;804          else
;;;805          {
;;;806            while(hspi->TxXferCount > 0)
;;;807            {
;;;808              /* Wait until TXE flag is set to send data */
;;;809              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
;;;810              {
;;;811                return HAL_TIMEOUT;
;;;812              }
;;;813    
;;;814              hspi->Instance->DR = (*hspi->pTxBuffPtr++);
;;;815              hspi->TxXferCount--;
;;;816    
;;;817              /* Enable CRC Transmission */
;;;818              if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
;;;819              {
;;;820                hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
;;;821              }
;;;822    
;;;823                /* Wait until RXNE flag is set */
;;;824                if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;825                {
;;;826                  return HAL_TIMEOUT;
;;;827                }
;;;828                
;;;829                (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;830                hspi->RxXferCount--;
;;;831            }
;;;832            if(hspi->Init.Mode == SPI_MODE_SLAVE)
;;;833            {
;;;834              /* Wait until RXNE flag is set */
;;;835              if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;836              {
;;;837                return HAL_TIMEOUT;
;;;838              }
;;;839              
;;;840              (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
;;;841              hspi->RxXferCount--;
;;;842            }
;;;843          }
;;;844        }
;;;845    
;;;846        /* Read CRC from DR to close CRC calculation process */
;;;847        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;848        {
;;;849          /* Wait until RXNE flag is set */
;;;850          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
;;;851          {
;;;852            hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
;;;853            return HAL_TIMEOUT;
;;;854          }
;;;855          /* Read CRC */
;;;856          tmpreg = hspi->Instance->DR;
;;;857          UNUSED(tmpreg);
;;;858        }
;;;859    
;;;860        /* Wait until Busy flag is reset before disabling SPI */
;;;861        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
;;;862        {
;;;863          hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
;;;864          return HAL_TIMEOUT;
;;;865        }
;;;866        
;;;867        hspi->State = HAL_SPI_STATE_READY;
;;;868    
;;;869        tmp = __HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR);
;;;870        /* Check if CRC error occurred */
;;;871        if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (tmp != RESET))
;;;872        {
;;;873          hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
;;;874    
;;;875          /* Reset CRC Calculation */
;;;876          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;877          {
;;;878            SPI_RESET_CRC(hspi);
;;;879          }
;;;880    
;;;881          /* Process Unlocked */
;;;882          __HAL_UNLOCK(hspi);
;;;883          
;;;884          return HAL_ERROR; 
;;;885        }
;;;886    
;;;887        /* Process Unlocked */
;;;888        __HAL_UNLOCK(hspi);
;;;889    
;;;890        return HAL_OK;
;;;891      }
;;;892      else
;;;893      {
;;;894        return HAL_BUSY;
;;;895      }
;;;896    }
00002e  e8bd8ff8          POP      {r3-r11,pc}
                  |L18.50|
000032  bf00              NOP                            ;671
000034  f8940050          LDRB     r0,[r4,#0x50]         ;671
000038  2801              CMP      r0,#1                 ;671
00003a  d101              BNE      |L18.64|
00003c  2002              MOVS     r0,#2                 ;671
00003e  e7f6              B        |L18.46|
                  |L18.64|
000040  2001              MOVS     r0,#1                 ;671
000042  f8840050          STRB     r0,[r4,#0x50]         ;671
000046  bf00              NOP                            ;671
000048  f8940051          LDRB     r0,[r4,#0x51]         ;674
00004c  2801              CMP      r0,#1                 ;674
00004e  d102              BNE      |L18.86|
000050  2032              MOVS     r0,#0x32              ;676
000052  f8840051          STRB     r0,[r4,#0x51]         ;676
                  |L18.86|
000056  2000              MOVS     r0,#0                 ;680
000058  6560              STR      r0,[r4,#0x54]         ;680
00005a  63a7              STR      r7,[r4,#0x38]         ;682
00005c  87a5              STRH     r5,[r4,#0x3c]         ;683
00005e  87e5              STRH     r5,[r4,#0x3e]         ;684
000060  6326              STR      r6,[r4,#0x30]         ;686
000062  86a5              STRH     r5,[r4,#0x34]         ;687
000064  86e5              STRH     r5,[r4,#0x36]         ;688
000066  64a0              STR      r0,[r4,#0x48]         ;691
000068  64e0              STR      r0,[r4,#0x4c]         ;692
00006a  6aa0              LDR      r0,[r4,#0x28]         ;695
00006c  f5b05f00          CMP      r0,#0x2000            ;695
000070  d10d              BNE      |L18.142|
000072  bf00              NOP                            ;697
000074  6820              LDR      r0,[r4,#0]            ;697
000076  6800              LDR      r0,[r0,#0]            ;697
000078  f4205000          BIC      r0,r0,#0x2000         ;697
00007c  6821              LDR      r1,[r4,#0]            ;697
00007e  6008              STR      r0,[r1,#0]            ;697
000080  6820              LDR      r0,[r4,#0]            ;697
000082  6800              LDR      r0,[r0,#0]            ;697
000084  f4405000          ORR      r0,r0,#0x2000         ;697
000088  6821              LDR      r1,[r4,#0]            ;697
00008a  6008              STR      r0,[r1,#0]            ;697
00008c  bf00              NOP                            ;697
                  |L18.142|
00008e  6820              LDR      r0,[r4,#0]            ;701
000090  6800              LDR      r0,[r0,#0]            ;701
000092  f0000040          AND      r0,r0,#0x40           ;701
000096  2840              CMP      r0,#0x40              ;701
000098  d005              BEQ      |L18.166|
00009a  6820              LDR      r0,[r4,#0]            ;704
00009c  6800              LDR      r0,[r0,#0]            ;704
00009e  f0400040          ORR      r0,r0,#0x40           ;704
0000a2  6821              LDR      r1,[r4,#0]            ;704
0000a4  6008              STR      r0,[r1,#0]            ;704
                  |L18.166|
0000a6  68e0              LDR      r0,[r4,#0xc]          ;708
0000a8  f5b06f00          CMP      r0,#0x800             ;708
0000ac  d175              BNE      |L18.410|
0000ae  6860              LDR      r0,[r4,#4]            ;710
0000b0  b130              CBZ      r0,|L18.192|
0000b2  6860              LDR      r0,[r4,#4]            ;710
0000b4  f5b07f82          CMP      r0,#0x104             ;710
0000b8  d10c              BNE      |L18.212|
0000ba  8ee0              LDRH     r0,[r4,#0x36]         ;710
0000bc  2801              CMP      r0,#1                 ;710
0000be  d109              BNE      |L18.212|
                  |L18.192|
0000c0  6b20              LDR      r0,[r4,#0x30]         ;712
0000c2  8800              LDRH     r0,[r0,#0]            ;712
0000c4  6821              LDR      r1,[r4,#0]            ;712
0000c6  60c8              STR      r0,[r1,#0xc]          ;712
0000c8  6b20              LDR      r0,[r4,#0x30]         ;713
0000ca  1c80              ADDS     r0,r0,#2              ;713
0000cc  6320              STR      r0,[r4,#0x30]         ;713
0000ce  8ee0              LDRH     r0,[r4,#0x36]         ;714
0000d0  1e40              SUBS     r0,r0,#1              ;714
0000d2  86e0              STRH     r0,[r4,#0x36]         ;714
                  |L18.212|
0000d4  8ee0              LDRH     r0,[r4,#0x36]         ;716
0000d6  b9f0              CBNZ     r0,|L18.278|
0000d8  6aa0              LDR      r0,[r4,#0x28]         ;719
0000da  f5b05f00          CMP      r0,#0x2000            ;719
0000de  d105              BNE      |L18.236|
0000e0  6820              LDR      r0,[r4,#0]            ;721
0000e2  6800              LDR      r0,[r0,#0]            ;721
0000e4  f4405080          ORR      r0,r0,#0x1000         ;721
0000e8  6821              LDR      r1,[r4,#0]            ;721
0000ea  6008              STR      r0,[r1,#0]            ;721
                  |L18.236|
0000ec  464b              MOV      r3,r9                 ;725
0000ee  2200              MOVS     r2,#0                 ;725
0000f0  2101              MOVS     r1,#1                 ;725
0000f2  4620              MOV      r0,r4                 ;725
0000f4  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0000f8  b108              CBZ      r0,|L18.254|
0000fa  2003              MOVS     r0,#3                 ;727
0000fc  e797              B        |L18.46|
                  |L18.254|
0000fe  6820              LDR      r0,[r4,#0]            ;730
000100  68c0              LDR      r0,[r0,#0xc]          ;730
000102  6ba1              LDR      r1,[r4,#0x38]         ;730
000104  8008              STRH     r0,[r1,#0]            ;730
000106  6ba0              LDR      r0,[r4,#0x38]         ;731
000108  1c80              ADDS     r0,r0,#2              ;731
00010a  63a0              STR      r0,[r4,#0x38]         ;731
00010c  8fe0              LDRH     r0,[r4,#0x3e]         ;732
00010e  1e40              SUBS     r0,r0,#1              ;732
000110  87e0              STRH     r0,[r4,#0x3e]         ;732
                  |L18.274|
000112  e0c7              B        |L18.676|
                  |L18.276|
000114  e11b              B        |L18.846|
                  |L18.278|
000116  e031              B        |L18.380|
                  |L18.280|
000118  464b              MOV      r3,r9                 ;739
00011a  2200              MOVS     r2,#0                 ;739
00011c  2102              MOVS     r1,#2                 ;739
00011e  4620              MOV      r0,r4                 ;739
000120  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000124  b108              CBZ      r0,|L18.298|
000126  2003              MOVS     r0,#3                 ;741
000128  e781              B        |L18.46|
                  |L18.298|
00012a  6b20              LDR      r0,[r4,#0x30]         ;744
00012c  8800              LDRH     r0,[r0,#0]            ;744
00012e  6821              LDR      r1,[r4,#0]            ;744
000130  60c8              STR      r0,[r1,#0xc]          ;744
000132  6b20              LDR      r0,[r4,#0x30]         ;745
000134  1c80              ADDS     r0,r0,#2              ;745
000136  6320              STR      r0,[r4,#0x30]         ;745
000138  8ee0              LDRH     r0,[r4,#0x36]         ;746
00013a  1e40              SUBS     r0,r0,#1              ;746
00013c  86e0              STRH     r0,[r4,#0x36]         ;746
00013e  8ee0              LDRH     r0,[r4,#0x36]         ;749
000140  b948              CBNZ     r0,|L18.342|
000142  6aa0              LDR      r0,[r4,#0x28]         ;749
000144  f5b05f00          CMP      r0,#0x2000            ;749
000148  d105              BNE      |L18.342|
00014a  6820              LDR      r0,[r4,#0]            ;751
00014c  6800              LDR      r0,[r0,#0]            ;751
00014e  f4405080          ORR      r0,r0,#0x1000         ;751
000152  6821              LDR      r1,[r4,#0]            ;751
000154  6008              STR      r0,[r1,#0]            ;751
                  |L18.342|
000156  464b              MOV      r3,r9                 ;755
000158  2200              MOVS     r2,#0                 ;755
00015a  2101              MOVS     r1,#1                 ;755
00015c  4620              MOV      r0,r4                 ;755
00015e  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000162  b108              CBZ      r0,|L18.360|
000164  2003              MOVS     r0,#3                 ;757
000166  e762              B        |L18.46|
                  |L18.360|
000168  6820              LDR      r0,[r4,#0]            ;760
00016a  68c0              LDR      r0,[r0,#0xc]          ;760
00016c  6ba1              LDR      r1,[r4,#0x38]         ;760
00016e  8008              STRH     r0,[r1,#0]            ;760
000170  6ba0              LDR      r0,[r4,#0x38]         ;761
000172  1c80              ADDS     r0,r0,#2              ;761
000174  63a0              STR      r0,[r4,#0x38]         ;761
000176  8fe0              LDRH     r0,[r4,#0x3e]         ;762
000178  1e40              SUBS     r0,r0,#1              ;762
00017a  87e0              STRH     r0,[r4,#0x3e]         ;762
                  |L18.380|
00017c  8ee0              LDRH     r0,[r4,#0x36]         ;736
00017e  2800              CMP      r0,#0                 ;736
000180  dcca              BGT      |L18.280|
000182  6860              LDR      r0,[r4,#4]            ;765
000184  2800              CMP      r0,#0                 ;765
000186  d1c4              BNE      |L18.274|
000188  464b              MOV      r3,r9                 ;768
00018a  2200              MOVS     r2,#0                 ;768
00018c  2101              MOVS     r1,#1                 ;768
00018e  4620              MOV      r0,r4                 ;768
000190  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000194  b110              CBZ      r0,|L18.412|
000196  2003              MOVS     r0,#3                 ;770
000198  e749              B        |L18.46|
                  |L18.410|
00019a  e00a              B        |L18.434|
                  |L18.412|
00019c  6820              LDR      r0,[r4,#0]            ;773
00019e  68c0              LDR      r0,[r0,#0xc]          ;773
0001a0  6ba1              LDR      r1,[r4,#0x38]         ;773
0001a2  8008              STRH     r0,[r1,#0]            ;773
0001a4  6ba0              LDR      r0,[r4,#0x38]         ;774
0001a6  1c80              ADDS     r0,r0,#2              ;774
0001a8  63a0              STR      r0,[r4,#0x38]         ;774
0001aa  8fe0              LDRH     r0,[r4,#0x3e]         ;775
0001ac  1e40              SUBS     r0,r0,#1              ;775
0001ae  87e0              STRH     r0,[r4,#0x3e]         ;775
0001b0  e078              B        |L18.676|
                  |L18.434|
0001b2  6860              LDR      r0,[r4,#4]            ;782
0001b4  b130              CBZ      r0,|L18.452|
0001b6  6860              LDR      r0,[r4,#4]            ;782
0001b8  f5b07f82          CMP      r0,#0x104             ;782
0001bc  d10b              BNE      |L18.470|
0001be  8ee0              LDRH     r0,[r4,#0x36]         ;782
0001c0  2801              CMP      r0,#1                 ;782
0001c2  d108              BNE      |L18.470|
                  |L18.452|
0001c4  6b21              LDR      r1,[r4,#0x30]         ;784
0001c6  1c48              ADDS     r0,r1,#1              ;784
0001c8  6320              STR      r0,[r4,#0x30]         ;784
0001ca  7808              LDRB     r0,[r1,#0]            ;784
0001cc  6821              LDR      r1,[r4,#0]            ;784
0001ce  60c8              STR      r0,[r1,#0xc]          ;784
0001d0  8ee0              LDRH     r0,[r4,#0x36]         ;785
0001d2  1e40              SUBS     r0,r0,#1              ;785
0001d4  86e0              STRH     r0,[r4,#0x36]         ;785
                  |L18.470|
0001d6  8ee0              LDRH     r0,[r4,#0x36]         ;787
0001d8  b9d0              CBNZ     r0,|L18.528|
0001da  6aa0              LDR      r0,[r4,#0x28]         ;790
0001dc  f5b05f00          CMP      r0,#0x2000            ;790
0001e0  d105              BNE      |L18.494|
0001e2  6820              LDR      r0,[r4,#0]            ;792
0001e4  6800              LDR      r0,[r0,#0]            ;792
0001e6  f4405080          ORR      r0,r0,#0x1000         ;792
0001ea  6821              LDR      r1,[r4,#0]            ;792
0001ec  6008              STR      r0,[r1,#0]            ;792
                  |L18.494|
0001ee  464b              MOV      r3,r9                 ;796
0001f0  2200              MOVS     r2,#0                 ;796
0001f2  2101              MOVS     r1,#1                 ;796
0001f4  4620              MOV      r0,r4                 ;796
0001f6  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0001fa  b108              CBZ      r0,|L18.512|
0001fc  2003              MOVS     r0,#3                 ;798
0001fe  e716              B        |L18.46|
                  |L18.512|
000200  6820              LDR      r0,[r4,#0]            ;801
000202  68c0              LDR      r0,[r0,#0xc]          ;801
000204  6ba1              LDR      r1,[r4,#0x38]         ;801
000206  7008              STRB     r0,[r1,#0]            ;801
000208  8fe0              LDRH     r0,[r4,#0x3e]         ;802
00020a  1e40              SUBS     r0,r0,#1              ;802
00020c  87e0              STRH     r0,[r4,#0x3e]         ;802
00020e  e049              B        |L18.676|
                  |L18.528|
000210  e030              B        |L18.628|
                  |L18.530|
000212  464b              MOV      r3,r9                 ;809
000214  2200              MOVS     r2,#0                 ;809
000216  2102              MOVS     r1,#2                 ;809
000218  4620              MOV      r0,r4                 ;809
00021a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00021e  b108              CBZ      r0,|L18.548|
000220  2003              MOVS     r0,#3                 ;811
000222  e704              B        |L18.46|
                  |L18.548|
000224  6b21              LDR      r1,[r4,#0x30]         ;814
000226  1c48              ADDS     r0,r1,#1              ;814
000228  6320              STR      r0,[r4,#0x30]         ;814
00022a  7808              LDRB     r0,[r1,#0]            ;814
00022c  6821              LDR      r1,[r4,#0]            ;814
00022e  60c8              STR      r0,[r1,#0xc]          ;814
000230  8ee0              LDRH     r0,[r4,#0x36]         ;815
000232  1e40              SUBS     r0,r0,#1              ;815
000234  86e0              STRH     r0,[r4,#0x36]         ;815
000236  8ee0              LDRH     r0,[r4,#0x36]         ;818
000238  b948              CBNZ     r0,|L18.590|
00023a  6aa0              LDR      r0,[r4,#0x28]         ;818
00023c  f5b05f00          CMP      r0,#0x2000            ;818
000240  d105              BNE      |L18.590|
000242  6820              LDR      r0,[r4,#0]            ;820
000244  6800              LDR      r0,[r0,#0]            ;820
000246  f4405080          ORR      r0,r0,#0x1000         ;820
00024a  6821              LDR      r1,[r4,#0]            ;820
00024c  6008              STR      r0,[r1,#0]            ;820
                  |L18.590|
00024e  464b              MOV      r3,r9                 ;824
000250  2200              MOVS     r2,#0                 ;824
000252  2101              MOVS     r1,#1                 ;824
000254  4620              MOV      r0,r4                 ;824
000256  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00025a  b108              CBZ      r0,|L18.608|
00025c  2003              MOVS     r0,#3                 ;826
00025e  e6e6              B        |L18.46|
                  |L18.608|
000260  6820              LDR      r0,[r4,#0]            ;829
000262  68c0              LDR      r0,[r0,#0xc]          ;829
000264  b2c1              UXTB     r1,r0                 ;829
000266  6ba2              LDR      r2,[r4,#0x38]         ;829
000268  1c50              ADDS     r0,r2,#1              ;829
00026a  63a0              STR      r0,[r4,#0x38]         ;829
00026c  7011              STRB     r1,[r2,#0]            ;829
00026e  8fe0              LDRH     r0,[r4,#0x3e]         ;830
000270  1e40              SUBS     r0,r0,#1              ;830
000272  87e0              STRH     r0,[r4,#0x3e]         ;830
                  |L18.628|
000274  8ee0              LDRH     r0,[r4,#0x36]         ;806
000276  2800              CMP      r0,#0                 ;806
000278  dccb              BGT      |L18.530|
00027a  6860              LDR      r0,[r4,#4]            ;832
00027c  b990              CBNZ     r0,|L18.676|
00027e  464b              MOV      r3,r9                 ;835
000280  2200              MOVS     r2,#0                 ;835
000282  2101              MOVS     r1,#1                 ;835
000284  4620              MOV      r0,r4                 ;835
000286  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00028a  b108              CBZ      r0,|L18.656|
00028c  2003              MOVS     r0,#3                 ;837
00028e  e6ce              B        |L18.46|
                  |L18.656|
000290  6820              LDR      r0,[r4,#0]            ;840
000292  68c0              LDR      r0,[r0,#0xc]          ;840
000294  b2c1              UXTB     r1,r0                 ;840
000296  6ba2              LDR      r2,[r4,#0x38]         ;840
000298  1c50              ADDS     r0,r2,#1              ;840
00029a  63a0              STR      r0,[r4,#0x38]         ;840
00029c  7011              STRB     r1,[r2,#0]            ;840
00029e  8fe0              LDRH     r0,[r4,#0x3e]         ;841
0002a0  1e40              SUBS     r0,r0,#1              ;841
0002a2  87e0              STRH     r0,[r4,#0x3e]         ;841
                  |L18.676|
0002a4  6aa0              LDR      r0,[r4,#0x28]         ;847
0002a6  f5b05f00          CMP      r0,#0x2000            ;847
0002aa  d112              BNE      |L18.722|
0002ac  464b              MOV      r3,r9                 ;850
0002ae  2200              MOVS     r2,#0                 ;850
0002b0  2101              MOVS     r1,#1                 ;850
0002b2  4620              MOV      r0,r4                 ;850
0002b4  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0002b8  b128              CBZ      r0,|L18.710|
0002ba  6d60              LDR      r0,[r4,#0x54]         ;852
0002bc  f0400002          ORR      r0,r0,#2              ;852
0002c0  6560              STR      r0,[r4,#0x54]         ;852
0002c2  2003              MOVS     r0,#3                 ;853
0002c4  e6b3              B        |L18.46|
                  |L18.710|
0002c6  6820              LDR      r0,[r4,#0]            ;856
0002c8  68c0              LDR      r0,[r0,#0xc]          ;856
0002ca  b280              UXTH     r0,r0                 ;856
0002cc  9000              STR      r0,[sp,#0]            ;856
0002ce  f8bd0000          LDRH     r0,[sp,#0]            ;857
                  |L18.722|
0002d2  464b              MOV      r3,r9                 ;861
0002d4  2201              MOVS     r2,#1                 ;861
0002d6  2180              MOVS     r1,#0x80              ;861
0002d8  4620              MOV      r0,r4                 ;861
0002da  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
0002de  b128              CBZ      r0,|L18.748|
0002e0  6d60              LDR      r0,[r4,#0x54]         ;863
0002e2  f0400020          ORR      r0,r0,#0x20           ;863
0002e6  6560              STR      r0,[r4,#0x54]         ;863
0002e8  2003              MOVS     r0,#3                 ;864
0002ea  e6a0              B        |L18.46|
                  |L18.748|
0002ec  2001              MOVS     r0,#1                 ;867
0002ee  f8840051          STRB     r0,[r4,#0x51]         ;867
0002f2  6820              LDR      r0,[r4,#0]            ;869
0002f4  6880              LDR      r0,[r0,#8]            ;869
0002f6  f3c01a00          UBFX     r10,r0,#4,#1          ;869
0002fa  6aa0              LDR      r0,[r4,#0x28]         ;871
0002fc  f5b05f00          CMP      r0,#0x2000            ;871
000300  d11f              BNE      |L18.834|
000302  f1ba0f00          CMP      r10,#0                ;871
000306  d01c              BEQ      |L18.834|
000308  6d60              LDR      r0,[r4,#0x54]         ;873
00030a  f0400002          ORR      r0,r0,#2              ;873
00030e  6560              STR      r0,[r4,#0x54]         ;873
000310  6aa0              LDR      r0,[r4,#0x28]         ;876
000312  f5b05f00          CMP      r0,#0x2000            ;876
000316  d10d              BNE      |L18.820|
000318  bf00              NOP                            ;878
00031a  6820              LDR      r0,[r4,#0]            ;878
00031c  6800              LDR      r0,[r0,#0]            ;878
00031e  f4205000          BIC      r0,r0,#0x2000         ;878
000322  6821              LDR      r1,[r4,#0]            ;878
000324  6008              STR      r0,[r1,#0]            ;878
000326  6820              LDR      r0,[r4,#0]            ;878
000328  6800              LDR      r0,[r0,#0]            ;878
00032a  f4405000          ORR      r0,r0,#0x2000         ;878
00032e  6821              LDR      r1,[r4,#0]            ;878
000330  6008              STR      r0,[r1,#0]            ;878
000332  bf00              NOP                            ;878
                  |L18.820|
000334  bf00              NOP                            ;882
000336  2000              MOVS     r0,#0                 ;882
000338  f8840050          STRB     r0,[r4,#0x50]         ;882
00033c  bf00              NOP                            ;882
00033e  2001              MOVS     r0,#1                 ;884
000340  e675              B        |L18.46|
                  |L18.834|
000342  bf00              NOP                            ;888
000344  2000              MOVS     r0,#0                 ;888
000346  f8840050          STRB     r0,[r4,#0x50]         ;888
00034a  bf00              NOP                            ;888
00034c  e66f              B        |L18.46|
                  |L18.846|
00034e  2002              MOVS     r0,#2                 ;894
000350  e66d              B        |L18.46|
;;;897    
                          ENDP


                          AREA ||i.HAL_SPI_TransmitReceive_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SPI_TransmitReceive_DMA PROC
;;;1305     */
;;;1306   HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1307   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;1308     uint32_t tmpstate = 0;
00000c  f04f0800          MOV      r8,#0
;;;1309     tmpstate = hspi->State;
000010  f8948051          LDRB     r8,[r4,#0x51]
;;;1310     if((tmpstate == HAL_SPI_STATE_READY) || ((hspi->Init.Mode == SPI_MODE_MASTER) && \
000014  f1b80f01          CMP      r8,#1
000018  d009              BEQ      |L19.46|
00001a  6860              LDR      r0,[r4,#4]
00001c  f5b07f82          CMP      r0,#0x104
                  |L19.32|
000020  d17e              BNE      |L19.288|
;;;1311        (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmpstate == HAL_SPI_STATE_BUSY_RX)))
000022  68a0              LDR      r0,[r4,#8]
000024  2800              CMP      r0,#0
000026  d1fb              BNE      |L19.32|
000028  f1b80f22          CMP      r8,#0x22
00002c  d1f8              BNE      |L19.32|
                  |L19.46|
;;;1312     {
;;;1313       if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
00002e  b10e              CBZ      r6,|L19.52|
000030  b107              CBZ      r7,|L19.52|
000032  b915              CBNZ     r5,|L19.58|
                  |L19.52|
;;;1314       {
;;;1315         return  HAL_ERROR;
000034  2001              MOVS     r0,#1
                  |L19.54|
;;;1316       }
;;;1317   
;;;1318       /* Check the parameters */
;;;1319       assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;1320       
;;;1321       /* Process locked */
;;;1322       __HAL_LOCK(hspi);
;;;1323   
;;;1324       /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;1325       if(hspi->State != HAL_SPI_STATE_BUSY_RX)
;;;1326       {
;;;1327         hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;1328       }
;;;1329   
;;;1330       /* Configure communication */
;;;1331       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1332   
;;;1333       hspi->pTxBuffPtr  = (uint8_t*)pTxData;
;;;1334       hspi->TxXferSize  = Size;
;;;1335       hspi->TxXferCount = Size;
;;;1336   
;;;1337       hspi->pRxBuffPtr  = (uint8_t*)pRxData;
;;;1338       hspi->RxXferSize  = Size;
;;;1339       hspi->RxXferCount = Size;
;;;1340   
;;;1341       /*Init field not used in handle to zero */
;;;1342       hspi->RxISR = 0;
;;;1343       hspi->TxISR = 0;
;;;1344   
;;;1345       /* Reset CRC Calculation */
;;;1346       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1347       {
;;;1348         SPI_RESET_CRC(hspi);
;;;1349       }
;;;1350   
;;;1351       /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
;;;1352       if(hspi->State == HAL_SPI_STATE_BUSY_RX)
;;;1353       {
;;;1354         /* Set the SPI Rx DMA Half transfer complete callback */
;;;1355         hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
;;;1356         
;;;1357         hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
;;;1358       }
;;;1359       else
;;;1360       {
;;;1361         /* Set the SPI Tx/Rx DMA Half transfer complete callback */
;;;1362         hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
;;;1363     
;;;1364         hspi->hdmarx->XferCpltCallback = SPI_DMATransmitReceiveCplt;
;;;1365       }
;;;1366   
;;;1367       /* Set the DMA error callback */
;;;1368       hspi->hdmarx->XferErrorCallback = SPI_DMAError;
;;;1369   
;;;1370       /* Enable the Rx DMA Stream */
;;;1371       HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
;;;1372   
;;;1373       /* Enable Rx DMA Request */  
;;;1374       hspi->Instance->CR2 |= SPI_CR2_RXDMAEN;
;;;1375   
;;;1376       /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
;;;1377       is performed in DMA reception complete callback  */
;;;1378       hspi->hdmatx->XferCpltCallback = NULL;
;;;1379       
;;;1380       if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
;;;1381       {
;;;1382         /* Set the DMA error callback */
;;;1383         hspi->hdmatx->XferErrorCallback = SPI_DMAError;
;;;1384       }
;;;1385       else
;;;1386       {
;;;1387         hspi->hdmatx->XferErrorCallback = NULL;
;;;1388       }    
;;;1389       
;;;1390       /* Enable the Tx DMA Stream */
;;;1391       HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
;;;1392   
;;;1393       /* Process Unlocked */
;;;1394       __HAL_UNLOCK(hspi);
;;;1395   
;;;1396       /* Check if the SPI is already enabled */ 
;;;1397       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1398       {
;;;1399         /* Enable SPI peripheral */
;;;1400         __HAL_SPI_ENABLE(hspi);
;;;1401       }
;;;1402   
;;;1403       /* Enable Tx DMA Request */  
;;;1404       hspi->Instance->CR2 |= SPI_CR2_TXDMAEN;
;;;1405   
;;;1406       return HAL_OK;
;;;1407     }
;;;1408     else
;;;1409     {
;;;1410       return HAL_BUSY;
;;;1411     }
;;;1412   }
000036  e8bd81f0          POP      {r4-r8,pc}
                  |L19.58|
00003a  bf00              NOP                            ;1322
00003c  f8940050          LDRB     r0,[r4,#0x50]         ;1322
000040  2801              CMP      r0,#1                 ;1322
000042  d101              BNE      |L19.72|
000044  2002              MOVS     r0,#2                 ;1322
000046  e7f6              B        |L19.54|
                  |L19.72|
000048  2001              MOVS     r0,#1                 ;1322
00004a  f8840050          STRB     r0,[r4,#0x50]         ;1322
00004e  bf00              NOP                            ;1322
000050  f8940051          LDRB     r0,[r4,#0x51]         ;1325
000054  2822              CMP      r0,#0x22              ;1325
000056  d002              BEQ      |L19.94|
000058  2032              MOVS     r0,#0x32              ;1327
00005a  f8840051          STRB     r0,[r4,#0x51]         ;1327
                  |L19.94|
00005e  2000              MOVS     r0,#0                 ;1331
000060  6560              STR      r0,[r4,#0x54]         ;1331
000062  6326              STR      r6,[r4,#0x30]         ;1333
000064  86a5              STRH     r5,[r4,#0x34]         ;1334
000066  86e5              STRH     r5,[r4,#0x36]         ;1335
000068  63a7              STR      r7,[r4,#0x38]         ;1337
00006a  87a5              STRH     r5,[r4,#0x3c]         ;1338
00006c  87e5              STRH     r5,[r4,#0x3e]         ;1339
00006e  64a0              STR      r0,[r4,#0x48]         ;1342
000070  64e0              STR      r0,[r4,#0x4c]         ;1343
000072  6aa0              LDR      r0,[r4,#0x28]         ;1346
000074  f5b05f00          CMP      r0,#0x2000            ;1346
000078  d10d              BNE      |L19.150|
00007a  bf00              NOP                            ;1348
00007c  6820              LDR      r0,[r4,#0]            ;1348
00007e  6800              LDR      r0,[r0,#0]            ;1348
000080  f4205000          BIC      r0,r0,#0x2000         ;1348
000084  6821              LDR      r1,[r4,#0]            ;1348
000086  6008              STR      r0,[r1,#0]            ;1348
000088  6820              LDR      r0,[r4,#0]            ;1348
00008a  6800              LDR      r0,[r0,#0]            ;1348
00008c  f4405000          ORR      r0,r0,#0x2000         ;1348
000090  6821              LDR      r1,[r4,#0]            ;1348
000092  6008              STR      r0,[r1,#0]            ;1348
000094  bf00              NOP                            ;1348
                  |L19.150|
000096  f8940051          LDRB     r0,[r4,#0x51]         ;1352
00009a  2822              CMP      r0,#0x22              ;1352
00009c  d106              BNE      |L19.172|
00009e  4829              LDR      r0,|L19.324|
0000a0  6c61              LDR      r1,[r4,#0x44]         ;1355
0000a2  6408              STR      r0,[r1,#0x40]         ;1355
0000a4  4828              LDR      r0,|L19.328|
0000a6  6c61              LDR      r1,[r4,#0x44]         ;1357
0000a8  63c8              STR      r0,[r1,#0x3c]         ;1357
0000aa  e005              B        |L19.184|
                  |L19.172|
0000ac  4827              LDR      r0,|L19.332|
0000ae  6c61              LDR      r1,[r4,#0x44]         ;1362
0000b0  6408              STR      r0,[r1,#0x40]         ;1362
0000b2  4827              LDR      r0,|L19.336|
0000b4  6c61              LDR      r1,[r4,#0x44]         ;1364
0000b6  63c8              STR      r0,[r1,#0x3c]         ;1364
                  |L19.184|
0000b8  4826              LDR      r0,|L19.340|
0000ba  6c61              LDR      r1,[r4,#0x44]         ;1368
0000bc  6488              STR      r0,[r1,#0x48]         ;1368
0000be  8fe3              LDRH     r3,[r4,#0x3e]         ;1371
0000c0  f8d4c000          LDR      r12,[r4,#0]           ;1371
0000c4  f10c010c          ADD      r1,r12,#0xc           ;1371
0000c8  6ba2              LDR      r2,[r4,#0x38]         ;1371
0000ca  6c60              LDR      r0,[r4,#0x44]         ;1371
0000cc  f7fffffe          BL       HAL_DMA_Start_IT
0000d0  6820              LDR      r0,[r4,#0]            ;1374
0000d2  6840              LDR      r0,[r0,#4]            ;1374
0000d4  f0400001          ORR      r0,r0,#1              ;1374
0000d8  6821              LDR      r1,[r4,#0]            ;1374
0000da  6048              STR      r0,[r1,#4]            ;1374
0000dc  2000              MOVS     r0,#0                 ;1378
0000de  6c21              LDR      r1,[r4,#0x40]         ;1378
0000e0  63c8              STR      r0,[r1,#0x3c]         ;1378
0000e2  f8940051          LDRB     r0,[r4,#0x51]         ;1380
0000e6  2832              CMP      r0,#0x32              ;1380
0000e8  d103              BNE      |L19.242|
0000ea  481a              LDR      r0,|L19.340|
0000ec  6c21              LDR      r1,[r4,#0x40]         ;1383
0000ee  6488              STR      r0,[r1,#0x48]         ;1383
0000f0  e002              B        |L19.248|
                  |L19.242|
0000f2  2000              MOVS     r0,#0                 ;1387
0000f4  6c21              LDR      r1,[r4,#0x40]         ;1387
0000f6  6488              STR      r0,[r1,#0x48]         ;1387
                  |L19.248|
0000f8  8ee3              LDRH     r3,[r4,#0x36]         ;1391
0000fa  f8d4c000          LDR      r12,[r4,#0]           ;1391
0000fe  f10c020c          ADD      r2,r12,#0xc           ;1391
000102  6b21              LDR      r1,[r4,#0x30]         ;1391
000104  6c20              LDR      r0,[r4,#0x40]         ;1391
000106  f7fffffe          BL       HAL_DMA_Start_IT
00010a  bf00              NOP                            ;1394
00010c  2000              MOVS     r0,#0                 ;1394
00010e  f8840050          STRB     r0,[r4,#0x50]         ;1394
000112  bf00              NOP                            ;1394
000114  6820              LDR      r0,[r4,#0]            ;1397
000116  6800              LDR      r0,[r0,#0]            ;1397
000118  f0000040          AND      r0,r0,#0x40           ;1397
00011c  2840              CMP      r0,#0x40              ;1397
00011e  e000              B        |L19.290|
                  |L19.288|
000120  e00e              B        |L19.320|
                  |L19.290|
000122  d005              BEQ      |L19.304|
000124  6820              LDR      r0,[r4,#0]            ;1400
000126  6800              LDR      r0,[r0,#0]            ;1400
000128  f0400040          ORR      r0,r0,#0x40           ;1400
00012c  6821              LDR      r1,[r4,#0]            ;1400
00012e  6008              STR      r0,[r1,#0]            ;1400
                  |L19.304|
000130  6820              LDR      r0,[r4,#0]            ;1404
000132  6840              LDR      r0,[r0,#4]            ;1404
000134  f0400002          ORR      r0,r0,#2              ;1404
000138  6821              LDR      r1,[r4,#0]            ;1404
00013a  6048              STR      r0,[r1,#4]            ;1404
00013c  2000              MOVS     r0,#0                 ;1406
00013e  e77a              B        |L19.54|
                  |L19.320|
000140  2002              MOVS     r0,#2                 ;1410
000142  e778              B        |L19.54|
;;;1413   
                          ENDP

                  |L19.324|
                          DCD      SPI_DMAHalfReceiveCplt
                  |L19.328|
                          DCD      SPI_DMAReceiveCplt
                  |L19.332|
                          DCD      SPI_DMAHalfTransmitReceiveCplt
                  |L19.336|
                          DCD      SPI_DMATransmitReceiveCplt
                  |L19.340|
                          DCD      SPI_DMAError

                          AREA ||i.HAL_SPI_TransmitReceive_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_TransmitReceive_IT PROC
;;;1060     */
;;;1061   HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
000000  b570              PUSH     {r4-r6,lr}
;;;1062   {
000002  4604              MOV      r4,r0
;;;1063    uint32_t tmpstate = 0;
000004  2500              MOVS     r5,#0
;;;1064   
;;;1065    tmpstate = hspi->State;
000006  f8945051          LDRB     r5,[r4,#0x51]
;;;1066     if((tmpstate == HAL_SPI_STATE_READY) || \
00000a  2d01              CMP      r5,#1
00000c  d008              BEQ      |L20.32|
;;;1067        ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmpstate == HAL_SPI_STATE_BUSY_RX)))
00000e  6860              LDR      r0,[r4,#4]
000010  f5b07f82          CMP      r0,#0x104
000014  d152              BNE      |L20.188|
000016  68a0              LDR      r0,[r4,#8]
000018  2800              CMP      r0,#0
00001a  d14f              BNE      |L20.188|
00001c  2d22              CMP      r5,#0x22
00001e  d14d              BNE      |L20.188|
                  |L20.32|
;;;1068     {
;;;1069       if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0)) 
000020  b109              CBZ      r1,|L20.38|
000022  b102              CBZ      r2,|L20.38|
000024  b90b              CBNZ     r3,|L20.42|
                  |L20.38|
;;;1070       {
;;;1071         return  HAL_ERROR;
000026  2001              MOVS     r0,#1
                  |L20.40|
;;;1072       }
;;;1073   
;;;1074       /* Check the parameters */
;;;1075       assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
;;;1076   
;;;1077       /* Process locked */
;;;1078       __HAL_LOCK(hspi);
;;;1079   
;;;1080       /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
;;;1081       if(hspi->State != HAL_SPI_STATE_BUSY_RX)
;;;1082       {
;;;1083         hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
;;;1084       }
;;;1085   
;;;1086       /* Configure communication */
;;;1087       hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
;;;1088   
;;;1089       hspi->TxISR = &SPI_TxISR;
;;;1090       hspi->pTxBuffPtr   = pTxData;
;;;1091       hspi->TxXferSize   = Size;
;;;1092       hspi->TxXferCount  = Size;
;;;1093   
;;;1094       hspi->RxISR = &SPI_2LinesRxISR;
;;;1095       hspi->pRxBuffPtr   = pRxData;
;;;1096       hspi->RxXferSize   = Size;
;;;1097       hspi->RxXferCount  = Size;
;;;1098   
;;;1099       /* Reset CRC Calculation */
;;;1100       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1101       {
;;;1102         SPI_RESET_CRC(hspi);
;;;1103       }
;;;1104   
;;;1105       /* Enable TXE, RXNE and ERR interrupt */
;;;1106       __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;1107   
;;;1108       /* Process Unlocked */
;;;1109       __HAL_UNLOCK(hspi);
;;;1110   
;;;1111       /* Check if the SPI is already enabled */ 
;;;1112       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1113       {
;;;1114         /* Enable SPI peripheral */
;;;1115         __HAL_SPI_ENABLE(hspi);
;;;1116       }
;;;1117   
;;;1118       return HAL_OK;
;;;1119     }
;;;1120     else
;;;1121     {
;;;1122       return HAL_BUSY; 
;;;1123     }
;;;1124   }
000028  bd70              POP      {r4-r6,pc}
                  |L20.42|
00002a  bf00              NOP                            ;1078
00002c  f8940050          LDRB     r0,[r4,#0x50]         ;1078
000030  2801              CMP      r0,#1                 ;1078
000032  d101              BNE      |L20.56|
000034  2002              MOVS     r0,#2                 ;1078
000036  e7f7              B        |L20.40|
                  |L20.56|
000038  2001              MOVS     r0,#1                 ;1078
00003a  f8840050          STRB     r0,[r4,#0x50]         ;1078
00003e  bf00              NOP                            ;1078
000040  f8940051          LDRB     r0,[r4,#0x51]         ;1081
000044  2822              CMP      r0,#0x22              ;1081
000046  d002              BEQ      |L20.78|
000048  2032              MOVS     r0,#0x32              ;1083
00004a  f8840051          STRB     r0,[r4,#0x51]         ;1083
                  |L20.78|
00004e  2000              MOVS     r0,#0                 ;1087
000050  6560              STR      r0,[r4,#0x54]         ;1087
000052  481b              LDR      r0,|L20.192|
000054  64e0              STR      r0,[r4,#0x4c]         ;1089
000056  6321              STR      r1,[r4,#0x30]         ;1090
000058  86a3              STRH     r3,[r4,#0x34]         ;1091
00005a  86e3              STRH     r3,[r4,#0x36]         ;1092
00005c  4819              LDR      r0,|L20.196|
00005e  64a0              STR      r0,[r4,#0x48]         ;1094
000060  63a2              STR      r2,[r4,#0x38]         ;1095
000062  87a3              STRH     r3,[r4,#0x3c]         ;1096
000064  87e3              STRH     r3,[r4,#0x3e]         ;1097
000066  6aa0              LDR      r0,[r4,#0x28]         ;1100
000068  f5b05f00          CMP      r0,#0x2000            ;1100
00006c  d10d              BNE      |L20.138|
00006e  bf00              NOP                            ;1102
000070  6820              LDR      r0,[r4,#0]            ;1102
000072  6800              LDR      r0,[r0,#0]            ;1102
000074  f4205000          BIC      r0,r0,#0x2000         ;1102
000078  6826              LDR      r6,[r4,#0]            ;1102
00007a  6030              STR      r0,[r6,#0]            ;1102
00007c  6820              LDR      r0,[r4,#0]            ;1102
00007e  6800              LDR      r0,[r0,#0]            ;1102
000080  f4405000          ORR      r0,r0,#0x2000         ;1102
000084  6826              LDR      r6,[r4,#0]            ;1102
000086  6030              STR      r0,[r6,#0]            ;1102
000088  bf00              NOP                            ;1102
                  |L20.138|
00008a  6820              LDR      r0,[r4,#0]            ;1106
00008c  6840              LDR      r0,[r0,#4]            ;1106
00008e  f04000e0          ORR      r0,r0,#0xe0           ;1106
000092  6826              LDR      r6,[r4,#0]            ;1106
000094  6070              STR      r0,[r6,#4]            ;1106
000096  bf00              NOP                            ;1109
000098  2000              MOVS     r0,#0                 ;1109
00009a  f8840050          STRB     r0,[r4,#0x50]         ;1109
00009e  bf00              NOP                            ;1109
0000a0  6820              LDR      r0,[r4,#0]            ;1112
0000a2  6800              LDR      r0,[r0,#0]            ;1112
0000a4  f0000040          AND      r0,r0,#0x40           ;1112
0000a8  2840              CMP      r0,#0x40              ;1112
0000aa  d005              BEQ      |L20.184|
0000ac  6820              LDR      r0,[r4,#0]            ;1115
0000ae  6800              LDR      r0,[r0,#0]            ;1115
0000b0  f0400040          ORR      r0,r0,#0x40           ;1115
0000b4  6826              LDR      r6,[r4,#0]            ;1115
0000b6  6030              STR      r0,[r6,#0]            ;1115
                  |L20.184|
0000b8  2000              MOVS     r0,#0                 ;1118
0000ba  e7b5              B        |L20.40|
                  |L20.188|
0000bc  2002              MOVS     r0,#2                 ;1122
0000be  e7b3              B        |L20.40|
;;;1125   
                          ENDP

                  |L20.192|
                          DCD      SPI_TxISR
                  |L20.196|
                          DCD      SPI_2LinesRxISR

                          AREA ||i.HAL_SPI_Transmit_DMA||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Transmit_DMA PROC
;;;1133     */
;;;1134   HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1135   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;1136     if(hspi->State == HAL_SPI_STATE_READY)
00000a  f8940051          LDRB     r0,[r4,#0x51]
00000e  2801              CMP      r0,#1
000010  d161              BNE      |L21.214|
;;;1137     {
;;;1138       if((pData == NULL) || (Size == 0))
000012  b106              CBZ      r6,|L21.22|
000014  b915              CBNZ     r5,|L21.28|
                  |L21.22|
;;;1139       {
;;;1140         return  HAL_ERROR;
000016  2001              MOVS     r0,#1
                  |L21.24|
;;;1141       }
;;;1142   
;;;1143       /* Check the parameters */
;;;1144       assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;1145   
;;;1146       /* Process Locked */
;;;1147       __HAL_LOCK(hspi);
;;;1148   
;;;1149       /* Configure communication */
;;;1150       hspi->State       = HAL_SPI_STATE_BUSY_TX;
;;;1151       hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
;;;1152   
;;;1153       hspi->pTxBuffPtr  = pData;
;;;1154       hspi->TxXferSize  = Size;
;;;1155       hspi->TxXferCount = Size;
;;;1156   
;;;1157       /*Init field not used in handle to zero */
;;;1158       hspi->TxISR = 0;
;;;1159       hspi->RxISR = 0;
;;;1160       hspi->RxXferSize   = 0;
;;;1161       hspi->RxXferCount  = 0;
;;;1162   
;;;1163       /* Configure communication direction : 1Line */
;;;1164       if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;1165       {
;;;1166         SPI_1LINE_TX(hspi);
;;;1167       }
;;;1168   
;;;1169       /* Reset CRC Calculation */
;;;1170       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;1171       {
;;;1172         SPI_RESET_CRC(hspi);
;;;1173       }
;;;1174   
;;;1175       /* Set the SPI TxDMA Half transfer complete callback */
;;;1176       hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
;;;1177       
;;;1178       /* Set the SPI TxDMA transfer complete callback */
;;;1179       hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
;;;1180   
;;;1181       /* Set the DMA error callback */
;;;1182       hspi->hdmatx->XferErrorCallback = SPI_DMAError;
;;;1183   
;;;1184       /* Enable the Tx DMA Stream */
;;;1185       HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
;;;1186   
;;;1187       /* Process Unlocked */
;;;1188       __HAL_UNLOCK(hspi);
;;;1189   
;;;1190       /* Check if the SPI is already enabled */ 
;;;1191       if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;1192       {
;;;1193         /* Enable SPI peripheral */
;;;1194         __HAL_SPI_ENABLE(hspi);
;;;1195       }
;;;1196   
;;;1197       /* Enable Tx DMA Request */
;;;1198       hspi->Instance->CR2 |= SPI_CR2_TXDMAEN;
;;;1199   
;;;1200       return HAL_OK;
;;;1201     }
;;;1202     else
;;;1203     {
;;;1204       return HAL_BUSY;
;;;1205     }
;;;1206   }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L21.28|
00001c  bf00              NOP                            ;1147
00001e  f8940050          LDRB     r0,[r4,#0x50]         ;1147
000022  2801              CMP      r0,#1                 ;1147
000024  d101              BNE      |L21.42|
000026  2002              MOVS     r0,#2                 ;1147
000028  e7f6              B        |L21.24|
                  |L21.42|
00002a  2001              MOVS     r0,#1                 ;1147
00002c  f8840050          STRB     r0,[r4,#0x50]         ;1147
000030  bf00              NOP                            ;1147
000032  2012              MOVS     r0,#0x12              ;1150
000034  f8840051          STRB     r0,[r4,#0x51]         ;1150
000038  2000              MOVS     r0,#0                 ;1151
00003a  6560              STR      r0,[r4,#0x54]         ;1151
00003c  6326              STR      r6,[r4,#0x30]         ;1153
00003e  86a5              STRH     r5,[r4,#0x34]         ;1154
000040  86e5              STRH     r5,[r4,#0x36]         ;1155
000042  64e0              STR      r0,[r4,#0x4c]         ;1158
000044  64a0              STR      r0,[r4,#0x48]         ;1159
000046  87a0              STRH     r0,[r4,#0x3c]         ;1160
000048  87e0              STRH     r0,[r4,#0x3e]         ;1161
00004a  68a0              LDR      r0,[r4,#8]            ;1164
00004c  f5b04f00          CMP      r0,#0x8000            ;1164
000050  d105              BNE      |L21.94|
000052  6820              LDR      r0,[r4,#0]            ;1166
000054  6800              LDR      r0,[r0,#0]            ;1166
000056  f4404080          ORR      r0,r0,#0x4000         ;1166
00005a  6821              LDR      r1,[r4,#0]            ;1166
00005c  6008              STR      r0,[r1,#0]            ;1166
                  |L21.94|
00005e  6aa0              LDR      r0,[r4,#0x28]         ;1170
000060  f5b05f00          CMP      r0,#0x2000            ;1170
000064  d10d              BNE      |L21.130|
000066  bf00              NOP                            ;1172
000068  6820              LDR      r0,[r4,#0]            ;1172
00006a  6800              LDR      r0,[r0,#0]            ;1172
00006c  f4205000          BIC      r0,r0,#0x2000         ;1172
000070  6821              LDR      r1,[r4,#0]            ;1172
000072  6008              STR      r0,[r1,#0]            ;1172
000074  6820              LDR      r0,[r4,#0]            ;1172
000076  6800              LDR      r0,[r0,#0]            ;1172
000078  f4405000          ORR      r0,r0,#0x2000         ;1172
00007c  6821              LDR      r1,[r4,#0]            ;1172
00007e  6008              STR      r0,[r1,#0]            ;1172
000080  bf00              NOP                            ;1172
                  |L21.130|
000082  4816              LDR      r0,|L21.220|
000084  6c21              LDR      r1,[r4,#0x40]         ;1176
000086  6408              STR      r0,[r1,#0x40]         ;1176
000088  4815              LDR      r0,|L21.224|
00008a  6c21              LDR      r1,[r4,#0x40]         ;1179
00008c  63c8              STR      r0,[r1,#0x3c]         ;1179
00008e  4815              LDR      r0,|L21.228|
000090  6c21              LDR      r1,[r4,#0x40]         ;1182
000092  6488              STR      r0,[r1,#0x48]         ;1182
000094  8ee3              LDRH     r3,[r4,#0x36]         ;1185
000096  6827              LDR      r7,[r4,#0]            ;1185
000098  f107020c          ADD      r2,r7,#0xc            ;1185
00009c  6b21              LDR      r1,[r4,#0x30]         ;1185
00009e  6c20              LDR      r0,[r4,#0x40]         ;1185
0000a0  f7fffffe          BL       HAL_DMA_Start_IT
0000a4  bf00              NOP                            ;1188
0000a6  2000              MOVS     r0,#0                 ;1188
0000a8  f8840050          STRB     r0,[r4,#0x50]         ;1188
0000ac  bf00              NOP                            ;1188
0000ae  6820              LDR      r0,[r4,#0]            ;1191
0000b0  6800              LDR      r0,[r0,#0]            ;1191
0000b2  f0000040          AND      r0,r0,#0x40           ;1191
0000b6  2840              CMP      r0,#0x40              ;1191
0000b8  d005              BEQ      |L21.198|
0000ba  6820              LDR      r0,[r4,#0]            ;1194
0000bc  6800              LDR      r0,[r0,#0]            ;1194
0000be  f0400040          ORR      r0,r0,#0x40           ;1194
0000c2  6821              LDR      r1,[r4,#0]            ;1194
0000c4  6008              STR      r0,[r1,#0]            ;1194
                  |L21.198|
0000c6  6820              LDR      r0,[r4,#0]            ;1198
0000c8  6840              LDR      r0,[r0,#4]            ;1198
0000ca  f0400002          ORR      r0,r0,#2              ;1198
0000ce  6821              LDR      r1,[r4,#0]            ;1198
0000d0  6048              STR      r0,[r1,#4]            ;1198
0000d2  2000              MOVS     r0,#0                 ;1200
0000d4  e7a0              B        |L21.24|
                  |L21.214|
0000d6  2002              MOVS     r0,#2                 ;1204
0000d8  e79e              B        |L21.24|
;;;1207   
                          ENDP

0000da  0000              DCW      0x0000
                  |L21.220|
                          DCD      SPI_DMAHalfTransmitCplt
                  |L21.224|
                          DCD      SPI_DMATransmitCplt
                  |L21.228|
                          DCD      SPI_DMAError

                          AREA ||i.HAL_SPI_Transmit_IT||, CODE, READONLY, ALIGN=2

                  HAL_SPI_Transmit_IT PROC
;;;905      */
;;;906    HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
000000  b510              PUSH     {r4,lr}
;;;907    {
000002  4603              MOV      r3,r0
;;;908      if(hspi->State == HAL_SPI_STATE_READY)
000004  f8930051          LDRB     r0,[r3,#0x51]
000008  2801              CMP      r0,#1
00000a  d15a              BNE      |L22.194|
;;;909      {
;;;910        if((pData == NULL) || (Size == 0))
00000c  b101              CBZ      r1,|L22.16|
00000e  b90a              CBNZ     r2,|L22.20|
                  |L22.16|
;;;911        {
;;;912          return  HAL_ERROR;
000010  2001              MOVS     r0,#1
                  |L22.18|
;;;913        }
;;;914    
;;;915        /* Check the parameters */
;;;916        assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
;;;917    
;;;918        /* Process Locked */
;;;919        __HAL_LOCK(hspi);
;;;920    
;;;921        /* Configure communication */
;;;922        hspi->State        = HAL_SPI_STATE_BUSY_TX;
;;;923        hspi->ErrorCode    = HAL_SPI_ERROR_NONE;
;;;924    
;;;925        hspi->TxISR = &SPI_TxISR;
;;;926        hspi->pTxBuffPtr   = pData;
;;;927        hspi->TxXferSize   = Size;
;;;928        hspi->TxXferCount  = Size;
;;;929    
;;;930        /*Init field not used in handle to zero */
;;;931        hspi->RxISR = 0;
;;;932        hspi->RxXferSize   = 0;
;;;933        hspi->RxXferCount  = 0;
;;;934    
;;;935        /* Configure communication direction : 1Line */
;;;936        if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
;;;937        {
;;;938          SPI_1LINE_TX(hspi);
;;;939        }
;;;940    
;;;941        /* Reset CRC Calculation */
;;;942        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;943        {
;;;944          SPI_RESET_CRC(hspi);
;;;945        }
;;;946    
;;;947        if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
;;;948        {
;;;949          __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE));
;;;950        }else
;;;951        {
;;;952          /* Enable TXE and ERR interrupt */
;;;953          __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
;;;954        }
;;;955        /* Process Unlocked */
;;;956        __HAL_UNLOCK(hspi);
;;;957    
;;;958        /* Check if the SPI is already enabled */ 
;;;959        if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
;;;960        {
;;;961          /* Enable SPI peripheral */
;;;962          __HAL_SPI_ENABLE(hspi);
;;;963        }
;;;964    
;;;965        return HAL_OK;
;;;966      }
;;;967      else
;;;968      {
;;;969        return HAL_BUSY;
;;;970      }
;;;971    }
000012  bd10              POP      {r4,pc}
                  |L22.20|
000014  bf00              NOP                            ;919
000016  f8930050          LDRB     r0,[r3,#0x50]         ;919
00001a  2801              CMP      r0,#1                 ;919
00001c  d101              BNE      |L22.34|
00001e  2002              MOVS     r0,#2                 ;919
000020  e7f7              B        |L22.18|
                  |L22.34|
000022  2001              MOVS     r0,#1                 ;919
000024  f8830050          STRB     r0,[r3,#0x50]         ;919
000028  bf00              NOP                            ;919
00002a  2012              MOVS     r0,#0x12              ;922
00002c  f8830051          STRB     r0,[r3,#0x51]         ;922
000030  2000              MOVS     r0,#0                 ;923
000032  6558              STR      r0,[r3,#0x54]         ;923
000034  4824              LDR      r0,|L22.200|
000036  64d8              STR      r0,[r3,#0x4c]         ;925
000038  6319              STR      r1,[r3,#0x30]         ;926
00003a  869a              STRH     r2,[r3,#0x34]         ;927
00003c  86da              STRH     r2,[r3,#0x36]         ;928
00003e  2000              MOVS     r0,#0                 ;931
000040  6498              STR      r0,[r3,#0x48]         ;931
000042  8798              STRH     r0,[r3,#0x3c]         ;932
000044  87d8              STRH     r0,[r3,#0x3e]         ;933
000046  6898              LDR      r0,[r3,#8]            ;936
000048  f5b04f00          CMP      r0,#0x8000            ;936
00004c  d105              BNE      |L22.90|
00004e  6818              LDR      r0,[r3,#0]            ;938
000050  6800              LDR      r0,[r0,#0]            ;938
000052  f4404080          ORR      r0,r0,#0x4000         ;938
000056  681c              LDR      r4,[r3,#0]            ;938
000058  6020              STR      r0,[r4,#0]            ;938
                  |L22.90|
00005a  6a98              LDR      r0,[r3,#0x28]         ;942
00005c  f5b05f00          CMP      r0,#0x2000            ;942
000060  d10d              BNE      |L22.126|
000062  bf00              NOP                            ;944
000064  6818              LDR      r0,[r3,#0]            ;944
000066  6800              LDR      r0,[r0,#0]            ;944
000068  f4205000          BIC      r0,r0,#0x2000         ;944
00006c  681c              LDR      r4,[r3,#0]            ;944
00006e  6020              STR      r0,[r4,#0]            ;944
000070  6818              LDR      r0,[r3,#0]            ;944
000072  6800              LDR      r0,[r0,#0]            ;944
000074  f4405000          ORR      r0,r0,#0x2000         ;944
000078  681c              LDR      r4,[r3,#0]            ;944
00007a  6020              STR      r0,[r4,#0]            ;944
00007c  bf00              NOP                            ;944
                  |L22.126|
00007e  6898              LDR      r0,[r3,#8]            ;947
000080  b930              CBNZ     r0,|L22.144|
000082  6818              LDR      r0,[r3,#0]            ;949
000084  6840              LDR      r0,[r0,#4]            ;949
000086  f0400080          ORR      r0,r0,#0x80           ;949
00008a  681c              LDR      r4,[r3,#0]            ;949
00008c  6060              STR      r0,[r4,#4]            ;949
00008e  e005              B        |L22.156|
                  |L22.144|
000090  6818              LDR      r0,[r3,#0]            ;953
000092  6840              LDR      r0,[r0,#4]            ;953
000094  f04000a0          ORR      r0,r0,#0xa0           ;953
000098  681c              LDR      r4,[r3,#0]            ;953
00009a  6060              STR      r0,[r4,#4]            ;953
                  |L22.156|
00009c  bf00              NOP                            ;956
00009e  2000              MOVS     r0,#0                 ;956
0000a0  f8830050          STRB     r0,[r3,#0x50]         ;956
0000a4  bf00              NOP                            ;956
0000a6  6818              LDR      r0,[r3,#0]            ;959
0000a8  6800              LDR      r0,[r0,#0]            ;959
0000aa  f0000040          AND      r0,r0,#0x40           ;959
0000ae  2840              CMP      r0,#0x40              ;959
0000b0  d005              BEQ      |L22.190|
0000b2  6818              LDR      r0,[r3,#0]            ;962
0000b4  6800              LDR      r0,[r0,#0]            ;962
0000b6  f0400040          ORR      r0,r0,#0x40           ;962
0000ba  681c              LDR      r4,[r3,#0]            ;962
0000bc  6020              STR      r0,[r4,#0]            ;962
                  |L22.190|
0000be  2000              MOVS     r0,#0                 ;965
0000c0  e7a7              B        |L22.18|
                  |L22.194|
0000c2  2002              MOVS     r0,#2                 ;969
0000c4  e7a5              B        |L22.18|
;;;972    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L22.200|
                          DCD      SPI_TxISR

                          AREA ||i.HAL_SPI_TxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxCpltCallback PROC
;;;1565     */
;;;1566   __weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1567   {
;;;1568     /* Prevent unused argument(s) compilation warning */
;;;1569     UNUSED(hspi);
;;;1570     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1571               the HAL_SPI_TxCpltCallback could be implemented in the user file
;;;1572      */
;;;1573   }
;;;1574   
                          ENDP


                          AREA ||i.HAL_SPI_TxHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxHalfCpltCallback PROC
;;;1610     */
;;;1611   __weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1612   {
;;;1613     /* Prevent unused argument(s) compilation warning */
;;;1614     UNUSED(hspi);
;;;1615     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1616               the HAL_SPI_TxHalfCpltCallback could be implemented in the user file
;;;1617      */
;;;1618   }
;;;1619   
                          ENDP


                          AREA ||i.HAL_SPI_TxRxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxRxCpltCallback PROC
;;;1595     */
;;;1596   __weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1597   {
;;;1598     /* Prevent unused argument(s) compilation warning */
;;;1599     UNUSED(hspi);
;;;1600     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1601               the HAL_SPI_TxRxCpltCallback() could be implemented in the user file
;;;1602      */
;;;1603   }
;;;1604   
                          ENDP


                          AREA ||i.HAL_SPI_TxRxHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_SPI_TxRxHalfCpltCallback PROC
;;;1640     */
;;;1641   __weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
000000  4770              BX       lr
;;;1642   {
;;;1643     /* Prevent unused argument(s) compilation warning */
;;;1644     UNUSED(hspi);
;;;1645     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1646               the HAL_SPI_TxRxHalfCpltCallback() could be implemented in the user file
;;;1647      */
;;;1648   }
;;;1649   
                          ENDP


                          AREA ||i.SPI_2LinesRxISR||, CODE, READONLY, ALIGN=1

                  SPI_2LinesRxISR PROC
;;;1890     */
;;;1891   static void SPI_2LinesRxISR(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;1892   {
000002  4604              MOV      r4,r0
;;;1893     /* Receive data in 8 Bit mode */
;;;1894     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
000004  68e0              LDR      r0,[r4,#0xc]
000006  b938              CBNZ     r0,|L27.24|
;;;1895     {
;;;1896       (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
000008  6820              LDR      r0,[r4,#0]
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  b2c1              UXTB     r1,r0
00000e  6ba2              LDR      r2,[r4,#0x38]
000010  1c50              ADDS     r0,r2,#1
000012  63a0              STR      r0,[r4,#0x38]
000014  7011              STRB     r1,[r2,#0]
000016  e006              B        |L27.38|
                  |L27.24|
;;;1897     }
;;;1898     /* Receive data in 16 Bit mode */
;;;1899     else
;;;1900     {
;;;1901       *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
000018  6820              LDR      r0,[r4,#0]
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  6ba1              LDR      r1,[r4,#0x38]
00001e  8008              STRH     r0,[r1,#0]
;;;1902       hspi->pRxBuffPtr+=2;
000020  6ba0              LDR      r0,[r4,#0x38]
000022  1c80              ADDS     r0,r0,#2
000024  63a0              STR      r0,[r4,#0x38]
                  |L27.38|
;;;1903     }
;;;1904     hspi->RxXferCount--;
000026  8fe0              LDRH     r0,[r4,#0x3e]
000028  1e40              SUBS     r0,r0,#1
00002a  87e0              STRH     r0,[r4,#0x3e]
;;;1905   
;;;1906     if(hspi->RxXferCount==0)
00002c  8fe0              LDRH     r0,[r4,#0x3e]
00002e  b910              CBNZ     r0,|L27.54|
;;;1907     {
;;;1908       SPI_RxCloseIRQHandler(hspi);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       SPI_RxCloseIRQHandler
                  |L27.54|
;;;1909     }
;;;1910   }
000036  bd10              POP      {r4,pc}
;;;1911   
                          ENDP


                          AREA ||i.SPI_DMAEndTransmitReceive||, CODE, READONLY, ALIGN=1

                  SPI_DMAEndTransmitReceive PROC
;;;2078     */
;;;2079   static void SPI_DMAEndTransmitReceive(SPI_HandleTypeDef *hspi)   
000000  b538              PUSH     {r3-r5,lr}
;;;2080   {
000002  4604              MOV      r4,r0
;;;2081     __IO uint16_t tmpreg;
;;;2082     
;;;2083     /* Reset CRC Calculation */
;;;2084     if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000004  6aa0              LDR      r0,[r4,#0x28]
000006  f5b05f00          CMP      r0,#0x2000
00000a  d124              BNE      |L28.86|
;;;2085     {
;;;2086       /* Check if CRC is done on going (RXNE flag set) */
;;;2087       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) == HAL_OK)
00000c  230a              MOVS     r3,#0xa
00000e  2201              MOVS     r2,#1
000010  4611              MOV      r1,r2
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000018  b950              CBNZ     r0,|L28.48|
;;;2088       {
;;;2089         /* Wait until RXNE flag is set to send data */
;;;2090         if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
00001a  230a              MOVS     r3,#0xa
00001c  2200              MOVS     r2,#0
00001e  2101              MOVS     r1,#1
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000026  b118              CBZ      r0,|L28.48|
;;;2091         {
;;;2092           hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000028  6d60              LDR      r0,[r4,#0x54]
00002a  f0400020          ORR      r0,r0,#0x20
00002e  6560              STR      r0,[r4,#0x54]
                  |L28.48|
;;;2093         }
;;;2094       }
;;;2095       /* Read CRC */
;;;2096       tmpreg = hspi->Instance->DR;
000030  6820              LDR      r0,[r4,#0]
000032  68c0              LDR      r0,[r0,#0xc]
000034  b280              UXTH     r0,r0
000036  9000              STR      r0,[sp,#0]
;;;2097       UNUSED(tmpreg);
000038  f8bd0000          LDRH     r0,[sp,#0]
;;;2098       
;;;2099       /* Check if CRC error occurred */
;;;2100       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
00003c  6820              LDR      r0,[r4,#0]
00003e  6880              LDR      r0,[r0,#8]
000040  f3c01000          UBFX     r0,r0,#4,#1
000044  b138              CBZ      r0,|L28.86|
;;;2101       {
;;;2102         hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
000046  6d60              LDR      r0,[r4,#0x54]
000048  f0400002          ORR      r0,r0,#2
00004c  6560              STR      r0,[r4,#0x54]
;;;2103         __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
00004e  f06f0010          MVN      r0,#0x10
000052  6821              LDR      r1,[r4,#0]
000054  6088              STR      r0,[r1,#8]
                  |L28.86|
;;;2104       }
;;;2105     }
;;;2106     
;;;2107     /* Wait until TXE flag is set to send data */
;;;2108     if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000056  230a              MOVS     r3,#0xa
000058  2200              MOVS     r2,#0
00005a  2102              MOVS     r1,#2
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000062  b118              CBZ      r0,|L28.108|
;;;2109     {
;;;2110       hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000064  6d60              LDR      r0,[r4,#0x54]
000066  f0400020          ORR      r0,r0,#0x20
00006a  6560              STR      r0,[r4,#0x54]
                  |L28.108|
;;;2111     }
;;;2112     /* Disable Tx DMA Request */
;;;2113     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_TXDMAEN);
00006c  6820              LDR      r0,[r4,#0]
00006e  6840              LDR      r0,[r0,#4]
000070  f0200002          BIC      r0,r0,#2
000074  6821              LDR      r1,[r4,#0]
000076  6048              STR      r0,[r1,#4]
;;;2114     
;;;2115     /* Wait until Busy flag is reset before disabling SPI */
;;;2116     if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000078  230a              MOVS     r3,#0xa
00007a  2201              MOVS     r2,#1
00007c  2180              MOVS     r1,#0x80
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000084  b118              CBZ      r0,|L28.142|
;;;2117     {
;;;2118       hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000086  6d60              LDR      r0,[r4,#0x54]
000088  f0400020          ORR      r0,r0,#0x20
00008c  6560              STR      r0,[r4,#0x54]
                  |L28.142|
;;;2119     }
;;;2120     
;;;2121     /* Disable Rx DMA Request */
;;;2122     hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_RXDMAEN);
00008e  6820              LDR      r0,[r4,#0]
000090  6840              LDR      r0,[r0,#4]
000092  f0200001          BIC      r0,r0,#1
000096  6821              LDR      r1,[r4,#0]
000098  6048              STR      r0,[r1,#4]
;;;2123     
;;;2124     hspi->TxXferCount = 0;
00009a  2000              MOVS     r0,#0
00009c  86e0              STRH     r0,[r4,#0x36]
;;;2125     hspi->RxXferCount = 0;
00009e  87e0              STRH     r0,[r4,#0x3e]
;;;2126   }
0000a0  bd38              POP      {r3-r5,pc}
;;;2127   
                          ENDP


                          AREA ||i.SPI_DMAError||, CODE, READONLY, ALIGN=1

                  SPI_DMAError PROC
;;;2203     */
;;;2204   static void SPI_DMAError(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;2205   {
000002  4605              MOV      r5,r0
;;;2206     SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;2207     hspi->TxXferCount = 0;
000006  2000              MOVS     r0,#0
000008  86e0              STRH     r0,[r4,#0x36]
;;;2208     hspi->RxXferCount = 0;
00000a  87e0              STRH     r0,[r4,#0x3e]
;;;2209     hspi->State= HAL_SPI_STATE_READY;
00000c  2001              MOVS     r0,#1
00000e  f8840051          STRB     r0,[r4,#0x51]
;;;2210     hspi->ErrorCode |= HAL_SPI_ERROR_DMA;
000012  6d60              LDR      r0,[r4,#0x54]
000014  f0400010          ORR      r0,r0,#0x10
000018  6560              STR      r0,[r4,#0x54]
;;;2211     HAL_SPI_ErrorCallback(hspi);
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       HAL_SPI_ErrorCallback
;;;2212   }
000020  bd70              POP      {r4-r6,pc}
;;;2213   
                          ENDP


                          AREA ||i.SPI_DMAHalfReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAHalfReceiveCplt PROC
;;;2177     */
;;;2178   static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;2179   {
000002  4604              MOV      r4,r0
;;;2180     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;2181   
;;;2182     HAL_SPI_RxHalfCpltCallback(hspi);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HAL_SPI_RxHalfCpltCallback
;;;2183   }
00000c  bd70              POP      {r4-r6,pc}
;;;2184   
                          ENDP


                          AREA ||i.SPI_DMAHalfTransmitCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAHalfTransmitCplt PROC
;;;2164     */
;;;2165   static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;2166   {
000002  4604              MOV      r4,r0
;;;2167     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;2168   
;;;2169     HAL_SPI_TxHalfCpltCallback(hspi);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HAL_SPI_TxHalfCpltCallback
;;;2170   }
00000c  bd70              POP      {r4-r6,pc}
;;;2171   
                          ENDP


                          AREA ||i.SPI_DMAHalfTransmitReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAHalfTransmitReceiveCplt PROC
;;;2190     */
;;;2191   static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;2192   {
000002  4604              MOV      r4,r0
;;;2193     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;2194   
;;;2195     HAL_SPI_TxRxHalfCpltCallback(hspi);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HAL_SPI_TxRxHalfCpltCallback
;;;2196   }
00000c  bd70              POP      {r4-r6,pc}
;;;2197   
                          ENDP


                          AREA ||i.SPI_DMAReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMAReceiveCplt PROC
;;;2000     */
;;;2001   static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
000000  b538              PUSH     {r3-r5,lr}
;;;2002   {
000002  4605              MOV      r5,r0
;;;2003     __IO uint16_t tmpreg;
;;;2004     
;;;2005     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;2006     /* DMA Normal mode */
;;;2007     if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
000006  6828              LDR      r0,[r5,#0]
000008  6800              LDR      r0,[r0,#0]
00000a  f4007080          AND      r0,r0,#0x100
00000e  2800              CMP      r0,#0
000010  d15d              BNE      |L33.206|
;;;2008     {
;;;2009       if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
000012  68a0              LDR      r0,[r4,#8]
000014  b938              CBNZ     r0,|L33.38|
000016  6860              LDR      r0,[r4,#4]
000018  f5b07f82          CMP      r0,#0x104
00001c  d103              BNE      |L33.38|
;;;2010       {
;;;2011          SPI_DMAEndTransmitReceive(hspi);  
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       SPI_DMAEndTransmitReceive
000024  e046              B        |L33.180|
                  |L33.38|
;;;2012       }
;;;2013       /* SPI_DIRECTION_1LINE or SPI_DIRECTION_2LINES_RXONLY */
;;;2014       else
;;;2015       {
;;;2016         if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
000026  6860              LDR      r0,[r4,#4]
000028  f5b07f82          CMP      r0,#0x104
00002c  d10d              BNE      |L33.74|
00002e  68a0              LDR      r0,[r4,#8]
000030  f5b04f00          CMP      r0,#0x8000
000034  d003              BEQ      |L33.62|
000036  68a0              LDR      r0,[r4,#8]
000038  f5b06f80          CMP      r0,#0x400
00003c  d105              BNE      |L33.74|
                  |L33.62|
;;;2017         {
;;;2018           /* Disable SPI peripheral */
;;;2019           __HAL_SPI_DISABLE(hspi);
00003e  6820              LDR      r0,[r4,#0]
000040  6800              LDR      r0,[r0,#0]
000042  f0200040          BIC      r0,r0,#0x40
000046  6821              LDR      r1,[r4,#0]
000048  6008              STR      r0,[r1,#0]
                  |L33.74|
;;;2020         }
;;;2021         
;;;2022         /* Disable Rx DMA Request */
;;;2023         hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_RXDMAEN);
00004a  6820              LDR      r0,[r4,#0]
00004c  6840              LDR      r0,[r0,#4]
00004e  f0200001          BIC      r0,r0,#1
000052  6821              LDR      r1,[r4,#0]
000054  6048              STR      r0,[r1,#4]
;;;2024         
;;;2025         hspi->RxXferCount = 0;
000056  2000              MOVS     r0,#0
000058  87e0              STRH     r0,[r4,#0x3e]
;;;2026         
;;;2027         /* Reset CRC Calculation */
;;;2028         if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
00005a  6aa0              LDR      r0,[r4,#0x28]
00005c  f5b05f00          CMP      r0,#0x2000
000060  d128              BNE      |L33.180|
;;;2029         {
;;;2030           /* Wait until RXNE flag is set to send data */
;;;2031           if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000062  230a              MOVS     r3,#0xa
000064  2200              MOVS     r2,#0
000066  2101              MOVS     r1,#1
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00006e  b118              CBZ      r0,|L33.120|
;;;2032           {
;;;2033             hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000070  6d60              LDR      r0,[r4,#0x54]
000072  f0400020          ORR      r0,r0,#0x20
000076  6560              STR      r0,[r4,#0x54]
                  |L33.120|
;;;2034           }
;;;2035           
;;;2036           /* Read CRC */
;;;2037           tmpreg = hspi->Instance->DR;
000078  6820              LDR      r0,[r4,#0]
00007a  68c0              LDR      r0,[r0,#0xc]
00007c  b280              UXTH     r0,r0
00007e  9000              STR      r0,[sp,#0]
;;;2038           UNUSED(tmpreg);
000080  f8bd0000          LDRH     r0,[sp,#0]
;;;2039           
;;;2040           /* Wait until RXNE flag is set */
;;;2041           if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000084  230a              MOVS     r3,#0xa
000086  2201              MOVS     r2,#1
000088  4611              MOV      r1,r2
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000090  b118              CBZ      r0,|L33.154|
;;;2042           {
;;;2043             hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000092  6d60              LDR      r0,[r4,#0x54]
000094  f0400020          ORR      r0,r0,#0x20
000098  6560              STR      r0,[r4,#0x54]
                  |L33.154|
;;;2044           }
;;;2045           
;;;2046           /* Check if CRC error occurred */
;;;2047           if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
00009a  6820              LDR      r0,[r4,#0]
00009c  6880              LDR      r0,[r0,#8]
00009e  f3c01000          UBFX     r0,r0,#4,#1
0000a2  b138              CBZ      r0,|L33.180|
;;;2048           {
;;;2049             hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
0000a4  6d60              LDR      r0,[r4,#0x54]
0000a6  f0400002          ORR      r0,r0,#2
0000aa  6560              STR      r0,[r4,#0x54]
;;;2050             __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
0000ac  f06f0010          MVN      r0,#0x10
0000b0  6821              LDR      r1,[r4,#0]
0000b2  6088              STR      r0,[r1,#8]
                  |L33.180|
;;;2051           }
;;;2052         }
;;;2053       }
;;;2054       
;;;2055       hspi->State = HAL_SPI_STATE_READY;
0000b4  2001              MOVS     r0,#1
0000b6  f8840051          STRB     r0,[r4,#0x51]
;;;2056       
;;;2057       /* Check if Errors has been detected during transfer */
;;;2058       if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
0000ba  6d60              LDR      r0,[r4,#0x54]
0000bc  b118              CBZ      r0,|L33.198|
;;;2059       {
;;;2060         HAL_SPI_ErrorCallback(hspi);
0000be  4620              MOV      r0,r4
0000c0  f7fffffe          BL       HAL_SPI_ErrorCallback
0000c4  e006              B        |L33.212|
                  |L33.198|
;;;2061       }
;;;2062       else
;;;2063       {
;;;2064         HAL_SPI_RxCpltCallback(hspi);
0000c6  4620              MOV      r0,r4
0000c8  f7fffffe          BL       HAL_SPI_RxCpltCallback
0000cc  e002              B        |L33.212|
                  |L33.206|
;;;2065       } 
;;;2066     }
;;;2067     else
;;;2068     {
;;;2069       HAL_SPI_RxCpltCallback(hspi);
0000ce  4620              MOV      r0,r4
0000d0  f7fffffe          BL       HAL_SPI_RxCpltCallback
                  |L33.212|
;;;2070     }
;;;2071   }
0000d4  bd38              POP      {r3-r5,pc}
;;;2072   
                          ENDP


                          AREA ||i.SPI_DMATransmitCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMATransmitCplt PROC
;;;1951     */
;;;1952   static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
000000  b538              PUSH     {r3-r5,lr}
;;;1953   {
000002  4605              MOV      r5,r0
;;;1954     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;1955   
;;;1956     /* DMA Normal Mode */
;;;1957     if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
000006  6828              LDR      r0,[r5,#0]
000008  6800              LDR      r0,[r0,#0]
00000a  f4007080          AND      r0,r0,#0x100
00000e  bb00              CBNZ     r0,|L34.82|
;;;1958     {
;;;1959       /* Wait until TXE flag is set to send data */
;;;1960       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000010  230a              MOVS     r3,#0xa
000012  2200              MOVS     r2,#0
000014  2102              MOVS     r1,#2
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00001c  b118              CBZ      r0,|L34.38|
;;;1961       {
;;;1962         hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
00001e  6d60              LDR      r0,[r4,#0x54]
000020  f0400020          ORR      r0,r0,#0x20
000024  6560              STR      r0,[r4,#0x54]
                  |L34.38|
;;;1963       }
;;;1964       /* Disable Tx DMA Request */
;;;1965       hspi->Instance->CR2 &= (uint32_t)(~SPI_CR2_TXDMAEN);
000026  6820              LDR      r0,[r4,#0]
000028  6840              LDR      r0,[r0,#4]
00002a  f0200002          BIC      r0,r0,#2
00002e  6821              LDR      r1,[r4,#0]
000030  6048              STR      r0,[r1,#4]
;;;1966   
;;;1967       /* Wait until Busy flag is reset before disabling SPI */
;;;1968       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
000032  230a              MOVS     r3,#0xa
000034  2201              MOVS     r2,#1
000036  2180              MOVS     r1,#0x80
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00003e  b118              CBZ      r0,|L34.72|
;;;1969       {
;;;1970         hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000040  6d60              LDR      r0,[r4,#0x54]
000042  f0400020          ORR      r0,r0,#0x20
000046  6560              STR      r0,[r4,#0x54]
                  |L34.72|
;;;1971       }
;;;1972   
;;;1973       hspi->TxXferCount = 0;
000048  2000              MOVS     r0,#0
00004a  86e0              STRH     r0,[r4,#0x36]
;;;1974   
;;;1975       hspi->State = HAL_SPI_STATE_READY;
00004c  2001              MOVS     r0,#1
00004e  f8840051          STRB     r0,[r4,#0x51]
                  |L34.82|
;;;1976     }
;;;1977   
;;;1978     /* Clear OVERRUN flag in 2 Lines communication mode because received is not read */
;;;1979     if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
000052  68a0              LDR      r0,[r4,#8]
000054  b950              CBNZ     r0,|L34.108|
;;;1980     {
;;;1981      __HAL_SPI_CLEAR_OVRFLAG(hspi);
000056  bf00              NOP      
000058  2000              MOVS     r0,#0
00005a  9000              STR      r0,[sp,#0]
00005c  6820              LDR      r0,[r4,#0]
00005e  68c0              LDR      r0,[r0,#0xc]
000060  9000              STR      r0,[sp,#0]
000062  6820              LDR      r0,[r4,#0]
000064  6880              LDR      r0,[r0,#8]
000066  9000              STR      r0,[sp,#0]
000068  bf00              NOP      
00006a  bf00              NOP      
                  |L34.108|
;;;1982     }
;;;1983   
;;;1984     /* Check if Errors has been detected during transfer */
;;;1985     if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
00006c  6d60              LDR      r0,[r4,#0x54]
00006e  b118              CBZ      r0,|L34.120|
;;;1986     {
;;;1987       HAL_SPI_ErrorCallback(hspi);
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       HAL_SPI_ErrorCallback
000076  e002              B        |L34.126|
                  |L34.120|
;;;1988     }
;;;1989     else
;;;1990     {
;;;1991       HAL_SPI_TxCpltCallback(hspi);
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       HAL_SPI_TxCpltCallback
                  |L34.126|
;;;1992     }
;;;1993   }
00007e  bd38              POP      {r3-r5,pc}
;;;1994   
                          ENDP


                          AREA ||i.SPI_DMATransmitReceiveCplt||, CODE, READONLY, ALIGN=1

                  SPI_DMATransmitReceiveCplt PROC
;;;2133     */
;;;2134   static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;2135   {
000002  4604              MOV      r4,r0
;;;2136     SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;2137     if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
000006  6820              LDR      r0,[r4,#0]
000008  6800              LDR      r0,[r0,#0]
00000a  f4007080          AND      r0,r0,#0x100
00000e  b978              CBNZ     r0,|L35.48|
;;;2138     { /**/
;;;2139       SPI_DMAEndTransmitReceive(hspi);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       SPI_DMAEndTransmitReceive
;;;2140       
;;;2141       hspi->State = HAL_SPI_STATE_READY;
000016  2001              MOVS     r0,#1
000018  f8850051          STRB     r0,[r5,#0x51]
;;;2142       
;;;2143       /* Check if Errors has been detected during transfer */
;;;2144       if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
00001c  6d68              LDR      r0,[r5,#0x54]
00001e  b118              CBZ      r0,|L35.40|
;;;2145       {
;;;2146         HAL_SPI_ErrorCallback(hspi);
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       HAL_SPI_ErrorCallback
000026  e006              B        |L35.54|
                  |L35.40|
;;;2147       }
;;;2148       else
;;;2149       {
;;;2150         HAL_SPI_TxRxCpltCallback(hspi);
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
00002e  e002              B        |L35.54|
                  |L35.48|
;;;2151       }
;;;2152     }
;;;2153     else
;;;2154     {
;;;2155       HAL_SPI_TxRxCpltCallback(hspi);
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
                  |L35.54|
;;;2156     }
;;;2157   }
000036  bd70              POP      {r4-r6,pc}
;;;2158   
                          ENDP


                          AREA ||i.SPI_RxCloseIRQHandler||, CODE, READONLY, ALIGN=1

                  SPI_RxCloseIRQHandler PROC
;;;1810     */
;;;1811   static void SPI_RxCloseIRQHandler(SPI_HandleTypeDef *hspi)
000000  b538              PUSH     {r3-r5,lr}
;;;1812   {
000002  4604              MOV      r4,r0
;;;1813     __IO uint16_t tmpreg;
;;;1814   
;;;1815     if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000004  6aa0              LDR      r0,[r4,#0x28]
000006  f5b05f00          CMP      r0,#0x2000
00000a  d132              BNE      |L36.114|
;;;1816     {
;;;1817       /* Wait until RXNE flag is set to send data */
;;;1818       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
00000c  230a              MOVS     r3,#0xa
00000e  2200              MOVS     r2,#0
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000018  b118              CBZ      r0,|L36.34|
;;;1819       {
;;;1820         hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
00001a  6d60              LDR      r0,[r4,#0x54]
00001c  f0400020          ORR      r0,r0,#0x20
000020  6560              STR      r0,[r4,#0x54]
                  |L36.34|
;;;1821       }
;;;1822   
;;;1823       /* Read CRC to reset RXNE flag */
;;;1824       tmpreg = hspi->Instance->DR;
000022  6820              LDR      r0,[r4,#0]
000024  68c0              LDR      r0,[r0,#0xc]
000026  b280              UXTH     r0,r0
000028  9000              STR      r0,[sp,#0]
;;;1825       UNUSED(tmpreg);
00002a  f8bd0000          LDRH     r0,[sp,#0]
;;;1826   
;;;1827       /* Wait until RXNE flag is set to send data */
;;;1828       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
00002e  230a              MOVS     r3,#0xa
000030  2201              MOVS     r2,#1
000032  4611              MOV      r1,r2
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00003a  b118              CBZ      r0,|L36.68|
;;;1829       {
;;;1830         hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
00003c  6d60              LDR      r0,[r4,#0x54]
00003e  f0400020          ORR      r0,r0,#0x20
000042  6560              STR      r0,[r4,#0x54]
                  |L36.68|
;;;1831       }
;;;1832   
;;;1833       /* Check if CRC error occurred */
;;;1834       if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
000044  6820              LDR      r0,[r4,#0]
000046  6880              LDR      r0,[r0,#8]
000048  f3c01000          UBFX     r0,r0,#4,#1
00004c  b188              CBZ      r0,|L36.114|
;;;1835       {
;;;1836         hspi->ErrorCode |= HAL_SPI_ERROR_CRC;
00004e  6d60              LDR      r0,[r4,#0x54]
000050  f0400002          ORR      r0,r0,#2
000054  6560              STR      r0,[r4,#0x54]
;;;1837   
;;;1838         /* Reset CRC Calculation */
;;;1839         SPI_RESET_CRC(hspi);
000056  bf00              NOP      
000058  6820              LDR      r0,[r4,#0]
00005a  6800              LDR      r0,[r0,#0]
00005c  f4205000          BIC      r0,r0,#0x2000
000060  6821              LDR      r1,[r4,#0]
000062  6008              STR      r0,[r1,#0]
000064  6820              LDR      r0,[r4,#0]
000066  6800              LDR      r0,[r0,#0]
000068  f4405000          ORR      r0,r0,#0x2000
00006c  6821              LDR      r1,[r4,#0]
00006e  6008              STR      r0,[r1,#0]
000070  bf00              NOP      
                  |L36.114|
;;;1840       }
;;;1841     }
;;;1842   
;;;1843     /* Disable RXNE and ERR interrupt */
;;;1844     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE));
000072  6820              LDR      r0,[r4,#0]
000074  6840              LDR      r0,[r0,#4]
000076  f0200040          BIC      r0,r0,#0x40
00007a  6821              LDR      r1,[r4,#0]
00007c  6048              STR      r0,[r1,#4]
;;;1845   
;;;1846     /* if Transmit process is finished */
;;;1847     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_TXE) == RESET)
00007e  6820              LDR      r0,[r4,#0]
000080  6840              LDR      r0,[r0,#4]
000082  f3c010c0          UBFX     r0,r0,#7,#1
000086  bb18              CBNZ     r0,|L36.208|
;;;1848     {
;;;1849       /* Disable ERR interrupt */
;;;1850       __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_ERR));
000088  6820              LDR      r0,[r4,#0]
00008a  6840              LDR      r0,[r0,#4]
00008c  f0200020          BIC      r0,r0,#0x20
000090  6821              LDR      r1,[r4,#0]
000092  6048              STR      r0,[r1,#4]
;;;1851   
;;;1852       if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
000094  6860              LDR      r0,[r4,#4]
000096  f5b07f82          CMP      r0,#0x104
00009a  d10d              BNE      |L36.184|
00009c  68a0              LDR      r0,[r4,#8]
00009e  f5b04f00          CMP      r0,#0x8000
0000a2  d003              BEQ      |L36.172|
0000a4  68a0              LDR      r0,[r4,#8]
0000a6  f5b06f80          CMP      r0,#0x400
0000aa  d105              BNE      |L36.184|
                  |L36.172|
;;;1853       {
;;;1854         /* Disable SPI peripheral */
;;;1855         __HAL_SPI_DISABLE(hspi);
0000ac  6820              LDR      r0,[r4,#0]
0000ae  6800              LDR      r0,[r0,#0]
0000b0  f0200040          BIC      r0,r0,#0x40
0000b4  6821              LDR      r1,[r4,#0]
0000b6  6008              STR      r0,[r1,#0]
                  |L36.184|
;;;1856       }
;;;1857       
;;;1858       /* Check if Errors has been detected during transfer */
;;;1859       if(hspi->ErrorCode ==  HAL_SPI_ERROR_NONE)
0000b8  6d60              LDR      r0,[r4,#0x54]
0000ba  b988              CBNZ     r0,|L36.224|
;;;1860       {
;;;1861         /* Check if we are in Rx or in Rx/Tx Mode */
;;;1862         if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
0000bc  f8940051          LDRB     r0,[r4,#0x51]
0000c0  2832              CMP      r0,#0x32
0000c2  d106              BNE      |L36.210|
;;;1863         {
;;;1864           /* Set state to READY before run the Callback Complete */
;;;1865           hspi->State = HAL_SPI_STATE_READY;
0000c4  2001              MOVS     r0,#1
0000c6  f8840051          STRB     r0,[r4,#0x51]
;;;1866           HAL_SPI_TxRxCpltCallback(hspi);
0000ca  4620              MOV      r0,r4
0000cc  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
                  |L36.208|
0000d0  e00c              B        |L36.236|
                  |L36.210|
;;;1867         }
;;;1868         else
;;;1869         {
;;;1870           /* Set state to READY before run the Callback Complete */
;;;1871           hspi->State = HAL_SPI_STATE_READY;
0000d2  2001              MOVS     r0,#1
0000d4  f8840051          STRB     r0,[r4,#0x51]
;;;1872           HAL_SPI_RxCpltCallback(hspi);
0000d8  4620              MOV      r0,r4
0000da  f7fffffe          BL       HAL_SPI_RxCpltCallback
0000de  e005              B        |L36.236|
                  |L36.224|
;;;1873         }
;;;1874       }
;;;1875       else
;;;1876       {
;;;1877         /* Set state to READY before run the Callback Complete */
;;;1878         hspi->State = HAL_SPI_STATE_READY;
0000e0  2001              MOVS     r0,#1
0000e2  f8840051          STRB     r0,[r4,#0x51]
;;;1879         /* Call Error call back in case of Error */
;;;1880         HAL_SPI_ErrorCallback(hspi);
0000e6  4620              MOV      r0,r4
0000e8  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L36.236|
;;;1881       }
;;;1882     }
;;;1883   }
0000ec  bd38              POP      {r3-r5,pc}
;;;1884   
                          ENDP


                          AREA ||i.SPI_RxISR||, CODE, READONLY, ALIGN=1

                  SPI_RxISR PROC
;;;1917     */
;;;1918   static void SPI_RxISR(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;1919   {
000002  4604              MOV      r4,r0
;;;1920     /* Receive data in 8 Bit mode */
;;;1921     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
000004  68e0              LDR      r0,[r4,#0xc]
000006  b938              CBNZ     r0,|L37.24|
;;;1922     {
;;;1923       (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
000008  6820              LDR      r0,[r4,#0]
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  b2c1              UXTB     r1,r0
00000e  6ba2              LDR      r2,[r4,#0x38]
000010  1c50              ADDS     r0,r2,#1
000012  63a0              STR      r0,[r4,#0x38]
000014  7011              STRB     r1,[r2,#0]
000016  e006              B        |L37.38|
                  |L37.24|
;;;1924     }
;;;1925     /* Receive data in 16 Bit mode */
;;;1926     else
;;;1927     {
;;;1928       *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
000018  6820              LDR      r0,[r4,#0]
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  6ba1              LDR      r1,[r4,#0x38]
00001e  8008              STRH     r0,[r1,#0]
;;;1929       hspi->pRxBuffPtr+=2;
000020  6ba0              LDR      r0,[r4,#0x38]
000022  1c80              ADDS     r0,r0,#2
000024  63a0              STR      r0,[r4,#0x38]
                  |L37.38|
;;;1930     }
;;;1931       hspi->RxXferCount--;
000026  8fe0              LDRH     r0,[r4,#0x3e]
000028  1e40              SUBS     r0,r0,#1
00002a  87e0              STRH     r0,[r4,#0x3e]
;;;1932   
;;;1933     /* Enable CRC Transmission */
;;;1934     if((hspi->RxXferCount == 1) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
00002c  8fe0              LDRH     r0,[r4,#0x3e]
00002e  2801              CMP      r0,#1
000030  d109              BNE      |L37.70|
000032  6aa0              LDR      r0,[r4,#0x28]
000034  f5b05f00          CMP      r0,#0x2000
000038  d105              BNE      |L37.70|
;;;1935     {
;;;1936       /* Set CRC Next to calculate CRC on Rx side */
;;;1937       hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;  
00003a  6820              LDR      r0,[r4,#0]
00003c  6800              LDR      r0,[r0,#0]
00003e  f4405080          ORR      r0,r0,#0x1000
000042  6821              LDR      r1,[r4,#0]
000044  6008              STR      r0,[r1,#0]
                  |L37.70|
;;;1938     }
;;;1939   
;;;1940     if(hspi->RxXferCount == 0)
000046  8fe0              LDRH     r0,[r4,#0x3e]
000048  b910              CBNZ     r0,|L37.80|
;;;1941     {
;;;1942       SPI_RxCloseIRQHandler(hspi);
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       SPI_RxCloseIRQHandler
                  |L37.80|
;;;1943     }
;;;1944   }
000050  bd10              POP      {r4,pc}
;;;1945   
                          ENDP


                          AREA ||i.SPI_TxCloseIRQHandler||, CODE, READONLY, ALIGN=1

                  SPI_TxCloseIRQHandler PROC
;;;1717     */
;;;1718   static void SPI_TxCloseIRQHandler(SPI_HandleTypeDef *hspi)
000000  b538              PUSH     {r3-r5,lr}
;;;1719   {
000002  4604              MOV      r4,r0
;;;1720     /* Wait until TXE flag is set to send data */
;;;1721     if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, SPI_TIMEOUT_VALUE) != HAL_OK)
000004  230a              MOVS     r3,#0xa
000006  2200              MOVS     r2,#0
000008  2102              MOVS     r1,#2
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
000010  b118              CBZ      r0,|L38.26|
;;;1722     {
;;;1723       hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
000012  6d60              LDR      r0,[r4,#0x54]
000014  f0400020          ORR      r0,r0,#0x20
000018  6560              STR      r0,[r4,#0x54]
                  |L38.26|
;;;1724     }
;;;1725   
;;;1726     /* Disable TXE interrupt */
;;;1727     __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE ));
00001a  6820              LDR      r0,[r4,#0]
00001c  6840              LDR      r0,[r0,#4]
00001e  f0200080          BIC      r0,r0,#0x80
000022  6821              LDR      r1,[r4,#0]
000024  6048              STR      r0,[r1,#4]
;;;1728   
;;;1729     /* Disable ERR interrupt if Receive process is finished */
;;;1730     if(__HAL_SPI_GET_IT_SOURCE(hspi, SPI_IT_RXNE) == RESET)
000026  6820              LDR      r0,[r4,#0]
000028  6840              LDR      r0,[r0,#4]
00002a  f3c01080          UBFX     r0,r0,#6,#1
00002e  2800              CMP      r0,#0
000030  d137              BNE      |L38.162|
;;;1731     {
;;;1732       __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_ERR));
000032  6820              LDR      r0,[r4,#0]
000034  6840              LDR      r0,[r0,#4]
000036  f0200020          BIC      r0,r0,#0x20
00003a  6821              LDR      r1,[r4,#0]
00003c  6048              STR      r0,[r1,#4]
;;;1733   
;;;1734       /* Wait until Busy flag is reset before disabling SPI */
;;;1735       if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, SPI_TIMEOUT_VALUE) != HAL_OK)
00003e  230a              MOVS     r3,#0xa
000040  2201              MOVS     r2,#1
000042  2180              MOVS     r1,#0x80
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       SPI_WaitOnFlagUntilTimeout
00004a  b118              CBZ      r0,|L38.84|
;;;1736       {
;;;1737         hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
00004c  6d60              LDR      r0,[r4,#0x54]
00004e  f0400020          ORR      r0,r0,#0x20
000052  6560              STR      r0,[r4,#0x54]
                  |L38.84|
;;;1738       }
;;;1739   
;;;1740       /* Clear OVERRUN flag in 2 Lines communication mode because received is not read */
;;;1741       if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
000054  68a0              LDR      r0,[r4,#8]
000056  b950              CBNZ     r0,|L38.110|
;;;1742       {
;;;1743         __HAL_SPI_CLEAR_OVRFLAG(hspi);
000058  bf00              NOP      
00005a  2000              MOVS     r0,#0
00005c  9000              STR      r0,[sp,#0]
00005e  6820              LDR      r0,[r4,#0]
000060  68c0              LDR      r0,[r0,#0xc]
000062  9000              STR      r0,[sp,#0]
000064  6820              LDR      r0,[r4,#0]
000066  6880              LDR      r0,[r0,#8]
000068  9000              STR      r0,[sp,#0]
00006a  bf00              NOP      
00006c  bf00              NOP      
                  |L38.110|
;;;1744       }
;;;1745       
;;;1746       /* Check if Errors has been detected during transfer */
;;;1747       if(hspi->ErrorCode ==  HAL_SPI_ERROR_NONE)
00006e  6d60              LDR      r0,[r4,#0x54]
000070  b988              CBNZ     r0,|L38.150|
;;;1748       {
;;;1749         /* Check if we are in Tx or in Rx/Tx Mode */
;;;1750         if(hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
000072  f8940051          LDRB     r0,[r4,#0x51]
000076  2832              CMP      r0,#0x32
000078  d106              BNE      |L38.136|
;;;1751         {
;;;1752           /* Set state to READY before run the Callback Complete */
;;;1753           hspi->State = HAL_SPI_STATE_READY;
00007a  2001              MOVS     r0,#1
00007c  f8840051          STRB     r0,[r4,#0x51]
;;;1754           HAL_SPI_TxRxCpltCallback(hspi);
000080  4620              MOV      r0,r4
000082  f7fffffe          BL       HAL_SPI_TxRxCpltCallback
000086  e00c              B        |L38.162|
                  |L38.136|
;;;1755         }
;;;1756         else
;;;1757         {
;;;1758           /* Set state to READY before run the Callback Complete */
;;;1759           hspi->State = HAL_SPI_STATE_READY;
000088  2001              MOVS     r0,#1
00008a  f8840051          STRB     r0,[r4,#0x51]
;;;1760           HAL_SPI_TxCpltCallback(hspi);
00008e  4620              MOV      r0,r4
000090  f7fffffe          BL       HAL_SPI_TxCpltCallback
000094  e005              B        |L38.162|
                  |L38.150|
;;;1761         }
;;;1762       }
;;;1763       else
;;;1764       {
;;;1765         /* Set state to READY before run the Callback Complete */
;;;1766         hspi->State = HAL_SPI_STATE_READY;
000096  2001              MOVS     r0,#1
000098  f8840051          STRB     r0,[r4,#0x51]
;;;1767         /* Call Error call back in case of Error */
;;;1768         HAL_SPI_ErrorCallback(hspi);
00009c  4620              MOV      r0,r4
00009e  f7fffffe          BL       HAL_SPI_ErrorCallback
                  |L38.162|
;;;1769       }
;;;1770     }
;;;1771   }
0000a2  bd38              POP      {r3-r5,pc}
;;;1772   
                          ENDP


                          AREA ||i.SPI_TxISR||, CODE, READONLY, ALIGN=1

                  SPI_TxISR PROC
;;;1778     */
;;;1779   static void SPI_TxISR(SPI_HandleTypeDef *hspi)
000000  b510              PUSH     {r4,lr}
;;;1780   {
000002  4604              MOV      r4,r0
;;;1781     /* Transmit data in 8 Bit mode */
;;;1782     if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
000004  68e0              LDR      r0,[r4,#0xc]
000006  b930              CBNZ     r0,|L39.22|
;;;1783     {
;;;1784       hspi->Instance->DR = (*hspi->pTxBuffPtr++);
000008  6b21              LDR      r1,[r4,#0x30]
00000a  1c48              ADDS     r0,r1,#1
00000c  6320              STR      r0,[r4,#0x30]
00000e  7808              LDRB     r0,[r1,#0]
000010  6821              LDR      r1,[r4,#0]
000012  60c8              STR      r0,[r1,#0xc]
000014  e006              B        |L39.36|
                  |L39.22|
;;;1785     }
;;;1786     /* Transmit data in 16 Bit mode */
;;;1787     else
;;;1788     {
;;;1789       hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
000016  6b20              LDR      r0,[r4,#0x30]
000018  8800              LDRH     r0,[r0,#0]
00001a  6821              LDR      r1,[r4,#0]
00001c  60c8              STR      r0,[r1,#0xc]
;;;1790       hspi->pTxBuffPtr+=2;
00001e  6b20              LDR      r0,[r4,#0x30]
000020  1c80              ADDS     r0,r0,#2
000022  6320              STR      r0,[r4,#0x30]
                  |L39.36|
;;;1791     }
;;;1792     hspi->TxXferCount--;
000024  8ee0              LDRH     r0,[r4,#0x36]
000026  1e40              SUBS     r0,r0,#1
000028  86e0              STRH     r0,[r4,#0x36]
;;;1793   
;;;1794     if(hspi->TxXferCount == 0)
00002a  8ee0              LDRH     r0,[r4,#0x36]
00002c  b960              CBNZ     r0,|L39.72|
;;;1795     {
;;;1796       if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
00002e  6aa0              LDR      r0,[r4,#0x28]
000030  f5b05f00          CMP      r0,#0x2000
000034  d105              BNE      |L39.66|
;;;1797       {
;;;1798         /* calculate and transfer CRC on Tx line */
;;;1799         hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
000036  6820              LDR      r0,[r4,#0]
000038  6800              LDR      r0,[r0,#0]
00003a  f4405080          ORR      r0,r0,#0x1000
00003e  6821              LDR      r1,[r4,#0]
000040  6008              STR      r0,[r1,#0]
                  |L39.66|
;;;1800       }
;;;1801       SPI_TxCloseIRQHandler(hspi);
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       SPI_TxCloseIRQHandler
                  |L39.72|
;;;1802     }
;;;1803   }
000048  bd10              POP      {r4,pc}
;;;1804   
                          ENDP


                          AREA ||i.SPI_WaitOnFlagUntilTimeout||, CODE, READONLY, ALIGN=1

                  SPI_WaitOnFlagUntilTimeout PROC
;;;2222     */
;;;2223   static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2224   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;2225     uint32_t tickstart = 0;
00000c  f04f0800          MOV      r8,#0
;;;2226   
;;;2227     /* Get tick */ 
;;;2228     tickstart = HAL_GetTick();
000010  f7fffffe          BL       HAL_GetTick
000014  4680              MOV      r8,r0
;;;2229   
;;;2230     /* Wait until flag is set */
;;;2231     if(Status == RESET)
000016  2f00              CMP      r7,#0
000018  d13e              BNE      |L40.152|
;;;2232     {
;;;2233       while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
00001a  e032              B        |L40.130|
                  |L40.28|
;;;2234       {
;;;2235         if(Timeout != HAL_MAX_DELAY)
00001c  1c68              ADDS     r0,r5,#1
00001e  b378              CBZ      r0,|L40.128|
;;;2236         {
;;;2237           if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
000020  b12d              CBZ      r5,|L40.46|
000022  f7fffffe          BL       HAL_GetTick
000026  eba00008          SUB      r0,r0,r8
00002a  42a8              CMP      r0,r5
00002c  d929              BLS      |L40.130|
                  |L40.46|
;;;2238           {
;;;2239             /* Disable the SPI and reset the CRC: the CRC value should be cleared
;;;2240                on both master and slave sides in order to resynchronize the master
;;;2241                and slave for their respective CRC calculation */
;;;2242   
;;;2243             /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
;;;2244             __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
00002e  6820              LDR      r0,[r4,#0]
000030  6840              LDR      r0,[r0,#4]
000032  f02000e0          BIC      r0,r0,#0xe0
000036  6821              LDR      r1,[r4,#0]
000038  6048              STR      r0,[r1,#4]
;;;2245   
;;;2246             /* Disable SPI peripheral */
;;;2247             __HAL_SPI_DISABLE(hspi);
00003a  6820              LDR      r0,[r4,#0]
00003c  6800              LDR      r0,[r0,#0]
00003e  f0200040          BIC      r0,r0,#0x40
000042  6821              LDR      r1,[r4,#0]
000044  6008              STR      r0,[r1,#0]
;;;2248   
;;;2249             /* Reset CRC Calculation */
;;;2250             if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
000046  6aa0              LDR      r0,[r4,#0x28]
000048  f5b05f00          CMP      r0,#0x2000
00004c  d10d              BNE      |L40.106|
;;;2251             {
;;;2252               SPI_RESET_CRC(hspi);
00004e  bf00              NOP      
000050  6820              LDR      r0,[r4,#0]
000052  6800              LDR      r0,[r0,#0]
000054  f4205000          BIC      r0,r0,#0x2000
000058  6821              LDR      r1,[r4,#0]
00005a  6008              STR      r0,[r1,#0]
00005c  6820              LDR      r0,[r4,#0]
00005e  6800              LDR      r0,[r0,#0]
000060  f4405000          ORR      r0,r0,#0x2000
000064  6821              LDR      r1,[r4,#0]
000066  6008              STR      r0,[r1,#0]
000068  bf00              NOP      
                  |L40.106|
;;;2253             }
;;;2254   
;;;2255             hspi->State= HAL_SPI_STATE_READY;
00006a  2001              MOVS     r0,#1
00006c  f8840051          STRB     r0,[r4,#0x51]
;;;2256   
;;;2257             /* Process Unlocked */
;;;2258             __HAL_UNLOCK(hspi);
000070  bf00              NOP      
000072  2000              MOVS     r0,#0
000074  f8840050          STRB     r0,[r4,#0x50]
000078  bf00              NOP      
;;;2259   
;;;2260             return HAL_TIMEOUT;
00007a  2003              MOVS     r0,#3
                  |L40.124|
;;;2261           }
;;;2262         }
;;;2263       }
;;;2264     }
;;;2265     else
;;;2266     {
;;;2267       while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
;;;2268       {
;;;2269         if(Timeout != HAL_MAX_DELAY)
;;;2270         {
;;;2271           if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
;;;2272           {
;;;2273             /* Disable the SPI and reset the CRC: the CRC value should be cleared
;;;2274                on both master and slave sides in order to resynchronize the master
;;;2275                and slave for their respective CRC calculation */
;;;2276   
;;;2277             /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
;;;2278             __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
;;;2279   
;;;2280             /* Disable SPI peripheral */
;;;2281             __HAL_SPI_DISABLE(hspi);
;;;2282   
;;;2283             /* Reset CRC Calculation */
;;;2284             if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
;;;2285             {
;;;2286               SPI_RESET_CRC(hspi);
;;;2287             }
;;;2288   
;;;2289             hspi->State= HAL_SPI_STATE_READY;
;;;2290   
;;;2291             /* Process Unlocked */
;;;2292             __HAL_UNLOCK(hspi);
;;;2293   
;;;2294             return HAL_TIMEOUT;
;;;2295           }
;;;2296         }
;;;2297       }
;;;2298     }
;;;2299     return HAL_OK;
;;;2300   }
00007c  e8bd81f0          POP      {r4-r8,pc}
                  |L40.128|
000080  e7ff              B        |L40.130|
                  |L40.130|
000082  6820              LDR      r0,[r4,#0]            ;2233
000084  6880              LDR      r0,[r0,#8]            ;2233
000086  4030              ANDS     r0,r0,r6              ;2233
000088  42b0              CMP      r0,r6                 ;2233
00008a  d101              BNE      |L40.144|
00008c  2001              MOVS     r0,#1                 ;2233
00008e  e000              B        |L40.146|
                  |L40.144|
000090  2000              MOVS     r0,#0                 ;2233
                  |L40.146|
000092  2800              CMP      r0,#0                 ;2233
000094  d0c2              BEQ      |L40.28|
000096  e03b              B        |L40.272|
                  |L40.152|
000098  e030              B        |L40.252|
                  |L40.154|
00009a  1c68              ADDS     r0,r5,#1              ;2269
00009c  b370              CBZ      r0,|L40.252|
00009e  b12d              CBZ      r5,|L40.172|
0000a0  f7fffffe          BL       HAL_GetTick
0000a4  eba00008          SUB      r0,r0,r8              ;2271
0000a8  42a8              CMP      r0,r5                 ;2271
0000aa  d927              BLS      |L40.252|
                  |L40.172|
0000ac  6820              LDR      r0,[r4,#0]            ;2278
0000ae  6840              LDR      r0,[r0,#4]            ;2278
0000b0  f02000e0          BIC      r0,r0,#0xe0           ;2278
0000b4  6821              LDR      r1,[r4,#0]            ;2278
0000b6  6048              STR      r0,[r1,#4]            ;2278
0000b8  6820              LDR      r0,[r4,#0]            ;2281
0000ba  6800              LDR      r0,[r0,#0]            ;2281
0000bc  f0200040          BIC      r0,r0,#0x40           ;2281
0000c0  6821              LDR      r1,[r4,#0]            ;2281
0000c2  6008              STR      r0,[r1,#0]            ;2281
0000c4  6aa0              LDR      r0,[r4,#0x28]         ;2284
0000c6  f5b05f00          CMP      r0,#0x2000            ;2284
0000ca  d10d              BNE      |L40.232|
0000cc  bf00              NOP                            ;2286
0000ce  6820              LDR      r0,[r4,#0]            ;2286
0000d0  6800              LDR      r0,[r0,#0]            ;2286
0000d2  f4205000          BIC      r0,r0,#0x2000         ;2286
0000d6  6821              LDR      r1,[r4,#0]            ;2286
0000d8  6008              STR      r0,[r1,#0]            ;2286
0000da  6820              LDR      r0,[r4,#0]            ;2286
0000dc  6800              LDR      r0,[r0,#0]            ;2286
0000de  f4405000          ORR      r0,r0,#0x2000         ;2286
0000e2  6821              LDR      r1,[r4,#0]            ;2286
0000e4  6008              STR      r0,[r1,#0]            ;2286
0000e6  bf00              NOP                            ;2286
                  |L40.232|
0000e8  2001              MOVS     r0,#1                 ;2289
0000ea  f8840051          STRB     r0,[r4,#0x51]         ;2289
0000ee  bf00              NOP                            ;2292
0000f0  2000              MOVS     r0,#0                 ;2292
0000f2  f8840050          STRB     r0,[r4,#0x50]         ;2292
0000f6  bf00              NOP                            ;2292
0000f8  2003              MOVS     r0,#3                 ;2294
0000fa  e7bf              B        |L40.124|
                  |L40.252|
0000fc  6820              LDR      r0,[r4,#0]            ;2267
0000fe  6880              LDR      r0,[r0,#8]            ;2267
000100  4030              ANDS     r0,r0,r6              ;2267
000102  42b0              CMP      r0,r6                 ;2267
000104  d101              BNE      |L40.266|
000106  2001              MOVS     r0,#1                 ;2267
000108  e000              B        |L40.268|
                  |L40.266|
00010a  2000              MOVS     r0,#0                 ;2267
                  |L40.268|
00010c  2800              CMP      r0,#0                 ;2267
00010e  d1c4              BNE      |L40.154|
                  |L40.272|
000110  2000              MOVS     r0,#0                 ;2299
000112  e7b3              B        |L40.124|
;;;2301   
                          ENDP


;*** Start embedded assembler ***

#line 1 "HALLIB\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_spi_c_5e7b22bd____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___19_stm32f4xx_hal_spi_c_5e7b22bd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_spi_c_5e7b22bd____REVSH|
#line 402
|__asm___19_stm32f4xx_hal_spi_c_5e7b22bd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_spi_c_5e7b22bd____RRX|
#line 587
|__asm___19_stm32f4xx_hal_spi_c_5e7b22bd____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
