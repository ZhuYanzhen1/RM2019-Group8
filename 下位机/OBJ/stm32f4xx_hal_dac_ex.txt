; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_hal_dac_ex.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm32f4xx_hal_dac_ex.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm32f4xx_hal_dac_ex.crf HALLIB\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dac_ex.c]
                          THUMB

                          AREA ||i.DAC_DMAConvCpltCh2||, CODE, READONLY, ALIGN=1

                  DAC_DMAConvCpltCh2 PROC
;;;331      */
;;;332    void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;333    {
000002  4604              MOV      r4,r0
;;;334      DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;335      
;;;336      HAL_DACEx_ConvCpltCallbackCh2(hdac); 
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HAL_DACEx_ConvCpltCallbackCh2
;;;337      
;;;338      hdac->State= HAL_DAC_STATE_READY;
00000c  2001              MOVS     r0,#1
00000e  7128              STRB     r0,[r5,#4]
;;;339    }
000010  bd70              POP      {r4-r6,pc}
;;;340    
                          ENDP


                          AREA ||i.DAC_DMAErrorCh2||, CODE, READONLY, ALIGN=1

                  DAC_DMAErrorCh2 PROC
;;;359      */
;;;360    void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;361    {
000002  4605              MOV      r5,r0
;;;362      DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;363        
;;;364      /* Set DAC error code to DMA error */
;;;365      hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
000006  6920              LDR      r0,[r4,#0x10]
000008  f0400004          ORR      r0,r0,#4
00000c  6120              STR      r0,[r4,#0x10]
;;;366        
;;;367      HAL_DACEx_ErrorCallbackCh2(hdac); 
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       HAL_DACEx_ErrorCallbackCh2
;;;368        
;;;369      hdac->State= HAL_DAC_STATE_READY;
000014  2001              MOVS     r0,#1
000016  7120              STRB     r0,[r4,#4]
;;;370    }
000018  bd70              POP      {r4-r6,pc}
;;;371    
                          ENDP


                          AREA ||i.DAC_DMAHalfConvCpltCh2||, CODE, READONLY, ALIGN=1

                  DAC_DMAHalfConvCpltCh2 PROC
;;;346      */
;;;347    void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;348    {
000002  4604              MOV      r4,r0
;;;349        DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;350        /* Conversion complete callback */
;;;351        HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HAL_DACEx_ConvHalfCpltCallbackCh2
;;;352    }
00000c  bd70              POP      {r4-r6,pc}
;;;353    
                          ENDP


                          AREA ||i.HAL_DACEx_ConvCpltCallbackCh2||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_ConvCpltCallbackCh2 PROC
;;;271      */
;;;272    __weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
000000  4770              BX       lr
;;;273    {
;;;274      /* Prevent unused argument(s) compilation warning */
;;;275      UNUSED(hdac);
;;;276      /* NOTE : This function Should not be modified, when the callback is needed,
;;;277                the HAL_DAC_ConvCpltCallback could be implemented in the user file
;;;278       */
;;;279    }
;;;280    
                          ENDP


                          AREA ||i.HAL_DACEx_ConvHalfCpltCallbackCh2||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_ConvHalfCpltCallbackCh2 PROC
;;;286      */
;;;287    __weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
000000  4770              BX       lr
;;;288    {
;;;289      /* Prevent unused argument(s) compilation warning */
;;;290      UNUSED(hdac);
;;;291      /* NOTE : This function Should not be modified, when the callback is needed,
;;;292                the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
;;;293       */
;;;294    }
;;;295    
                          ENDP


                          AREA ||i.HAL_DACEx_DMAUnderrunCallbackCh2||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_DMAUnderrunCallbackCh2 PROC
;;;316      */
;;;317    __weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
000000  4770              BX       lr
;;;318    {
;;;319      /* Prevent unused argument(s) compilation warning */
;;;320      UNUSED(hdac);
;;;321      /* NOTE : This function Should not be modified, when the callback is needed,
;;;322                the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
;;;323       */
;;;324    }
;;;325    
                          ENDP


                          AREA ||i.HAL_DACEx_DualGetValue||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_DualGetValue PROC
;;;109      */
;;;110    uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef* hdac)
000000  4601              MOV      r1,r0
;;;111    {
;;;112      uint32_t tmp = 0;
000002  2000              MOVS     r0,#0
;;;113      
;;;114      tmp |= hdac->Instance->DOR1;
000004  680a              LDR      r2,[r1,#0]
000006  6ad2              LDR      r2,[r2,#0x2c]
000008  4310              ORRS     r0,r0,r2
;;;115      
;;;116      tmp |= hdac->Instance->DOR2 << 16;
00000a  680a              LDR      r2,[r1,#0]
00000c  6b12              LDR      r2,[r2,#0x30]
00000e  ea404002          ORR      r0,r0,r2,LSL #16
;;;117      
;;;118      /* Returns the DAC channel data output register value */
;;;119      return tmp;
;;;120    }
000012  4770              BX       lr
;;;121    
                          ENDP


                          AREA ||i.HAL_DACEx_DualSetValue||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_DualSetValue PROC
;;;232      */
;;;233    HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef* hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
000000  b570              PUSH     {r4-r6,lr}
;;;234    {  
000002  4604              MOV      r4,r0
;;;235      uint32_t data = 0, tmp = 0;
000004  2600              MOVS     r6,#0
000006  2500              MOVS     r5,#0
;;;236      
;;;237      /* Check the parameters */
;;;238      assert_param(IS_DAC_ALIGN(Alignment));
;;;239      assert_param(IS_DAC_DATA(Data1));
;;;240      assert_param(IS_DAC_DATA(Data2));
;;;241      
;;;242      /* Calculate and set dual DAC data holding register value */
;;;243      if (Alignment == DAC_ALIGN_8B_R)
000008  2908              CMP      r1,#8
00000a  d102              BNE      |L8.18|
;;;244      {
;;;245        data = ((uint32_t)Data2 << 8) | Data1; 
00000c  ea422603          ORR      r6,r2,r3,LSL #8
000010  e001              B        |L8.22|
                  |L8.18|
;;;246      }
;;;247      else
;;;248      {
;;;249        data = ((uint32_t)Data2 << 16) | Data1;
000012  ea424603          ORR      r6,r2,r3,LSL #16
                  |L8.22|
;;;250      }
;;;251      
;;;252      tmp = (uint32_t)hdac->Instance;
000016  6825              LDR      r5,[r4,#0]
;;;253      tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
000018  f1010020          ADD      r0,r1,#0x20
00001c  4405              ADD      r5,r5,r0
;;;254    
;;;255      /* Set the dual DAC selected data holding register */
;;;256      *(__IO uint32_t *)tmp = data;
00001e  602e              STR      r6,[r5,#0]
;;;257      
;;;258      /* Return function status */
;;;259      return HAL_OK;
000020  2000              MOVS     r0,#0
;;;260    }
000022  bd70              POP      {r4-r6,pc}
;;;261    
                          ENDP


                          AREA ||i.HAL_DACEx_ErrorCallbackCh2||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_ErrorCallbackCh2 PROC
;;;301      */
;;;302    __weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
000000  4770              BX       lr
;;;303    {
;;;304      /* Prevent unused argument(s) compilation warning */
;;;305      UNUSED(hdac);
;;;306      /* NOTE : This function Should not be modified, when the callback is needed,
;;;307                the HAL_DAC_ErrorCallback could be implemented in the user file
;;;308       */
;;;309    }
;;;310    
                          ENDP


                          AREA ||i.HAL_DACEx_NoiseWaveGenerate||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_NoiseWaveGenerate PROC
;;;192      */
;;;193    HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Amplitude)
000000  b510              PUSH     {r4,lr}
;;;194    {  
000002  4603              MOV      r3,r0
;;;195      /* Check the parameters */
;;;196      assert_param(IS_DAC_CHANNEL(Channel));
;;;197      assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));
;;;198      
;;;199      /* Process locked */
;;;200      __HAL_LOCK(hdac);
000004  bf00              NOP      
000006  7958              LDRB     r0,[r3,#5]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L10.16|
00000c  2002              MOVS     r0,#2
                  |L10.14|
;;;201      
;;;202      /* Change DAC state */
;;;203      hdac->State = HAL_DAC_STATE_BUSY;
;;;204      
;;;205      /* Enable the selected wave generation for the selected DAC channel */
;;;206      MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1 | DAC_CR_MAMP1) << Channel, (DAC_CR_WAVE1_0 | Amplitude) << Channel);
;;;207      
;;;208      /* Change DAC state */
;;;209      hdac->State = HAL_DAC_STATE_READY;
;;;210      
;;;211      /* Process unlocked */
;;;212      __HAL_UNLOCK(hdac);
;;;213      
;;;214      /* Return function status */
;;;215      return HAL_OK;
;;;216    }
00000e  bd10              POP      {r4,pc}
                  |L10.16|
000010  2001              MOVS     r0,#1                 ;200
000012  7158              STRB     r0,[r3,#5]            ;200
000014  bf00              NOP                            ;200
000016  2002              MOVS     r0,#2                 ;203
000018  7118              STRB     r0,[r3,#4]            ;203
00001a  6818              LDR      r0,[r3,#0]            ;206
00001c  6800              LDR      r0,[r0,#0]            ;206
00001e  f44f647c          MOV      r4,#0xfc0             ;206
000022  408c              LSLS     r4,r4,r1              ;206
000024  43a0              BICS     r0,r0,r4              ;206
000026  f0420440          ORR      r4,r2,#0x40           ;206
00002a  408c              LSLS     r4,r4,r1              ;206
00002c  4320              ORRS     r0,r0,r4              ;206
00002e  681c              LDR      r4,[r3,#0]            ;206
000030  6020              STR      r0,[r4,#0]            ;206
000032  2001              MOVS     r0,#1                 ;209
000034  7118              STRB     r0,[r3,#4]            ;209
000036  bf00              NOP                            ;212
000038  2000              MOVS     r0,#0                 ;212
00003a  7158              STRB     r0,[r3,#5]            ;212
00003c  bf00              NOP                            ;212
00003e  bf00              NOP                            ;215
000040  e7e5              B        |L10.14|
;;;217    
                          ENDP


                          AREA ||i.HAL_DACEx_TriangleWaveGenerate||, CODE, READONLY, ALIGN=1

                  HAL_DACEx_TriangleWaveGenerate PROC
;;;144      */
;;;145    HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Amplitude)
000000  b510              PUSH     {r4,lr}
;;;146    {  
000002  4603              MOV      r3,r0
;;;147      /* Check the parameters */
;;;148      assert_param(IS_DAC_CHANNEL(Channel));
;;;149      assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));
;;;150      
;;;151      /* Process locked */
;;;152      __HAL_LOCK(hdac);
000004  bf00              NOP      
000006  7958              LDRB     r0,[r3,#5]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L11.16|
00000c  2002              MOVS     r0,#2
                  |L11.14|
;;;153      
;;;154      /* Change DAC state */
;;;155      hdac->State = HAL_DAC_STATE_BUSY;
;;;156      
;;;157      /* Enable the selected wave generation for the selected DAC channel */
;;;158      MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1 | DAC_CR_MAMP1) << Channel, (DAC_CR_WAVE1_1 | Amplitude) << Channel);
;;;159      
;;;160      /* Change DAC state */
;;;161      hdac->State = HAL_DAC_STATE_READY;
;;;162      
;;;163      /* Process unlocked */
;;;164      __HAL_UNLOCK(hdac);
;;;165      
;;;166      /* Return function status */
;;;167      return HAL_OK;
;;;168    }
00000e  bd10              POP      {r4,pc}
                  |L11.16|
000010  2001              MOVS     r0,#1                 ;152
000012  7158              STRB     r0,[r3,#5]            ;152
000014  bf00              NOP                            ;152
000016  2002              MOVS     r0,#2                 ;155
000018  7118              STRB     r0,[r3,#4]            ;155
00001a  6818              LDR      r0,[r3,#0]            ;158
00001c  6800              LDR      r0,[r0,#0]            ;158
00001e  f44f647c          MOV      r4,#0xfc0             ;158
000022  408c              LSLS     r4,r4,r1              ;158
000024  43a0              BICS     r0,r0,r4              ;158
000026  f0420480          ORR      r4,r2,#0x80           ;158
00002a  408c              LSLS     r4,r4,r1              ;158
00002c  4320              ORRS     r0,r0,r4              ;158
00002e  681c              LDR      r4,[r3,#0]            ;158
000030  6020              STR      r0,[r4,#0]            ;158
000032  2001              MOVS     r0,#1                 ;161
000034  7118              STRB     r0,[r3,#4]            ;161
000036  bf00              NOP                            ;164
000038  2000              MOVS     r0,#0                 ;164
00003a  7158              STRB     r0,[r3,#5]            ;164
00003c  bf00              NOP                            ;164
00003e  bf00              NOP                            ;167
000040  e7e5              B        |L11.14|
;;;169    
                          ENDP


;*** Start embedded assembler ***

#line 1 "HALLIB\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_dac_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_dac_ex_c_61546fcd____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_dac_ex_c_61546fcd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_dac_ex_c_61546fcd____REVSH|
#line 402
|__asm___22_stm32f4xx_hal_dac_ex_c_61546fcd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_dac_ex_c_61546fcd____RRX|
#line 587
|__asm___22_stm32f4xx_hal_dac_ex_c_61546fcd____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
