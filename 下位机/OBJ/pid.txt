; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\pid.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\pid.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\pid.crf App\PID.c]
                          THUMB

                          AREA ||i.Base_Speed_Task||, CODE, READONLY, ALIGN=2

                  Base_Speed_Task PROC
;;;117    }
;;;118    void Base_Speed_Task(void* pvParameters)   //底盘闭环PID
000000  ed2d8b04          VPUSH    {d8-d9}
;;;119    {
000004  b084              SUB      sp,sp,#0x10
;;;120    	while(1)
000006  e025              B        |L1.84|
                  |L1.8|
;;;121    	{
;;;122    		float Wheel_Speed[4];
;;;123    		//Chassis_Vy.User = PID_Get_Result(&Chassis_Victor_y);
;;;124    		//Chassis_Vx.User = PID_Get_Result(&Chassis_Victor_x);
;;;125    		Speed_To_Wheel(PID_Get_Result(&Chassis_Vx),PID_Get_Result(&Chassis_Vy),PID_Get_Result(&Chassis_Wz),Wheel_Speed);
000008  4813              LDR      r0,|L1.88|
00000a  f7fffffe          BL       PID_Get_Result
00000e  eeb08a40          VMOV.F32 s16,s0
000012  4812              LDR      r0,|L1.92|
000014  f7fffffe          BL       PID_Get_Result
000018  eef08a40          VMOV.F32 s17,s0
00001c  4810              LDR      r0,|L1.96|
00001e  f7fffffe          BL       PID_Get_Result
000022  eeb09a40          VMOV.F32 s18,s0
000026  4668              MOV      r0,sp
000028  eeb01a48          VMOV.F32 s2,s16
00002c  eef00a68          VMOV.F32 s1,s17
000030  f7fffffe          BL       Speed_To_Wheel
;;;126    		PID1.User=Wheel_Speed[0];
000034  490b              LDR      r1,|L1.100|
000036  9800              LDR      r0,[sp,#0]
000038  61c8              STR      r0,[r1,#0x1c]  ; PID1
;;;127    		PID2.User=Wheel_Speed[1];
00003a  490b              LDR      r1,|L1.104|
00003c  9801              LDR      r0,[sp,#4]
00003e  61c8              STR      r0,[r1,#0x1c]  ; PID2
;;;128    		PID3.User=Wheel_Speed[2];
000040  490a              LDR      r1,|L1.108|
000042  9802              LDR      r0,[sp,#8]
000044  61c8              STR      r0,[r1,#0x1c]  ; PID3
;;;129    		PID4.User=Wheel_Speed[3];
000046  490a              LDR      r1,|L1.112|
000048  9803              LDR      r0,[sp,#0xc]
00004a  61c8              STR      r0,[r1,#0x1c]  ; PID4
;;;130    		vTaskDelay(5);
00004c  2005              MOVS     r0,#5
00004e  f7fffffe          BL       vTaskDelay
;;;131    	}
000052  bf00              NOP      
                  |L1.84|
000054  e7d8              B        |L1.8|
;;;132    }
;;;133    #endif	//#if(USING_PID == 1)
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      Chassis_Wz
                  |L1.92|
                          DCD      Chassis_Vy
                  |L1.96|
                          DCD      Chassis_Vx
                  |L1.100|
                          DCD      PID1
                  |L1.104|
                          DCD      PID2
                  |L1.108|
                          DCD      PID3
                  |L1.112|
                          DCD      PID4

                          AREA ||i.PID_Calculate||, CODE, READONLY, ALIGN=2

                  PID_Calculate PROC
;;;103    }
;;;104    void PID_Calculate(void* pvParameters)
000000  b51c              PUSH     {r2-r4,lr}
;;;105    {
;;;106    	while(1)
000002  e06a              B        |L2.218|
                  |L2.4|
;;;107    	{
;;;108    		Renew_PID();
000004  f7fffffe          BL       Renew_PID
;;;109    		taskENTER_CRITICAL();
000008  f7fffffe          BL       vPortEnterCritical
;;;110    		PID8.User=PID_Get_Result(&Ball2_Angle);
00000c  4833              LDR      r0,|L2.220|
00000e  f7fffffe          BL       PID_Get_Result
000012  ee100a10          VMOV     r0,s0
000016  4932              LDR      r1,|L2.224|
000018  61c8              STR      r0,[r1,#0x1c]  ; PID8
;;;111    		PID7.User=PID_Get_Result(&Ball1_Angle);
00001a  4832              LDR      r0,|L2.228|
00001c  f7fffffe          BL       PID_Get_Result
000020  ee100a10          VMOV     r0,s0
000024  4930              LDR      r1,|L2.232|
000026  61c8              STR      r0,[r1,#0x1c]  ; PID7
;;;112    		set_moto_current(&hcan1,PID_Get_Result(&PID5),PID_Get_Result(&PID6),PID_Get_Result(&PID7),PID_Get_Result(&PID8),ID_5_8);  //ID为5~8的电机
000028  482d              LDR      r0,|L2.224|
00002a  f7fffffe          BL       PID_Get_Result
00002e  eebd0ac0          VCVT.S32.F32 s0,s0
000032  ee100a10          VMOV     r0,s0
000036  b204              SXTH     r4,r0
000038  482b              LDR      r0,|L2.232|
00003a  f7fffffe          BL       PID_Get_Result
00003e  eebd0ac0          VCVT.S32.F32 s0,s0
000042  ee100a10          VMOV     r0,s0
000046  b205              SXTH     r5,r0
000048  4828              LDR      r0,|L2.236|
00004a  f7fffffe          BL       PID_Get_Result
00004e  eebd0ac0          VCVT.S32.F32 s0,s0
000052  ee100a10          VMOV     r0,s0
000056  b206              SXTH     r6,r0
000058  4825              LDR      r0,|L2.240|
00005a  f7fffffe          BL       PID_Get_Result
00005e  eebd0ac0          VCVT.S32.F32 s0,s0
000062  ee100a10          VMOV     r0,s0
000066  b207              SXTH     r7,r0
000068  f24010ff          MOV      r0,#0x1ff
00006c  462b              MOV      r3,r5
00006e  4632              MOV      r2,r6
000070  4639              MOV      r1,r7
000072  e9cd4000          STRD     r4,r0,[sp,#0]
000076  481f              LDR      r0,|L2.244|
000078  f7fffffe          BL       set_moto_current
;;;113    		set_moto_current(&hcan1,PID_Get_Result(&PID1),PID_Get_Result(&PID2),PID_Get_Result(&PID3),PID_Get_Result(&PID4),ID_1_4);  //ID为1~4的电机
00007c  481e              LDR      r0,|L2.248|
00007e  f7fffffe          BL       PID_Get_Result
000082  eebd0ac0          VCVT.S32.F32 s0,s0
000086  ee100a10          VMOV     r0,s0
00008a  b204              SXTH     r4,r0
00008c  481b              LDR      r0,|L2.252|
00008e  f7fffffe          BL       PID_Get_Result
000092  eebd0ac0          VCVT.S32.F32 s0,s0
000096  ee100a10          VMOV     r0,s0
00009a  b205              SXTH     r5,r0
00009c  4818              LDR      r0,|L2.256|
00009e  f7fffffe          BL       PID_Get_Result
0000a2  eebd0ac0          VCVT.S32.F32 s0,s0
0000a6  ee100a10          VMOV     r0,s0
0000aa  b206              SXTH     r6,r0
0000ac  4815              LDR      r0,|L2.260|
0000ae  f7fffffe          BL       PID_Get_Result
0000b2  eebd0ac0          VCVT.S32.F32 s0,s0
0000b6  ee100a10          VMOV     r0,s0
0000ba  b207              SXTH     r7,r0
0000bc  f44f7000          MOV      r0,#0x200
0000c0  462b              MOV      r3,r5
0000c2  4632              MOV      r2,r6
0000c4  4639              MOV      r1,r7
0000c6  e9cd4000          STRD     r4,r0,[sp,#0]
0000ca  480a              LDR      r0,|L2.244|
0000cc  f7fffffe          BL       set_moto_current
;;;114    		taskEXIT_CRITICAL();
0000d0  f7fffffe          BL       vPortExitCritical
;;;115    		vTaskDelay(PID_Time);	
0000d4  2005              MOVS     r0,#5
0000d6  f7fffffe          BL       vTaskDelay
                  |L2.218|
0000da  e793              B        |L2.4|
;;;116    	}
;;;117    }
;;;118    void Base_Speed_Task(void* pvParameters)   //底盘闭环PID
                          ENDP

                  |L2.220|
                          DCD      Ball2_Angle
                  |L2.224|
                          DCD      PID8
                  |L2.228|
                          DCD      Ball1_Angle
                  |L2.232|
                          DCD      PID7
                  |L2.236|
                          DCD      PID6
                  |L2.240|
                          DCD      PID5
                  |L2.244|
                          DCD      hcan1
                  |L2.248|
                          DCD      PID4
                  |L2.252|
                          DCD      PID3
                  |L2.256|
                          DCD      PID2
                  |L2.260|
                          DCD      PID1

                          AREA ||i.PID_Get_Result||, CODE, READONLY, ALIGN=1

                  PID_Get_Result PROC
;;;85     }
;;;86     float PID_Get_Result(PID_Structure* PID_Handler)
000000  b510              PUSH     {r4,lr}
;;;87     {
000002  ed2d8b08          VPUSH    {d8-d11}
000006  4604              MOV      r4,r0
;;;88     			float Error=(PID_Handler->User-PID_Handler->Collect[0]);    //计算误差
000008  69e0              LDR      r0,[r4,#0x1c]
00000a  ee000a10          VMOV     s0,r0
00000e  6920              LDR      r0,[r4,#0x10]
000010  ee000a90          VMOV     s1,r0
000014  ee300a60          VSUB.F32 s0,s0,s1
000018  eeb08a40          VMOV.F32 s16,s0
;;;89     			PID_Handler->I_Sum = PID_Handler->I_Sum+(float)0.5*(float)((PID_Handler->User-PID_Handler->Collect[1])+Error);  //梯形积分
00001c  69e0              LDR      r0,[r4,#0x1c]
00001e  ee000a10          VMOV     s0,r0
000022  6960              LDR      r0,[r4,#0x14]
000024  ee000a90          VMOV     s1,r0
000028  ee300a60          VSUB.F32 s0,s0,s1
00002c  ee700a08          VADD.F32 s1,s0,s16
000030  69a0              LDR      r0,[r4,#0x18]
000032  ee000a10          VMOV     s0,r0
000036  eeb61a00          VMOV.F32 s2,#0.50000000
00003a  ee010a20          VMLA.F32 s0,s2,s1
00003e  ee100a10          VMOV     r0,s0
000042  61a0              STR      r0,[r4,#0x18]
;;;90     			if(fabs(PID_Handler->I_Sum) > PID_Handler->I_Sum_Max && PID_Handler->I_Sum > 0)
000044  6ae1              LDR      r1,[r4,#0x2c]
000046  4608              MOV      r0,r1
000048  f7fffffe          BL       __aeabi_f2d
00004c  ec410b19          VMOV     d9,r0,r1
000050  69a1              LDR      r1,[r4,#0x18]
000052  4608              MOV      r0,r1
000054  f7fffffe          BL       __aeabi_f2d
000058  ec410b1b          VMOV     d11,r0,r1
00005c  eeb00a4b          VMOV.F32 s0,s22
000060  eef00a6b          VMOV.F32 s1,s23
000064  f7fffffe          BL       __hardfp_fabs
000068  eeb0aa40          VMOV.F32 s20,s0
00006c  eef0aa60          VMOV.F32 s21,s1
000070  ec532b19          VMOV     r2,r3,d9
000074  ec510b1a          VMOV     r0,r1,d10
000078  f7fffffe          BL       __aeabi_cdrcmple
00007c  d20a              BCS      |L3.148|
00007e  69a0              LDR      r0,[r4,#0x18]
000080  ee000a10          VMOV     s0,r0
000084  eeb50ac0          VCMPE.F32 s0,#0.0
000088  eef1fa10          VMRS     APSR_nzcv,FPSCR
00008c  dd02              BLE      |L3.148|
;;;91     				PID_Handler->I_Sum = PID_Handler->I_Sum_Max;
00008e  6ae0              LDR      r0,[r4,#0x2c]
000090  61a0              STR      r0,[r4,#0x18]
000092  e02e              B        |L3.242|
                  |L3.148|
;;;92     			else if(fabs(PID_Handler->I_Sum) > PID_Handler->I_Sum_Max && PID_Handler->I_Sum < 0)
000094  6ae1              LDR      r1,[r4,#0x2c]
000096  4608              MOV      r0,r1
000098  f7fffffe          BL       __aeabi_f2d
00009c  ec410b19          VMOV     d9,r0,r1
0000a0  69a1              LDR      r1,[r4,#0x18]
0000a2  4608              MOV      r0,r1
0000a4  f7fffffe          BL       __aeabi_f2d
0000a8  ec410b1b          VMOV     d11,r0,r1
0000ac  eeb00a4b          VMOV.F32 s0,s22
0000b0  eef00a6b          VMOV.F32 s1,s23
0000b4  f7fffffe          BL       __hardfp_fabs
0000b8  eeb0aa40          VMOV.F32 s20,s0
0000bc  eef0aa60          VMOV.F32 s21,s1
0000c0  ec532b19          VMOV     r2,r3,d9
0000c4  ec510b1a          VMOV     r0,r1,d10
0000c8  f7fffffe          BL       __aeabi_cdrcmple
0000cc  d211              BCS      |L3.242|
0000ce  69a0              LDR      r0,[r4,#0x18]
0000d0  ee000a10          VMOV     s0,r0
0000d4  eeb50ac0          VCMPE.F32 s0,#0.0
0000d8  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000dc  d209              BCS      |L3.242|
;;;93     				PID_Handler->I_Sum = (-1.0f * PID_Handler->I_Sum_Max) ;
0000de  6ae0              LDR      r0,[r4,#0x2c]
0000e0  ee000a10          VMOV     s0,r0
0000e4  eeff0a00          VMOV.F32 s1,#-1.00000000
0000e8  ee200a20          VMUL.F32 s0,s0,s1
0000ec  ee100a10          VMOV     r0,s0
0000f0  61a0              STR      r0,[r4,#0x18]
                  |L3.242|
;;;94     			PID_Handler->Result = (PID_Handler->Kp)*Error
0000f2  6860              LDR      r0,[r4,#4]
0000f4  ee000a10          VMOV     s0,r0
0000f8  69a0              LDR      r0,[r4,#0x18]
0000fa  ee000a90          VMOV     s1,r0
0000fe  ee200a20          VMUL.F32 s0,s0,s1
000102  6820              LDR      r0,[r4,#0]
000104  ee000a90          VMOV     s1,r0
000108  ee000a88          VMLA.F32 s0,s1,s16
00010c  69e0              LDR      r0,[r4,#0x1c]
00010e  ee000a90          VMOV     s1,r0
000112  6960              LDR      r0,[r4,#0x14]
000114  ee010a10          VMOV     s2,r0
000118  ee700ac1          VSUB.F32 s1,s1,s2
00011c  ee301ac8          VSUB.F32 s2,s1,s16
000120  68a0              LDR      r0,[r4,#8]
000122  ee000a90          VMOV     s1,r0
000126  ee000a81          VMLA.F32 s0,s1,s2
00012a  68e0              LDR      r0,[r4,#0xc]
00012c  ee000a90          VMOV     s1,r0
000130  ee300a20          VADD.F32 s0,s0,s1
000134  ee100a10          VMOV     r0,s0
000138  6220              STR      r0,[r4,#0x20]
;;;95     														+ (PID_Handler->Ki * PID_Handler->I_Sum)
;;;96     														+ (PID_Handler->Kd * ((PID_Handler->User-PID_Handler->Collect[1])-Error))
;;;97     														+ (PID_Handler->Offset);
;;;98     			if(PID_Handler->Result > PID_Handler->Maxinum)
00013a  6a20              LDR      r0,[r4,#0x20]
00013c  ee000a10          VMOV     s0,r0
000140  6a60              LDR      r0,[r4,#0x24]
000142  ee000a90          VMOV     s1,r0
000146  eeb40ae0          VCMPE.F32 s0,s1
00014a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00014e  dd01              BLE      |L3.340|
;;;99     				PID_Handler->Result = PID_Handler->Maxinum;
000150  6a60              LDR      r0,[r4,#0x24]
000152  6220              STR      r0,[r4,#0x20]
                  |L3.340|
;;;100    			if(PID_Handler->Result < PID_Handler->Minium)
000154  6a20              LDR      r0,[r4,#0x20]
000156  ee000a10          VMOV     s0,r0
00015a  6aa0              LDR      r0,[r4,#0x28]
00015c  ee000a90          VMOV     s1,r0
000160  eeb40ae0          VCMPE.F32 s0,s1
000164  eef1fa10          VMRS     APSR_nzcv,FPSCR
000168  d201              BCS      |L3.366|
;;;101    				PID_Handler->Result = PID_Handler->Minium;
00016a  6aa0              LDR      r0,[r4,#0x28]
00016c  6220              STR      r0,[r4,#0x20]
                  |L3.366|
;;;102    			return PID_Handler->Result;
00016e  6a20              LDR      r0,[r4,#0x20]
000170  ee000a10          VMOV     s0,r0
;;;103    }
000174  ecbd8b08          VPOP     {d8-d11}
000178  bd10              POP      {r4,pc}
;;;104    void PID_Calculate(void* pvParameters)
                          ENDP


                          AREA ||i.PID_Renew||, CODE, READONLY, ALIGN=1

                  PID_Renew PROC
;;;19     PID_Structure Ball1_Angle;
;;;20     void PID_Renew(PID_Structure* PID_Handler,float new_data)
000000  6901              LDR      r1,[r0,#0x10]
;;;21     {
;;;22     	PID_Handler->Collect[1] = PID_Handler->Collect[0];
000002  6141              STR      r1,[r0,#0x14]
;;;23     	PID_Handler->Collect[0] = new_data;
000004  ee101a10          VMOV     r1,s0
000008  6101              STR      r1,[r0,#0x10]
;;;24     }
00000a  4770              BX       lr
;;;25     void Set_PID(PID_Structure* PID_Handler,unsigned char Device_Mode)
                          ENDP


                          AREA ||i.Set_PID||, CODE, READONLY, ALIGN=2

                  Set_PID PROC
;;;24     }
;;;25     void Set_PID(PID_Structure* PID_Handler,unsigned char Device_Mode)
000000  2907              CMP      r1,#7
;;;26     {
;;;27     	switch(Device_Mode)
000002  d223              BCS      |L5.76|
000004  e8dff001          TBB      [pc,r1]
000008  04234261          DCB      0x04,0x23,0x42,0x61
00000c  9f80be00          DCB      0x9f,0x80,0xbe,0x00
;;;28     	{
;;;29     		case M2006_SPEED:
;;;30     			PID_Handler->Kp = 3;
000010  eeb00a08          VMOV.F32 s0,#3.00000000
000014  ee102a10          VMOV     r2,s0
000018  6002              STR      r2,[r0,#0]
;;;31     			PID_Handler->Ki = 0.1;
00001a  ed9f0a6b          VLDR     s0,|L5.456|
00001e  ee102a10          VMOV     r2,s0
000022  6042              STR      r2,[r0,#4]
;;;32     			PID_Handler->Kd = 0.1;
000024  ed9f0a68          VLDR     s0,|L5.456|
000028  ee102a10          VMOV     r2,s0
00002c  6082              STR      r2,[r0,#8]
;;;33     			PID_Handler->I_Sum_Max = 10000;
00002e  ed9f0a67          VLDR     s0,|L5.460|
000032  ee102a10          VMOV     r2,s0
000036  62c2              STR      r2,[r0,#0x2c]
;;;34     			PID_Handler->Maxinum = 10000;
000038  ed9f0a64          VLDR     s0,|L5.460|
00003c  ee102a10          VMOV     r2,s0
000040  6242              STR      r2,[r0,#0x24]
;;;35     			PID_Handler->Minium = -10000;
000042  ed9f0a63          VLDR     s0,|L5.464|
000046  ee102a10          VMOV     r2,s0
00004a  6282              STR      r2,[r0,#0x28]
                  |L5.76|
;;;36     			break;
00004c  e0b9              B        |L5.450|
;;;37     		case M2006_ANGLE:
;;;38     			PID_Handler->Kp = 0.05;
00004e  ed9f0a61          VLDR     s0,|L5.468|
000052  ee102a10          VMOV     r2,s0
000056  6002              STR      r2,[r0,#0]
;;;39     			PID_Handler->Ki = 0.01;
000058  ed9f0a5f          VLDR     s0,|L5.472|
00005c  ee102a10          VMOV     r2,s0
000060  6042              STR      r2,[r0,#4]
;;;40     			PID_Handler->Kd = 0;
000062  ed9f0a5e          VLDR     s0,|L5.476|
000066  ee102a10          VMOV     r2,s0
00006a  6082              STR      r2,[r0,#8]
;;;41     			PID_Handler->I_Sum_Max = 10000;
00006c  ed9f0a57          VLDR     s0,|L5.460|
000070  ee102a10          VMOV     r2,s0
000074  62c2              STR      r2,[r0,#0x2c]
;;;42     			PID_Handler->Maxinum = 10000;
000076  ed9f0a55          VLDR     s0,|L5.460|
00007a  ee102a10          VMOV     r2,s0
00007e  6242              STR      r2,[r0,#0x24]
;;;43     			PID_Handler->Minium = -10000;
000080  ed9f0a53          VLDR     s0,|L5.464|
000084  ee102a10          VMOV     r2,s0
000088  6282              STR      r2,[r0,#0x28]
;;;44     			break;
00008a  e09a              B        |L5.450|
;;;45     		case M3508_SPEED:
;;;46     			PID_Handler->Kp = 10;
00008c  eeb20a04          VMOV.F32 s0,#10.00000000
000090  ee102a10          VMOV     r2,s0
000094  6002              STR      r2,[r0,#0]
;;;47     			PID_Handler->Ki = 0.1;
000096  ed9f0a4c          VLDR     s0,|L5.456|
00009a  ee102a10          VMOV     r2,s0
00009e  6042              STR      r2,[r0,#4]
;;;48     			PID_Handler->Kd = 0;
0000a0  ed9f0a4e          VLDR     s0,|L5.476|
0000a4  ee102a10          VMOV     r2,s0
0000a8  6082              STR      r2,[r0,#8]
;;;49     			PID_Handler->I_Sum_Max = 10000;
0000aa  ed9f0a48          VLDR     s0,|L5.460|
0000ae  ee102a10          VMOV     r2,s0
0000b2  62c2              STR      r2,[r0,#0x2c]
;;;50     			PID_Handler->Maxinum = 16384;
0000b4  ed9f0a4a          VLDR     s0,|L5.480|
0000b8  ee102a10          VMOV     r2,s0
0000bc  6242              STR      r2,[r0,#0x24]
;;;51     			PID_Handler->Minium = -16384;
0000be  ed9f0a49          VLDR     s0,|L5.484|
0000c2  ee102a10          VMOV     r2,s0
0000c6  6282              STR      r2,[r0,#0x28]
;;;52     			break;
0000c8  e07b              B        |L5.450|
;;;53     		case M3508_ANGLE:
;;;54     			PID_Handler->Kp = 0.5;
0000ca  eeb60a00          VMOV.F32 s0,#0.50000000
0000ce  ee102a10          VMOV     r2,s0
0000d2  6002              STR      r2,[r0,#0]
;;;55     			PID_Handler->Ki = 0.01;
0000d4  ed9f0a40          VLDR     s0,|L5.472|
0000d8  ee102a10          VMOV     r2,s0
0000dc  6042              STR      r2,[r0,#4]
;;;56     			PID_Handler->Kd = 0.02;
0000de  ed9f0a42          VLDR     s0,|L5.488|
0000e2  ee102a10          VMOV     r2,s0
0000e6  6082              STR      r2,[r0,#8]
;;;57     			PID_Handler->I_Sum_Max = 15000;
0000e8  ed9f0a40          VLDR     s0,|L5.492|
0000ec  ee102a10          VMOV     r2,s0
0000f0  62c2              STR      r2,[r0,#0x2c]
;;;58     			PID_Handler->Maxinum = 16384;
0000f2  ed9f0a3b          VLDR     s0,|L5.480|
0000f6  ee102a10          VMOV     r2,s0
0000fa  6242              STR      r2,[r0,#0x24]
;;;59     			PID_Handler->Minium = -16384;
0000fc  ed9f0a39          VLDR     s0,|L5.484|
000100  ee102a10          VMOV     r2,s0
000104  6282              STR      r2,[r0,#0x28]
;;;60     			break;
000106  e05c              B        |L5.450|
;;;61     		case M3510_ANGLE:
;;;62     			PID_Handler->Kp = 2;
000108  eeb00a00          VMOV.F32 s0,#2.00000000
00010c  ee102a10          VMOV     r2,s0
000110  6002              STR      r2,[r0,#0]
;;;63     			PID_Handler->Ki = 0.01;
000112  ed9f0a31          VLDR     s0,|L5.472|
000116  ee102a10          VMOV     r2,s0
00011a  6042              STR      r2,[r0,#4]
;;;64     			PID_Handler->Kd = 0;
00011c  ed9f0a2f          VLDR     s0,|L5.476|
000120  ee102a10          VMOV     r2,s0
000124  6082              STR      r2,[r0,#8]
;;;65     			PID_Handler->I_Sum_Max = 10000;
000126  ed9f0a29          VLDR     s0,|L5.460|
00012a  ee102a10          VMOV     r2,s0
00012e  62c2              STR      r2,[r0,#0x2c]
;;;66     			PID_Handler->Maxinum = 29000;
000130  ed9f0a2f          VLDR     s0,|L5.496|
000134  ee102a10          VMOV     r2,s0
000138  6242              STR      r2,[r0,#0x24]
;;;67     			PID_Handler->Minium = -29000;
00013a  ed9f0a2e          VLDR     s0,|L5.500|
00013e  ee102a10          VMOV     r2,s0
000142  6282              STR      r2,[r0,#0x28]
;;;68     		case M3510_SPEED:
000144  bf00              NOP      
;;;69     			PID_Handler->Kp = 1;
000146  eeb70a00          VMOV.F32 s0,#1.00000000
00014a  ee102a10          VMOV     r2,s0
00014e  6002              STR      r2,[r0,#0]
;;;70     			PID_Handler->Ki = 0;
000150  ed9f0a22          VLDR     s0,|L5.476|
000154  ee102a10          VMOV     r2,s0
000158  6042              STR      r2,[r0,#4]
;;;71     			PID_Handler->Kd = 0;
00015a  ed9f0a20          VLDR     s0,|L5.476|
00015e  ee102a10          VMOV     r2,s0
000162  6082              STR      r2,[r0,#8]
;;;72     			PID_Handler->I_Sum_Max = 10000;
000164  ed9f0a19          VLDR     s0,|L5.460|
000168  ee102a10          VMOV     r2,s0
00016c  62c2              STR      r2,[r0,#0x2c]
;;;73     			PID_Handler->Maxinum = 29000;
00016e  ed9f0a20          VLDR     s0,|L5.496|
000172  ee102a10          VMOV     r2,s0
000176  6242              STR      r2,[r0,#0x24]
;;;74     			PID_Handler->Minium = -29000;
000178  ed9f0a1e          VLDR     s0,|L5.500|
00017c  ee102a10          VMOV     r2,s0
000180  6282              STR      r2,[r0,#0x28]
;;;75     			break;
000182  e01e              B        |L5.450|
;;;76     		case CASCADE_ANGLE:
;;;77     			PID_Handler->Kp = 0.05;
000184  ed9f0a13          VLDR     s0,|L5.468|
000188  ee102a10          VMOV     r2,s0
00018c  6002              STR      r2,[r0,#0]
;;;78     			PID_Handler->Ki = 0;
00018e  ed9f0a13          VLDR     s0,|L5.476|
000192  ee102a10          VMOV     r2,s0
000196  6042              STR      r2,[r0,#4]
;;;79     			PID_Handler->Kd = 0;
000198  ed9f0a10          VLDR     s0,|L5.476|
00019c  ee102a10          VMOV     r2,s0
0001a0  6082              STR      r2,[r0,#8]
;;;80     			PID_Handler->I_Sum_Max = 10000;
0001a2  ed9f0a0a          VLDR     s0,|L5.460|
0001a6  ee102a10          VMOV     r2,s0
0001aa  62c2              STR      r2,[r0,#0x2c]
;;;81     			PID_Handler->Maxinum = 30000;
0001ac  ed9f0a12          VLDR     s0,|L5.504|
0001b0  ee102a10          VMOV     r2,s0
0001b4  6242              STR      r2,[r0,#0x24]
;;;82     			PID_Handler->Minium = -30000;
0001b6  ed9f0a11          VLDR     s0,|L5.508|
0001ba  ee102a10          VMOV     r2,s0
0001be  6282              STR      r2,[r0,#0x28]
;;;83     			break;
0001c0  bf00              NOP      
                  |L5.450|
0001c2  bf00              NOP                            ;36
;;;84     	}
;;;85     }
0001c4  4770              BX       lr
;;;86     float PID_Get_Result(PID_Structure* PID_Handler)
                          ENDP

0001c6  0000              DCW      0x0000
                  |L5.456|
0001c8  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
                  |L5.460|
0001cc  461c4000          DCFS     0x461c4000 ; 10000
                  |L5.464|
0001d0  c61c4000          DCFS     0xc61c4000 ; -10000
                  |L5.468|
0001d4  3d4ccccd          DCFS     0x3d4ccccd ; 0.05000000074505806
                  |L5.472|
0001d8  3c23d70a          DCFS     0x3c23d70a ; 0.0099999997764825821
                  |L5.476|
0001dc  00000000          DCFS     0x00000000 ; 0
                  |L5.480|
0001e0  46800000          DCFS     0x46800000 ; 16384
                  |L5.484|
0001e4  c6800000          DCFS     0xc6800000 ; -16384
                  |L5.488|
0001e8  3ca3d70a          DCFS     0x3ca3d70a ; 0.019999999552965164
                  |L5.492|
0001ec  466a6000          DCFS     0x466a6000 ; 15000
                  |L5.496|
0001f0  46e29000          DCFS     0x46e29000 ; 29000
                  |L5.500|
0001f4  c6e29000          DCFS     0xc6e29000 ; -29000
                  |L5.504|
0001f8  46ea6000          DCFS     0x46ea6000 ; 30000
                  |L5.508|
0001fc  c6ea6000          DCFS     0xc6ea6000 ; -30000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  PID1
                          %        48
                  PID2
                          %        48
                  PID3
                          %        48
                  PID4
                          %        48
                  PID5
                          %        48
                  PID6
                          %        48
                  PID7
                          %        48
                  PID8
                          %        48
                  Chassis_Wz
                          %        48
                  Chassis_Vx
                          %        48
                  Chassis_Vy
                          %        48
                  Chassis_Victor_y
                          %        48
                  Chassis_Victor_x
                          %        48
                  Ball2_Angle
                          %        48
                  Ball1_Angle
                          %        48

;*** Start embedded assembler ***

#line 1 "App\\PID.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_PID_c_359c619b____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___5_PID_c_359c619b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_PID_c_359c619b____REVSH|
#line 402
|__asm___5_PID_c_359c619b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_PID_c_359c619b____RRX|
#line 587
|__asm___5_PID_c_359c619b____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
