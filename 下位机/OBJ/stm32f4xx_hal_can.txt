; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_hal_can.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm32f4xx_hal_can.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm32f4xx_hal_can.crf HALLIB\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_can.c]
                          THUMB

                          AREA ||i.CAN_Receive_IT||, CODE, READONLY, ALIGN=1

                  CAN_Receive_IT PROC
;;;1348     */
;;;1349   static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
000000  b570              PUSH     {r4-r6,lr}
;;;1350   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1351     /* Get the Id */
;;;1352     hcan->pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
000006  6820              LDR      r0,[r4,#0]
000008  f50070d8          ADD      r0,r0,#0x1b0
00000c  eb001005          ADD      r0,r0,r5,LSL #4
000010  6800              LDR      r0,[r0,#0]
000012  f0000004          AND      r0,r0,#4
000016  6b61              LDR      r1,[r4,#0x34]
000018  6088              STR      r0,[r1,#8]
;;;1353     if (hcan->pRxMsg->IDE == CAN_ID_STD)
00001a  6b60              LDR      r0,[r4,#0x34]
00001c  6880              LDR      r0,[r0,#8]
00001e  b960              CBNZ     r0,|L1.58|
;;;1354     {
;;;1355       hcan->pRxMsg->StdId = (uint32_t)0x000007FF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21);
000020  6820              LDR      r0,[r4,#0]
000022  f50070d8          ADD      r0,r0,#0x1b0
000026  eb001005          ADD      r0,r0,r5,LSL #4
00002a  6800              LDR      r0,[r0,#0]
00002c  f24071ff          MOV      r1,#0x7ff
000030  ea015050          AND      r0,r1,r0,LSR #21
000034  6b61              LDR      r1,[r4,#0x34]
000036  6008              STR      r0,[r1,#0]
000038  e00b              B        |L1.82|
                  |L1.58|
;;;1356     }
;;;1357     else
;;;1358     {
;;;1359       hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
00003a  6820              LDR      r0,[r4,#0]
00003c  f50070d8          ADD      r0,r0,#0x1b0
000040  eb001005          ADD      r0,r0,r5,LSL #4
000044  6800              LDR      r0,[r0,#0]
000046  f06f4160          MVN      r1,#0xe0000000
00004a  ea0100d0          AND      r0,r1,r0,LSR #3
00004e  6b61              LDR      r1,[r4,#0x34]
000050  6048              STR      r0,[r1,#4]
                  |L1.82|
;;;1360     }
;;;1361     
;;;1362     hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
000052  6820              LDR      r0,[r4,#0]
000054  f50070d8          ADD      r0,r0,#0x1b0
000058  eb001005          ADD      r0,r0,r5,LSL #4
00005c  6800              LDR      r0,[r0,#0]
00005e  f0000002          AND      r0,r0,#2
000062  6b61              LDR      r1,[r4,#0x34]
000064  60c8              STR      r0,[r1,#0xc]
;;;1363     /* Get the DLC */
;;;1364     hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
000066  6820              LDR      r0,[r4,#0]
000068  f50070d8          ADD      r0,r0,#0x1b0
00006c  eb001005          ADD      r0,r0,r5,LSL #4
000070  6840              LDR      r0,[r0,#4]
000072  f000000f          AND      r0,r0,#0xf
000076  6b61              LDR      r1,[r4,#0x34]
000078  6108              STR      r0,[r1,#0x10]
;;;1365     /* Get the FMI */
;;;1366     hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
00007a  6820              LDR      r0,[r4,#0]
00007c  f50070d8          ADD      r0,r0,#0x1b0
000080  eb001005          ADD      r0,r0,r5,LSL #4
000084  6840              LDR      r0,[r0,#4]
000086  f3c02007          UBFX     r0,r0,#8,#8
00008a  6b61              LDR      r1,[r4,#0x34]
00008c  61c8              STR      r0,[r1,#0x1c]
;;;1367     /* Get the data field */
;;;1368     hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
00008e  6820              LDR      r0,[r4,#0]
000090  f50070d8          ADD      r0,r0,#0x1b0
000094  eb001005          ADD      r0,r0,r5,LSL #4
000098  6880              LDR      r0,[r0,#8]
00009a  6b61              LDR      r1,[r4,#0x34]
00009c  7508              STRB     r0,[r1,#0x14]
;;;1369     hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
00009e  6820              LDR      r0,[r4,#0]
0000a0  f50070d8          ADD      r0,r0,#0x1b0
0000a4  eb001005          ADD      r0,r0,r5,LSL #4
0000a8  6880              LDR      r0,[r0,#8]
0000aa  0a01              LSRS     r1,r0,#8
0000ac  6b60              LDR      r0,[r4,#0x34]
0000ae  7541              STRB     r1,[r0,#0x15]
;;;1370     hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
0000b0  6820              LDR      r0,[r4,#0]
0000b2  f50070d8          ADD      r0,r0,#0x1b0
0000b6  eb001005          ADD      r0,r0,r5,LSL #4
0000ba  6880              LDR      r0,[r0,#8]
0000bc  0c01              LSRS     r1,r0,#16
0000be  6b60              LDR      r0,[r4,#0x34]
0000c0  7581              STRB     r1,[r0,#0x16]
;;;1371     hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
0000c2  6820              LDR      r0,[r4,#0]
0000c4  f50070d8          ADD      r0,r0,#0x1b0
0000c8  eb001005          ADD      r0,r0,r5,LSL #4
0000cc  6880              LDR      r0,[r0,#8]
0000ce  0e00              LSRS     r0,r0,#24
0000d0  6b61              LDR      r1,[r4,#0x34]
0000d2  75c8              STRB     r0,[r1,#0x17]
;;;1372     hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
0000d4  6820              LDR      r0,[r4,#0]
0000d6  f50070d8          ADD      r0,r0,#0x1b0
0000da  eb001005          ADD      r0,r0,r5,LSL #4
0000de  68c0              LDR      r0,[r0,#0xc]
0000e0  b2c1              UXTB     r1,r0
0000e2  6b60              LDR      r0,[r4,#0x34]
0000e4  7601              STRB     r1,[r0,#0x18]
;;;1373     hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
0000e6  6820              LDR      r0,[r4,#0]
0000e8  f50070d8          ADD      r0,r0,#0x1b0
0000ec  eb001005          ADD      r0,r0,r5,LSL #4
0000f0  68c0              LDR      r0,[r0,#0xc]
0000f2  0a01              LSRS     r1,r0,#8
0000f4  6b60              LDR      r0,[r4,#0x34]
0000f6  7641              STRB     r1,[r0,#0x19]
;;;1374     hcan->pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16);
0000f8  6820              LDR      r0,[r4,#0]
0000fa  f50070d8          ADD      r0,r0,#0x1b0
0000fe  eb001005          ADD      r0,r0,r5,LSL #4
000102  68c0              LDR      r0,[r0,#0xc]
000104  0c01              LSRS     r1,r0,#16
000106  6b60              LDR      r0,[r4,#0x34]
000108  7681              STRB     r1,[r0,#0x1a]
;;;1375     hcan->pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24);
00010a  6820              LDR      r0,[r4,#0]
00010c  f50070d8          ADD      r0,r0,#0x1b0
000110  eb001005          ADD      r0,r0,r5,LSL #4
000114  68c0              LDR      r0,[r0,#0xc]
000116  0e00              LSRS     r0,r0,#24
000118  6b61              LDR      r1,[r4,#0x34]
00011a  76c8              STRB     r0,[r1,#0x1b]
;;;1376     /* Release the FIFO */
;;;1377     /* Release FIFO0 */
;;;1378     if (FIFONumber == CAN_FIFO0)
00011c  b94d              CBNZ     r5,|L1.306|
;;;1379     {
;;;1380       __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
00011e  2020              MOVS     r0,#0x20
000120  6821              LDR      r1,[r4,#0]
000122  60c8              STR      r0,[r1,#0xc]
;;;1381       
;;;1382       /* Disable FIFO 0 message pending Interrupt */
;;;1383       __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP0);
000124  6820              LDR      r0,[r4,#0]
000126  6940              LDR      r0,[r0,#0x14]
000128  f0200002          BIC      r0,r0,#2
00012c  6821              LDR      r1,[r4,#0]
00012e  6148              STR      r0,[r1,#0x14]
000130  e008              B        |L1.324|
                  |L1.306|
;;;1384     }
;;;1385     /* Release FIFO1 */
;;;1386     else /* FIFONumber == CAN_FIFO1 */
;;;1387     {
;;;1388       __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
000132  2020              MOVS     r0,#0x20
000134  6821              LDR      r1,[r4,#0]
000136  6108              STR      r0,[r1,#0x10]
;;;1389       
;;;1390       /* Disable FIFO 1 message pending Interrupt */
;;;1391       __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
000138  6820              LDR      r0,[r4,#0]
00013a  6940              LDR      r0,[r0,#0x14]
00013c  f0200010          BIC      r0,r0,#0x10
000140  6821              LDR      r1,[r4,#0]
000142  6148              STR      r0,[r1,#0x14]
                  |L1.324|
;;;1392     }
;;;1393     
;;;1394     if(hcan->State == HAL_CAN_STATE_BUSY_RX)
000144  f8940038          LDRB     r0,[r4,#0x38]
000148  2822              CMP      r0,#0x22
00014a  d11d              BNE      |L1.392|
;;;1395     {   
;;;1396       /* Disable Error warning Interrupt */
;;;1397       __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG);
00014c  6820              LDR      r0,[r4,#0]
00014e  6940              LDR      r0,[r0,#0x14]
000150  f4207080          BIC      r0,r0,#0x100
000154  6821              LDR      r1,[r4,#0]
000156  6148              STR      r0,[r1,#0x14]
;;;1398       
;;;1399       /* Disable Error passive Interrupt */
;;;1400       __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EPV);
000158  6820              LDR      r0,[r4,#0]
00015a  6940              LDR      r0,[r0,#0x14]
00015c  f4207000          BIC      r0,r0,#0x200
000160  6821              LDR      r1,[r4,#0]
000162  6148              STR      r0,[r1,#0x14]
;;;1401       
;;;1402       /* Disable Bus-off Interrupt */
;;;1403       __HAL_CAN_DISABLE_IT(hcan, CAN_IT_BOF);
000164  6820              LDR      r0,[r4,#0]
000166  6940              LDR      r0,[r0,#0x14]
000168  f4206080          BIC      r0,r0,#0x400
00016c  6821              LDR      r1,[r4,#0]
00016e  6148              STR      r0,[r1,#0x14]
;;;1404       
;;;1405       /* Disable Last error code Interrupt */
;;;1406       __HAL_CAN_DISABLE_IT(hcan, CAN_IT_LEC);
000170  6820              LDR      r0,[r4,#0]
000172  6940              LDR      r0,[r0,#0x14]
000174  f4206000          BIC      r0,r0,#0x800
000178  6821              LDR      r1,[r4,#0]
00017a  6148              STR      r0,[r1,#0x14]
;;;1407       
;;;1408       /* Disable Error Interrupt */
;;;1409       __HAL_CAN_DISABLE_IT(hcan, CAN_IT_ERR);
00017c  6820              LDR      r0,[r4,#0]
00017e  6940              LDR      r0,[r0,#0x14]
000180  f4204000          BIC      r0,r0,#0x8000
000184  6821              LDR      r1,[r4,#0]
000186  6148              STR      r0,[r1,#0x14]
                  |L1.392|
;;;1410     }
;;;1411     
;;;1412     if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
000188  f8940038          LDRB     r0,[r4,#0x38]
00018c  2832              CMP      r0,#0x32
00018e  d103              BNE      |L1.408|
;;;1413     {
;;;1414       /* Disable CAN state */
;;;1415       hcan->State = HAL_CAN_STATE_BUSY_TX;
000190  2012              MOVS     r0,#0x12
000192  f8840038          STRB     r0,[r4,#0x38]
000196  e002              B        |L1.414|
                  |L1.408|
;;;1416     }
;;;1417     else
;;;1418     {
;;;1419       /* Change CAN state */
;;;1420       hcan->State = HAL_CAN_STATE_READY;
000198  2001              MOVS     r0,#1
00019a  f8840038          STRB     r0,[r4,#0x38]
                  |L1.414|
;;;1421     }
;;;1422   
;;;1423     /* Receive complete callback */ 
;;;1424     HAL_CAN_RxCpltCallback(hcan);
00019e  4620              MOV      r0,r4
0001a0  f7fffffe          BL       HAL_CAN_RxCpltCallback
;;;1425   
;;;1426     /* Return function status */
;;;1427     return HAL_OK;
0001a4  2000              MOVS     r0,#0
;;;1428   }
0001a6  bd70              POP      {r4-r6,pc}
;;;1429   
                          ENDP


                          AREA ||i.CAN_Transmit_IT||, CODE, READONLY, ALIGN=1

                  CAN_Transmit_IT PROC
;;;1300     */
;;;1301   static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
000000  b510              PUSH     {r4,lr}
;;;1302   {
000002  4604              MOV      r4,r0
;;;1303     /* Disable Transmit mailbox empty Interrupt */
;;;1304     __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
000004  6820              LDR      r0,[r4,#0]
000006  6940              LDR      r0,[r0,#0x14]
000008  f0200001          BIC      r0,r0,#1
00000c  6821              LDR      r1,[r4,#0]
00000e  6148              STR      r0,[r1,#0x14]
;;;1305     
;;;1306     if(hcan->State == HAL_CAN_STATE_BUSY_TX)
000010  f8940038          LDRB     r0,[r4,#0x38]
000014  2812              CMP      r0,#0x12
000016  d11d              BNE      |L2.84|
;;;1307     {   
;;;1308       /* Disable Error warning Interrupt */
;;;1309       __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG);
000018  6820              LDR      r0,[r4,#0]
00001a  6940              LDR      r0,[r0,#0x14]
00001c  f4207080          BIC      r0,r0,#0x100
000020  6821              LDR      r1,[r4,#0]
000022  6148              STR      r0,[r1,#0x14]
;;;1310       
;;;1311       /* Disable Error passive Interrupt */
;;;1312       __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EPV);
000024  6820              LDR      r0,[r4,#0]
000026  6940              LDR      r0,[r0,#0x14]
000028  f4207000          BIC      r0,r0,#0x200
00002c  6821              LDR      r1,[r4,#0]
00002e  6148              STR      r0,[r1,#0x14]
;;;1313       
;;;1314       /* Disable Bus-off Interrupt */
;;;1315       __HAL_CAN_DISABLE_IT(hcan, CAN_IT_BOF);
000030  6820              LDR      r0,[r4,#0]
000032  6940              LDR      r0,[r0,#0x14]
000034  f4206080          BIC      r0,r0,#0x400
000038  6821              LDR      r1,[r4,#0]
00003a  6148              STR      r0,[r1,#0x14]
;;;1316       
;;;1317       /* Disable Last error code Interrupt */
;;;1318       __HAL_CAN_DISABLE_IT(hcan, CAN_IT_LEC);
00003c  6820              LDR      r0,[r4,#0]
00003e  6940              LDR      r0,[r0,#0x14]
000040  f4206000          BIC      r0,r0,#0x800
000044  6821              LDR      r1,[r4,#0]
000046  6148              STR      r0,[r1,#0x14]
;;;1319       
;;;1320       /* Disable Error Interrupt */
;;;1321       __HAL_CAN_DISABLE_IT(hcan, CAN_IT_ERR);
000048  6820              LDR      r0,[r4,#0]
00004a  6940              LDR      r0,[r0,#0x14]
00004c  f4204000          BIC      r0,r0,#0x8000
000050  6821              LDR      r1,[r4,#0]
000052  6148              STR      r0,[r1,#0x14]
                  |L2.84|
;;;1322     }
;;;1323     
;;;1324     if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
000054  f8940038          LDRB     r0,[r4,#0x38]
000058  2832              CMP      r0,#0x32
00005a  d103              BNE      |L2.100|
;;;1325     {
;;;1326       /* Change CAN state */
;;;1327       hcan->State = HAL_CAN_STATE_BUSY_RX;
00005c  2022              MOVS     r0,#0x22
00005e  f8840038          STRB     r0,[r4,#0x38]
000062  e002              B        |L2.106|
                  |L2.100|
;;;1328     }
;;;1329     else
;;;1330     {
;;;1331       /* Change CAN state */
;;;1332       hcan->State = HAL_CAN_STATE_READY;
000064  2001              MOVS     r0,#1
000066  f8840038          STRB     r0,[r4,#0x38]
                  |L2.106|
;;;1333     }
;;;1334     
;;;1335     /* Transmission complete callback */ 
;;;1336     HAL_CAN_TxCpltCallback(hcan);
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       HAL_CAN_TxCpltCallback
;;;1337     
;;;1338     return HAL_OK;
000070  2000              MOVS     r0,#0
;;;1339   }
000072  bd10              POP      {r4,pc}
;;;1340   
                          ENDP


                          AREA ||i.HAL_CAN_ConfigFilter||, CODE, READONLY, ALIGN=2

                  HAL_CAN_ConfigFilter PROC
;;;358      */
;;;359    HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
000000  b530              PUSH     {r4,r5,lr}
;;;360    {
000002  4603              MOV      r3,r0
;;;361      uint32_t filternbrbitpos = 0;
000004  2200              MOVS     r2,#0
;;;362      
;;;363      /* Check the parameters */
;;;364      assert_param(IS_CAN_FILTER_NUMBER(sFilterConfig->FilterNumber));
;;;365      assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
;;;366      assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
;;;367      assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
;;;368      assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
;;;369      assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
;;;370      
;;;371      filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
000006  7d0c              LDRB     r4,[r1,#0x14]
000008  2001              MOVS     r0,#1
00000a  fa00f204          LSL      r2,r0,r4
;;;372    
;;;373      /* Initialisation mode for the filter */
;;;374      CAN1->FMR |= (uint32_t)CAN_FMR_FINIT;
00000e  4846              LDR      r0,|L3.296|
000010  6800              LDR      r0,[r0,#0]
000012  f0400001          ORR      r0,r0,#1
000016  4c44              LDR      r4,|L3.296|
000018  6020              STR      r0,[r4,#0]
;;;375      
;;;376      /* Select the start slave bank */
;;;377      CAN1->FMR &= ~((uint32_t)CAN_FMR_CAN2SB);
00001a  4620              MOV      r0,r4
00001c  6800              LDR      r0,[r0,#0]
00001e  f420507c          BIC      r0,r0,#0x3f00
000022  6020              STR      r0,[r4,#0]
;;;378      CAN1->FMR |= (uint32_t)(sFilterConfig->BankNumber << 8);
000024  4620              MOV      r0,r4
000026  6800              LDR      r0,[r0,#0]
000028  6a4c              LDR      r4,[r1,#0x24]
00002a  ea402004          ORR      r0,r0,r4,LSL #8
00002e  4c3e              LDR      r4,|L3.296|
000030  6020              STR      r0,[r4,#0]
;;;379         
;;;380      /* Filter Deactivation */
;;;381      CAN1->FA1R &= ~(uint32_t)filternbrbitpos;
000032  483d              LDR      r0,|L3.296|
000034  301c              ADDS     r0,r0,#0x1c
000036  6800              LDR      r0,[r0,#0]
000038  4390              BICS     r0,r0,r2
00003a  4c3b              LDR      r4,|L3.296|
00003c  341c              ADDS     r4,r4,#0x1c
00003e  6020              STR      r0,[r4,#0]
;;;382    
;;;383      /* Filter Scale */
;;;384      if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
000040  69c8              LDR      r0,[r1,#0x1c]
000042  b9d8              CBNZ     r0,|L3.124|
;;;385      {
;;;386        /* 16-bit scale for the filter */
;;;387        CAN1->FS1R &= ~(uint32_t)filternbrbitpos;
000044  4838              LDR      r0,|L3.296|
000046  300c              ADDS     r0,r0,#0xc
000048  6800              LDR      r0,[r0,#0]
00004a  4390              BICS     r0,r0,r2
00004c  4c36              LDR      r4,|L3.296|
00004e  340c              ADDS     r4,r4,#0xc
000050  6020              STR      r0,[r4,#0]
;;;388    
;;;389        /* First 16-bit identifier and First 16-bit mask */
;;;390        /* Or First 16-bit identifier and Second 16-bit identifier */
;;;391        CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
000052  8888              LDRH     r0,[r1,#4]
000054  b280              UXTH     r0,r0
000056  898c              LDRH     r4,[r1,#0xc]
000058  ea404404          ORR      r4,r0,r4,LSL #16
00005c  4832              LDR      r0,|L3.296|
00005e  3040              ADDS     r0,r0,#0x40
000060  694d              LDR      r5,[r1,#0x14]
000062  f8404035          STR      r4,[r0,r5,LSL #3]
;;;392           ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
;;;393            (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
;;;394    
;;;395        /* Second 16-bit identifier and Second 16-bit mask */
;;;396        /* Or Third 16-bit identifier and Fourth 16-bit identifier */
;;;397        CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
000066  8808              LDRH     r0,[r1,#0]
000068  b280              UXTH     r0,r0
00006a  890c              LDRH     r4,[r1,#8]
00006c  ea404404          ORR      r4,r0,r4,LSL #16
000070  482d              LDR      r0,|L3.296|
000072  3040              ADDS     r0,r0,#0x40
000074  694d              LDR      r5,[r1,#0x14]
000076  eb0000c5          ADD      r0,r0,r5,LSL #3
00007a  6044              STR      r4,[r0,#4]
                  |L3.124|
;;;398           ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
;;;399            (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
;;;400      }
;;;401    
;;;402      if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
00007c  69c8              LDR      r0,[r1,#0x1c]
00007e  2801              CMP      r0,#1
000080  d11b              BNE      |L3.186|
;;;403      {
;;;404        /* 32-bit scale for the filter */
;;;405        CAN1->FS1R |= filternbrbitpos;
000082  4829              LDR      r0,|L3.296|
000084  300c              ADDS     r0,r0,#0xc
000086  6800              LDR      r0,[r0,#0]
000088  4310              ORRS     r0,r0,r2
00008a  4c27              LDR      r4,|L3.296|
00008c  340c              ADDS     r4,r4,#0xc
00008e  6020              STR      r0,[r4,#0]
;;;406        /* 32-bit identifier or First 32-bit identifier */
;;;407        CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
000090  8888              LDRH     r0,[r1,#4]
000092  b280              UXTH     r0,r0
000094  880c              LDRH     r4,[r1,#0]
000096  ea404404          ORR      r4,r0,r4,LSL #16
00009a  4823              LDR      r0,|L3.296|
00009c  3040              ADDS     r0,r0,#0x40
00009e  694d              LDR      r5,[r1,#0x14]
0000a0  f8404035          STR      r4,[r0,r5,LSL #3]
;;;408           ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
;;;409            (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
;;;410        /* 32-bit mask or Second 32-bit identifier */
;;;411        CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
0000a4  8988              LDRH     r0,[r1,#0xc]
0000a6  b280              UXTH     r0,r0
0000a8  890c              LDRH     r4,[r1,#8]
0000aa  ea404404          ORR      r4,r0,r4,LSL #16
0000ae  481e              LDR      r0,|L3.296|
0000b0  3040              ADDS     r0,r0,#0x40
0000b2  694d              LDR      r5,[r1,#0x14]
0000b4  eb0000c5          ADD      r0,r0,r5,LSL #3
0000b8  6044              STR      r4,[r0,#4]
                  |L3.186|
;;;412           ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
;;;413            (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
;;;414      }
;;;415    
;;;416      /* Filter Mode */
;;;417      if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
0000ba  6988              LDR      r0,[r1,#0x18]
0000bc  b938              CBNZ     r0,|L3.206|
;;;418      {
;;;419        /*Id/Mask mode for the filter*/
;;;420        CAN1->FM1R &= ~(uint32_t)filternbrbitpos;
0000be  481a              LDR      r0,|L3.296|
0000c0  1d00              ADDS     r0,r0,#4
0000c2  6800              LDR      r0,[r0,#0]
0000c4  4390              BICS     r0,r0,r2
0000c6  4c18              LDR      r4,|L3.296|
0000c8  1d24              ADDS     r4,r4,#4
0000ca  6020              STR      r0,[r4,#0]
0000cc  e006              B        |L3.220|
                  |L3.206|
;;;421      }
;;;422      else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
;;;423      {
;;;424        /*Identifier list mode for the filter*/
;;;425        CAN1->FM1R |= (uint32_t)filternbrbitpos;
0000ce  4816              LDR      r0,|L3.296|
0000d0  1d00              ADDS     r0,r0,#4
0000d2  6800              LDR      r0,[r0,#0]
0000d4  4310              ORRS     r0,r0,r2
0000d6  4c14              LDR      r4,|L3.296|
0000d8  1d24              ADDS     r4,r4,#4
0000da  6020              STR      r0,[r4,#0]
                  |L3.220|
;;;426      }
;;;427    
;;;428      /* Filter FIFO assignment */
;;;429      if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
0000dc  6908              LDR      r0,[r1,#0x10]
0000de  b930              CBNZ     r0,|L3.238|
;;;430      {
;;;431        /* FIFO 0 assignation for the filter */
;;;432        CAN1->FFA1R &= ~(uint32_t)filternbrbitpos;
0000e0  4811              LDR      r0,|L3.296|
0000e2  3014              ADDS     r0,r0,#0x14
0000e4  6800              LDR      r0,[r0,#0]
0000e6  4390              BICS     r0,r0,r2
0000e8  4c0f              LDR      r4,|L3.296|
0000ea  3414              ADDS     r4,r4,#0x14
0000ec  6020              STR      r0,[r4,#0]
                  |L3.238|
;;;433      }
;;;434    
;;;435      if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO1)
0000ee  6908              LDR      r0,[r1,#0x10]
0000f0  2801              CMP      r0,#1
0000f2  d106              BNE      |L3.258|
;;;436      {
;;;437        /* FIFO 1 assignation for the filter */
;;;438        CAN1->FFA1R |= (uint32_t)filternbrbitpos;
0000f4  480c              LDR      r0,|L3.296|
0000f6  3014              ADDS     r0,r0,#0x14
0000f8  6800              LDR      r0,[r0,#0]
0000fa  4310              ORRS     r0,r0,r2
0000fc  4c0a              LDR      r4,|L3.296|
0000fe  3414              ADDS     r4,r4,#0x14
000100  6020              STR      r0,[r4,#0]
                  |L3.258|
;;;439      }
;;;440      
;;;441      /* Filter activation */
;;;442      if (sFilterConfig->FilterActivation == ENABLE)
000102  6a08              LDR      r0,[r1,#0x20]
000104  2801              CMP      r0,#1
000106  d106              BNE      |L3.278|
;;;443      {
;;;444        CAN1->FA1R |= filternbrbitpos;
000108  4807              LDR      r0,|L3.296|
00010a  301c              ADDS     r0,r0,#0x1c
00010c  6800              LDR      r0,[r0,#0]
00010e  4310              ORRS     r0,r0,r2
000110  4c05              LDR      r4,|L3.296|
000112  341c              ADDS     r4,r4,#0x1c
000114  6020              STR      r0,[r4,#0]
                  |L3.278|
;;;445      }
;;;446    
;;;447      /* Leave the initialisation mode for the filter */
;;;448      CAN1->FMR &= ~((uint32_t)CAN_FMR_FINIT);
000116  4804              LDR      r0,|L3.296|
000118  6800              LDR      r0,[r0,#0]
00011a  f0200001          BIC      r0,r0,#1
00011e  4c02              LDR      r4,|L3.296|
000120  6020              STR      r0,[r4,#0]
;;;449      
;;;450      /* Return function status */
;;;451      return HAL_OK;
000122  2000              MOVS     r0,#0
;;;452    }
000124  bd30              POP      {r4,r5,pc}
;;;453    
                          ENDP

000126  0000              DCW      0x0000
                  |L3.296|
                          DCD      0x40006600

                          AREA ||i.HAL_CAN_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_CAN_DeInit PROC
;;;459      */
;;;460    HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef* hcan)
000000  b510              PUSH     {r4,lr}
;;;461    {
000002  4604              MOV      r4,r0
;;;462      /* Check CAN handle */
;;;463      if(hcan == NULL)
000004  b90c              CBNZ     r4,|L4.10|
;;;464      {
;;;465         return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L4.8|
;;;466      }
;;;467      
;;;468      /* Check the parameters */
;;;469      assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
;;;470      
;;;471      /* Change CAN state */
;;;472      hcan->State = HAL_CAN_STATE_BUSY;
;;;473      
;;;474      /* DeInit the low level hardware */
;;;475      HAL_CAN_MspDeInit(hcan);
;;;476      
;;;477      /* Change CAN state */
;;;478      hcan->State = HAL_CAN_STATE_RESET;
;;;479    
;;;480      /* Release Lock */
;;;481      __HAL_UNLOCK(hcan);
;;;482    
;;;483      /* Return function status */
;;;484      return HAL_OK;
;;;485    }
000008  bd10              POP      {r4,pc}
                  |L4.10|
00000a  2002              MOVS     r0,#2                 ;472
00000c  f8840038          STRB     r0,[r4,#0x38]         ;472
000010  4620              MOV      r0,r4                 ;475
000012  f7fffffe          BL       HAL_CAN_MspDeInit
000016  2000              MOVS     r0,#0                 ;478
000018  f8840038          STRB     r0,[r4,#0x38]         ;478
00001c  bf00              NOP                            ;481
00001e  f8840039          STRB     r0,[r4,#0x39]         ;481
000022  bf00              NOP                            ;481
000024  bf00              NOP                            ;484
000026  e7ef              B        |L4.8|
;;;486    
                          ENDP


                          AREA ||i.HAL_CAN_ErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_CAN_ErrorCallback PROC
;;;1239     */
;;;1240   __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
000000  4770              BX       lr
;;;1241   {
;;;1242     /* Prevent unused argument(s) compilation warning */
;;;1243     UNUSED(hcan);
;;;1244     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1245               the HAL_CAN_ErrorCallback could be implemented in the user file
;;;1246      */
;;;1247   }
;;;1248   
                          ENDP


                          AREA ||i.HAL_CAN_GetError||, CODE, READONLY, ALIGN=1

                  HAL_CAN_GetError PROC
;;;1286     */
;;;1287   uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
000000  4601              MOV      r1,r0
;;;1288   {
;;;1289     return hcan->ErrorCode;
000002  6bc8              LDR      r0,[r1,#0x3c]
;;;1290   }
000004  4770              BX       lr
;;;1291   
                          ENDP


                          AREA ||i.HAL_CAN_GetState||, CODE, READONLY, ALIGN=1

                  HAL_CAN_GetState PROC
;;;1274     */
;;;1275   HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef* hcan)
000000  4601              MOV      r1,r0
;;;1276   {
;;;1277     /* Return CAN state */
;;;1278     return hcan->State;
000002  f8910038          LDRB     r0,[r1,#0x38]
;;;1279   }
000006  4770              BX       lr
;;;1280   
                          ENDP


                          AREA ||i.HAL_CAN_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_CAN_IRQHandler PROC
;;;1085     */
;;;1086   void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1087   {
000004  4604              MOV      r4,r0
;;;1088     uint32_t tmp1 = 0, tmp2 = 0, tmp3 = 0;
000006  2500              MOVS     r5,#0
000008  2600              MOVS     r6,#0
00000a  2700              MOVS     r7,#0
;;;1089     
;;;1090     /* Check End of transmission flag */
;;;1091     if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
00000c  6820              LDR      r0,[r4,#0]
00000e  6940              LDR      r0,[r0,#0x14]
000010  f0000001          AND      r0,r0,#1
000014  b318              CBZ      r0,|L8.94|
;;;1092     {
;;;1093       tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
000016  6820              LDR      r0,[r4,#0]
000018  6880              LDR      r0,[r0,#8]
00001a  4969              LDR      r1,|L8.448|
00001c  4008              ANDS     r0,r0,r1
00001e  4288              CMP      r0,r1
000020  d101              BNE      |L8.38|
000022  2001              MOVS     r0,#1
000024  e000              B        |L8.40|
                  |L8.38|
000026  2000              MOVS     r0,#0
                  |L8.40|
000028  4605              MOV      r5,r0
;;;1094       tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
00002a  6820              LDR      r0,[r4,#0]
00002c  6880              LDR      r0,[r0,#8]
00002e  4965              LDR      r1,|L8.452|
000030  4008              ANDS     r0,r0,r1
000032  4288              CMP      r0,r1
000034  d101              BNE      |L8.58|
000036  2001              MOVS     r0,#1
000038  e000              B        |L8.60|
                  |L8.58|
00003a  2000              MOVS     r0,#0
                  |L8.60|
00003c  4606              MOV      r6,r0
;;;1095       tmp3 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2);
00003e  6820              LDR      r0,[r4,#0]
000040  6880              LDR      r0,[r0,#8]
000042  4961              LDR      r1,|L8.456|
000044  4008              ANDS     r0,r0,r1
000046  4288              CMP      r0,r1
000048  d101              BNE      |L8.78|
00004a  2001              MOVS     r0,#1
00004c  e000              B        |L8.80|
                  |L8.78|
00004e  2000              MOVS     r0,#0
                  |L8.80|
000050  4607              MOV      r7,r0
;;;1096       if(tmp1 || tmp2 || tmp3)  
000052  b90d              CBNZ     r5,|L8.88|
000054  b906              CBNZ     r6,|L8.88|
000056  b117              CBZ      r7,|L8.94|
                  |L8.88|
;;;1097       {
;;;1098         /* Call transmit function */
;;;1099         CAN_Transmit_IT(hcan);
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       CAN_Transmit_IT
                  |L8.94|
;;;1100       }
;;;1101     }
;;;1102     
;;;1103     tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0);
00005e  6820              LDR      r0,[r4,#0]
000060  68c0              LDR      r0,[r0,#0xc]
000062  f0000503          AND      r5,r0,#3
;;;1104     tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0);
000066  6820              LDR      r0,[r4,#0]
000068  6940              LDR      r0,[r0,#0x14]
00006a  f3c00640          UBFX     r6,r0,#1,#1
;;;1105     /* Check End of reception flag for FIFO0 */
;;;1106     if((tmp1 != 0) && tmp2)
00006e  b125              CBZ      r5,|L8.122|
000070  b11e              CBZ      r6,|L8.122|
;;;1107     {
;;;1108       /* Call receive function */
;;;1109       CAN_Receive_IT(hcan, CAN_FIFO0);
000072  2100              MOVS     r1,#0
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       CAN_Receive_IT
                  |L8.122|
;;;1110     }
;;;1111     
;;;1112     tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1);
00007a  6820              LDR      r0,[r4,#0]
00007c  6900              LDR      r0,[r0,#0x10]
00007e  f0000503          AND      r5,r0,#3
;;;1113     tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1);
000082  6820              LDR      r0,[r4,#0]
000084  6940              LDR      r0,[r0,#0x14]
000086  f3c01600          UBFX     r6,r0,#4,#1
;;;1114     /* Check End of reception flag for FIFO1 */
;;;1115     if((tmp1 != 0) && tmp2)
00008a  b125              CBZ      r5,|L8.150|
00008c  b11e              CBZ      r6,|L8.150|
;;;1116     {
;;;1117       /* Call receive function */
;;;1118       CAN_Receive_IT(hcan, CAN_FIFO1);
00008e  2101              MOVS     r1,#1
000090  4620              MOV      r0,r4
000092  f7fffffe          BL       CAN_Receive_IT
                  |L8.150|
;;;1119     }
;;;1120     
;;;1121     tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
000096  6820              LDR      r0,[r4,#0]
000098  6980              LDR      r0,[r0,#0x18]
00009a  f0000501          AND      r5,r0,#1
;;;1122     tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG);
00009e  6820              LDR      r0,[r4,#0]
0000a0  6940              LDR      r0,[r0,#0x14]
0000a2  f3c02600          UBFX     r6,r0,#8,#1
;;;1123     tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
0000a6  6820              LDR      r0,[r4,#0]
0000a8  6940              LDR      r0,[r0,#0x14]
0000aa  f3c037c0          UBFX     r7,r0,#15,#1
;;;1124     /* Check Error Warning Flag */
;;;1125     if(tmp1 && tmp2 && tmp3)
0000ae  b12d              CBZ      r5,|L8.188|
0000b0  b126              CBZ      r6,|L8.188|
0000b2  b11f              CBZ      r7,|L8.188|
;;;1126     {
;;;1127       /* Set CAN error code to EWG error */
;;;1128       hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
0000b4  6be0              LDR      r0,[r4,#0x3c]
0000b6  f0400001          ORR      r0,r0,#1
0000ba  63e0              STR      r0,[r4,#0x3c]
                  |L8.188|
;;;1129     }
;;;1130     
;;;1131     tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV);
0000bc  6820              LDR      r0,[r4,#0]
0000be  6980              LDR      r0,[r0,#0x18]
0000c0  f3c00540          UBFX     r5,r0,#1,#1
;;;1132     tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV);
0000c4  6820              LDR      r0,[r4,#0]
0000c6  6940              LDR      r0,[r0,#0x14]
0000c8  f3c02640          UBFX     r6,r0,#9,#1
;;;1133     tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR); 
0000cc  6820              LDR      r0,[r4,#0]
0000ce  6940              LDR      r0,[r0,#0x14]
0000d0  f3c037c0          UBFX     r7,r0,#15,#1
;;;1134     /* Check Error Passive Flag */
;;;1135     if(tmp1 && tmp2 && tmp3)
0000d4  b12d              CBZ      r5,|L8.226|
0000d6  b126              CBZ      r6,|L8.226|
0000d8  b11f              CBZ      r7,|L8.226|
;;;1136     {
;;;1137       /* Set CAN error code to EPV error */
;;;1138       hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
0000da  6be0              LDR      r0,[r4,#0x3c]
0000dc  f0400002          ORR      r0,r0,#2
0000e0  63e0              STR      r0,[r4,#0x3c]
                  |L8.226|
;;;1139     }
;;;1140     
;;;1141     tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF);
0000e2  6820              LDR      r0,[r4,#0]
0000e4  6980              LDR      r0,[r0,#0x18]
0000e6  f3c00580          UBFX     r5,r0,#2,#1
;;;1142     tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF);
0000ea  6820              LDR      r0,[r4,#0]
0000ec  6940              LDR      r0,[r0,#0x14]
0000ee  f3c02680          UBFX     r6,r0,#10,#1
;;;1143     tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);  
0000f2  6820              LDR      r0,[r4,#0]
0000f4  6940              LDR      r0,[r0,#0x14]
0000f6  f3c037c0          UBFX     r7,r0,#15,#1
;;;1144     /* Check Bus-Off Flag */
;;;1145     if(tmp1 && tmp2 && tmp3)
0000fa  b12d              CBZ      r5,|L8.264|
0000fc  b126              CBZ      r6,|L8.264|
0000fe  b11f              CBZ      r7,|L8.264|
;;;1146     {
;;;1147       /* Set CAN error code to BOF error */
;;;1148       hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
000100  6be0              LDR      r0,[r4,#0x3c]
000102  f0400004          ORR      r0,r0,#4
000106  63e0              STR      r0,[r4,#0x3c]
                  |L8.264|
;;;1149     }
;;;1150     
;;;1151     tmp1 = HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC);
000108  6820              LDR      r0,[r4,#0]
00010a  6980              LDR      r0,[r0,#0x18]
00010c  f0000070          AND      r0,r0,#0x70
000110  b908              CBNZ     r0,|L8.278|
000112  2001              MOVS     r0,#1
000114  e000              B        |L8.280|
                  |L8.278|
000116  2000              MOVS     r0,#0
                  |L8.280|
000118  4605              MOV      r5,r0
;;;1152     tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC);
00011a  6820              LDR      r0,[r4,#0]
00011c  6940              LDR      r0,[r0,#0x14]
00011e  f3c026c0          UBFX     r6,r0,#11,#1
;;;1153     tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
000122  6820              LDR      r0,[r4,#0]
000124  6940              LDR      r0,[r0,#0x14]
000126  f3c037c0          UBFX     r7,r0,#15,#1
;;;1154     /* Check Last error code Flag */
;;;1155     if((!tmp1) && tmp2 && tmp3)
00012a  bb95              CBNZ     r5,|L8.402|
00012c  b38e              CBZ      r6,|L8.402|
00012e  b387              CBZ      r7,|L8.402|
;;;1156     {
;;;1157       tmp1 = (hcan->Instance->ESR) & CAN_ESR_LEC;
000130  6820              LDR      r0,[r4,#0]
000132  6980              LDR      r0,[r0,#0x18]
000134  f0000570          AND      r5,r0,#0x70
;;;1158       switch(tmp1)
000138  2d40              CMP      r5,#0x40
00013a  d01b              BEQ      |L8.372|
00013c  dc06              BGT      |L8.332|
00013e  2d10              CMP      r5,#0x10
000140  d009              BEQ      |L8.342|
000142  2d20              CMP      r5,#0x20
000144  d00c              BEQ      |L8.352|
000146  2d30              CMP      r5,#0x30
000148  d124              BNE      |L8.404|
00014a  e00e              B        |L8.362|
                  |L8.332|
00014c  2d50              CMP      r5,#0x50
00014e  d016              BEQ      |L8.382|
000150  2d60              CMP      r5,#0x60
000152  d11f              BNE      |L8.404|
000154  e018              B        |L8.392|
                  |L8.342|
;;;1159       {
;;;1160         case(CAN_ESR_LEC_0):
;;;1161             /* Set CAN error code to STF error */
;;;1162             hcan->ErrorCode |= HAL_CAN_ERROR_STF;
000156  6be0              LDR      r0,[r4,#0x3c]
000158  f0400008          ORR      r0,r0,#8
00015c  63e0              STR      r0,[r4,#0x3c]
;;;1163             break;
00015e  e01a              B        |L8.406|
                  |L8.352|
;;;1164         case(CAN_ESR_LEC_1):
;;;1165             /* Set CAN error code to FOR error */
;;;1166             hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
000160  6be0              LDR      r0,[r4,#0x3c]
000162  f0400010          ORR      r0,r0,#0x10
000166  63e0              STR      r0,[r4,#0x3c]
;;;1167             break;
000168  e015              B        |L8.406|
                  |L8.362|
;;;1168         case(CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
;;;1169             /* Set CAN error code to ACK error */
;;;1170             hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
00016a  6be0              LDR      r0,[r4,#0x3c]
00016c  f0400020          ORR      r0,r0,#0x20
000170  63e0              STR      r0,[r4,#0x3c]
;;;1171             break;
000172  e010              B        |L8.406|
                  |L8.372|
;;;1172         case(CAN_ESR_LEC_2):
;;;1173             /* Set CAN error code to BR error */
;;;1174             hcan->ErrorCode |= HAL_CAN_ERROR_BR;
000174  6be0              LDR      r0,[r4,#0x3c]
000176  f0400040          ORR      r0,r0,#0x40
00017a  63e0              STR      r0,[r4,#0x3c]
;;;1175             break;
00017c  e00b              B        |L8.406|
                  |L8.382|
;;;1176         case(CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
;;;1177             /* Set CAN error code to BD error */
;;;1178             hcan->ErrorCode |= HAL_CAN_ERROR_BD;
00017e  6be0              LDR      r0,[r4,#0x3c]
000180  f0400080          ORR      r0,r0,#0x80
000184  63e0              STR      r0,[r4,#0x3c]
;;;1179             break;
000186  e006              B        |L8.406|
                  |L8.392|
;;;1180         case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
;;;1181             /* Set CAN error code to CRC error */
;;;1182             hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
000188  6be0              LDR      r0,[r4,#0x3c]
00018a  f4407080          ORR      r0,r0,#0x100
00018e  63e0              STR      r0,[r4,#0x3c]
;;;1183             break;
000190  e001              B        |L8.406|
                  |L8.402|
000192  e007              B        |L8.420|
                  |L8.404|
;;;1184         default:
;;;1185             break;
000194  bf00              NOP      
                  |L8.406|
000196  bf00              NOP                            ;1163
;;;1186       }
;;;1187   
;;;1188       /* Clear Last error code Flag */ 
;;;1189       hcan->Instance->ESR &= ~(CAN_ESR_LEC);
000198  6820              LDR      r0,[r4,#0]
00019a  6980              LDR      r0,[r0,#0x18]
00019c  f0200070          BIC      r0,r0,#0x70
0001a0  6821              LDR      r1,[r4,#0]
0001a2  6188              STR      r0,[r1,#0x18]
                  |L8.420|
;;;1190     }
;;;1191     
;;;1192     /* Call the Error call Back in case of Errors */
;;;1193     if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
0001a4  6be0              LDR      r0,[r4,#0x3c]
0001a6  b140              CBZ      r0,|L8.442|
;;;1194     {
;;;1195       /* Clear ERRI Flag */ 
;;;1196       hcan->Instance->MSR = CAN_MSR_ERRI; 
0001a8  2004              MOVS     r0,#4
0001aa  6821              LDR      r1,[r4,#0]
0001ac  6048              STR      r0,[r1,#4]
;;;1197       /* Set the CAN state ready to be able to start again the process */
;;;1198       hcan->State = HAL_CAN_STATE_READY;
0001ae  2001              MOVS     r0,#1
0001b0  f8840038          STRB     r0,[r4,#0x38]
;;;1199       /* Call Error callback function */
;;;1200       HAL_CAN_ErrorCallback(hcan);
0001b4  4620              MOV      r0,r4
0001b6  f7fffffe          BL       HAL_CAN_ErrorCallback
                  |L8.442|
;;;1201     }  
;;;1202   }
0001ba  e8bd81f0          POP      {r4-r8,pc}
;;;1203   
                          ENDP

0001be  0000              DCW      0x0000
                  |L8.448|
                          DCD      0x04000003
                  |L8.452|
                          DCD      0x08000300
                  |L8.456|
                          DCD      0x10030000

                          AREA ||i.HAL_CAN_Init||, CODE, READONLY, ALIGN=1

                  HAL_CAN_Init PROC
;;;167      */
;;;168    HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
000000  b570              PUSH     {r4-r6,lr}
;;;169    {
000002  4604              MOV      r4,r0
;;;170      uint32_t InitStatus = 3;
000004  2603              MOVS     r6,#3
;;;171      uint32_t tickstart = 0;
000006  2500              MOVS     r5,#0
;;;172      
;;;173      /* Check CAN handle */
;;;174      if(hcan == NULL)
000008  b90c              CBNZ     r4,|L9.14|
;;;175      {
;;;176         return HAL_ERROR;
00000a  2001              MOVS     r0,#1
                  |L9.12|
;;;177      }
;;;178      
;;;179      /* Check the parameters */
;;;180      assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
;;;181      assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TTCM));
;;;182      assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ABOM));
;;;183      assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AWUM));
;;;184      assert_param(IS_FUNCTIONAL_STATE(hcan->Init.NART));
;;;185      assert_param(IS_FUNCTIONAL_STATE(hcan->Init.RFLM));
;;;186      assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TXFP));
;;;187      assert_param(IS_CAN_MODE(hcan->Init.Mode));
;;;188      assert_param(IS_CAN_SJW(hcan->Init.SJW));
;;;189      assert_param(IS_CAN_BS1(hcan->Init.BS1));
;;;190      assert_param(IS_CAN_BS2(hcan->Init.BS2));
;;;191      assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
;;;192      
;;;193    
;;;194      if(hcan->State == HAL_CAN_STATE_RESET)
;;;195      {    
;;;196        /* Allocate lock resource and initialize it */
;;;197        hcan->Lock = HAL_UNLOCKED;
;;;198        /* Init the low level hardware */
;;;199        HAL_CAN_MspInit(hcan);
;;;200      }
;;;201      
;;;202      /* Initialize the CAN state*/
;;;203      hcan->State = HAL_CAN_STATE_BUSY;
;;;204      
;;;205      /* Exit from sleep mode */
;;;206      hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
;;;207    
;;;208      /* Request initialisation */
;;;209      hcan->Instance->MCR |= CAN_MCR_INRQ ;
;;;210      
;;;211      /* Get tick */
;;;212      tickstart = HAL_GetTick();
;;;213    
;;;214      /* Wait the acknowledge */
;;;215      while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
;;;216      {
;;;217        if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
;;;218        {
;;;219          hcan->State= HAL_CAN_STATE_TIMEOUT;
;;;220          /* Process unlocked */
;;;221          __HAL_UNLOCK(hcan);
;;;222          return HAL_TIMEOUT;
;;;223        }
;;;224      }
;;;225    
;;;226      /* Check acknowledge */
;;;227      if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
;;;228      {
;;;229        InitStatus = CAN_INITSTATUS_FAILED;
;;;230      }
;;;231      else 
;;;232      {
;;;233        /* Set the time triggered communication mode */
;;;234        if (hcan->Init.TTCM == ENABLE)
;;;235        {
;;;236          hcan->Instance->MCR |= CAN_MCR_TTCM;
;;;237        }
;;;238        else
;;;239        {
;;;240          hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
;;;241        }
;;;242    
;;;243        /* Set the automatic bus-off management */
;;;244        if (hcan->Init.ABOM == ENABLE)
;;;245        {
;;;246          hcan->Instance->MCR |= CAN_MCR_ABOM;
;;;247        }
;;;248        else
;;;249        {
;;;250          hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
;;;251        }
;;;252    
;;;253        /* Set the automatic wake-up mode */
;;;254        if (hcan->Init.AWUM == ENABLE)
;;;255        {
;;;256          hcan->Instance->MCR |= CAN_MCR_AWUM;
;;;257        }
;;;258        else
;;;259        {
;;;260          hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
;;;261        }
;;;262    
;;;263        /* Set the no automatic retransmission */
;;;264        if (hcan->Init.NART == ENABLE)
;;;265        {
;;;266          hcan->Instance->MCR |= CAN_MCR_NART;
;;;267        }
;;;268        else
;;;269        {
;;;270          hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
;;;271        }
;;;272    
;;;273        /* Set the receive FIFO locked mode */
;;;274        if (hcan->Init.RFLM == ENABLE)
;;;275        {
;;;276          hcan->Instance->MCR |= CAN_MCR_RFLM;
;;;277        }
;;;278        else
;;;279        {
;;;280          hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
;;;281        }
;;;282    
;;;283        /* Set the transmit FIFO priority */
;;;284        if (hcan->Init.TXFP == ENABLE)
;;;285        {
;;;286          hcan->Instance->MCR |= CAN_MCR_TXFP;
;;;287        }
;;;288        else
;;;289        {
;;;290          hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
;;;291        }
;;;292    
;;;293        /* Set the bit timing register */
;;;294        hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
;;;295                    ((uint32_t)hcan->Init.SJW) | \
;;;296                    ((uint32_t)hcan->Init.BS1) | \
;;;297                    ((uint32_t)hcan->Init.BS2) | \
;;;298                   ((uint32_t)hcan->Init.Prescaler - 1);
;;;299    
;;;300        /* Request leave initialisation */
;;;301        hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
;;;302    
;;;303      /* Get tick */
;;;304      tickstart = HAL_GetTick();
;;;305    
;;;306       /* Wait the acknowledge */
;;;307       while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
;;;308       {
;;;309        if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
;;;310         {
;;;311           hcan->State= HAL_CAN_STATE_TIMEOUT;
;;;312           /* Process unlocked */
;;;313           __HAL_UNLOCK(hcan);
;;;314           return HAL_TIMEOUT;
;;;315         }
;;;316       }
;;;317    
;;;318        /* Check acknowledged */
;;;319        if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
;;;320        {
;;;321          InitStatus = CAN_INITSTATUS_FAILED;
;;;322        }
;;;323        else
;;;324        {
;;;325          InitStatus = CAN_INITSTATUS_SUCCESS;
;;;326        }
;;;327      }
;;;328     
;;;329      if(InitStatus == CAN_INITSTATUS_SUCCESS)
;;;330      {
;;;331        /* Set CAN error code to none */
;;;332        hcan->ErrorCode = HAL_CAN_ERROR_NONE;
;;;333        
;;;334        /* Initialize the CAN state */
;;;335        hcan->State = HAL_CAN_STATE_READY;
;;;336      
;;;337        /* Return function status */
;;;338        return HAL_OK;
;;;339      }
;;;340      else
;;;341      {
;;;342        /* Initialize the CAN state */
;;;343        hcan->State = HAL_CAN_STATE_ERROR;
;;;344        
;;;345        /* Return function status */
;;;346        return HAL_ERROR;
;;;347      }
;;;348    }
00000c  bd70              POP      {r4-r6,pc}
                  |L9.14|
00000e  f8940038          LDRB     r0,[r4,#0x38]         ;194
000012  b928              CBNZ     r0,|L9.32|
000014  2000              MOVS     r0,#0                 ;197
000016  f8840039          STRB     r0,[r4,#0x39]         ;197
00001a  4620              MOV      r0,r4                 ;199
00001c  f7fffffe          BL       HAL_CAN_MspInit
                  |L9.32|
000020  2002              MOVS     r0,#2                 ;203
000022  f8840038          STRB     r0,[r4,#0x38]         ;203
000026  6820              LDR      r0,[r4,#0]            ;206
000028  6800              LDR      r0,[r0,#0]            ;206
00002a  f0200002          BIC      r0,r0,#2              ;206
00002e  6821              LDR      r1,[r4,#0]            ;206
000030  6008              STR      r0,[r1,#0]            ;206
000032  6820              LDR      r0,[r4,#0]            ;209
000034  6800              LDR      r0,[r0,#0]            ;209
000036  f0400001          ORR      r0,r0,#1              ;209
00003a  6821              LDR      r1,[r4,#0]            ;209
00003c  6008              STR      r0,[r1,#0]            ;209
00003e  f7fffffe          BL       HAL_GetTick
000042  4605              MOV      r5,r0                 ;212
000044  e00e              B        |L9.100|
                  |L9.70|
000046  f7fffffe          BL       HAL_GetTick
00004a  1b40              SUBS     r0,r0,r5              ;217
00004c  280a              CMP      r0,#0xa               ;217
00004e  d909              BLS      |L9.100|
000050  2003              MOVS     r0,#3                 ;219
000052  f8840038          STRB     r0,[r4,#0x38]         ;219
000056  bf00              NOP                            ;221
000058  2000              MOVS     r0,#0                 ;221
00005a  f8840039          STRB     r0,[r4,#0x39]         ;221
00005e  bf00              NOP                            ;221
000060  2003              MOVS     r0,#3                 ;222
000062  e7d3              B        |L9.12|
                  |L9.100|
000064  6820              LDR      r0,[r4,#0]            ;215
000066  6840              LDR      r0,[r0,#4]            ;215
000068  f0000001          AND      r0,r0,#1              ;215
00006c  2800              CMP      r0,#0                 ;215
00006e  d0ea              BEQ      |L9.70|
000070  6820              LDR      r0,[r4,#0]            ;227
000072  6840              LDR      r0,[r0,#4]            ;227
000074  f0000001          AND      r0,r0,#1              ;227
000078  b908              CBNZ     r0,|L9.126|
00007a  2600              MOVS     r6,#0                 ;229
00007c  e092              B        |L9.420|
                  |L9.126|
00007e  69a0              LDR      r0,[r4,#0x18]         ;234
000080  2801              CMP      r0,#1                 ;234
000082  d106              BNE      |L9.146|
000084  6820              LDR      r0,[r4,#0]            ;236
000086  6800              LDR      r0,[r0,#0]            ;236
000088  f0400080          ORR      r0,r0,#0x80           ;236
00008c  6821              LDR      r1,[r4,#0]            ;236
00008e  6008              STR      r0,[r1,#0]            ;236
000090  e005              B        |L9.158|
                  |L9.146|
000092  6820              LDR      r0,[r4,#0]            ;240
000094  6800              LDR      r0,[r0,#0]            ;240
000096  f0200080          BIC      r0,r0,#0x80           ;240
00009a  6821              LDR      r1,[r4,#0]            ;240
00009c  6008              STR      r0,[r1,#0]            ;240
                  |L9.158|
00009e  69e0              LDR      r0,[r4,#0x1c]         ;244
0000a0  2801              CMP      r0,#1                 ;244
0000a2  d106              BNE      |L9.178|
0000a4  6820              LDR      r0,[r4,#0]            ;246
0000a6  6800              LDR      r0,[r0,#0]            ;246
0000a8  f0400040          ORR      r0,r0,#0x40           ;246
0000ac  6821              LDR      r1,[r4,#0]            ;246
0000ae  6008              STR      r0,[r1,#0]            ;246
0000b0  e005              B        |L9.190|
                  |L9.178|
0000b2  6820              LDR      r0,[r4,#0]            ;250
0000b4  6800              LDR      r0,[r0,#0]            ;250
0000b6  f0200040          BIC      r0,r0,#0x40           ;250
0000ba  6821              LDR      r1,[r4,#0]            ;250
0000bc  6008              STR      r0,[r1,#0]            ;250
                  |L9.190|
0000be  6a20              LDR      r0,[r4,#0x20]         ;254
0000c0  2801              CMP      r0,#1                 ;254
0000c2  d106              BNE      |L9.210|
0000c4  6820              LDR      r0,[r4,#0]            ;256
0000c6  6800              LDR      r0,[r0,#0]            ;256
0000c8  f0400020          ORR      r0,r0,#0x20           ;256
0000cc  6821              LDR      r1,[r4,#0]            ;256
0000ce  6008              STR      r0,[r1,#0]            ;256
0000d0  e005              B        |L9.222|
                  |L9.210|
0000d2  6820              LDR      r0,[r4,#0]            ;260
0000d4  6800              LDR      r0,[r0,#0]            ;260
0000d6  f0200020          BIC      r0,r0,#0x20           ;260
0000da  6821              LDR      r1,[r4,#0]            ;260
0000dc  6008              STR      r0,[r1,#0]            ;260
                  |L9.222|
0000de  6a60              LDR      r0,[r4,#0x24]         ;264
0000e0  2801              CMP      r0,#1                 ;264
0000e2  d106              BNE      |L9.242|
0000e4  6820              LDR      r0,[r4,#0]            ;266
0000e6  6800              LDR      r0,[r0,#0]            ;266
0000e8  f0400010          ORR      r0,r0,#0x10           ;266
0000ec  6821              LDR      r1,[r4,#0]            ;266
0000ee  6008              STR      r0,[r1,#0]            ;266
0000f0  e005              B        |L9.254|
                  |L9.242|
0000f2  6820              LDR      r0,[r4,#0]            ;270
0000f4  6800              LDR      r0,[r0,#0]            ;270
0000f6  f0200010          BIC      r0,r0,#0x10           ;270
0000fa  6821              LDR      r1,[r4,#0]            ;270
0000fc  6008              STR      r0,[r1,#0]            ;270
                  |L9.254|
0000fe  6aa0              LDR      r0,[r4,#0x28]         ;274
000100  2801              CMP      r0,#1                 ;274
000102  d106              BNE      |L9.274|
000104  6820              LDR      r0,[r4,#0]            ;276
000106  6800              LDR      r0,[r0,#0]            ;276
000108  f0400008          ORR      r0,r0,#8              ;276
00010c  6821              LDR      r1,[r4,#0]            ;276
00010e  6008              STR      r0,[r1,#0]            ;276
000110  e005              B        |L9.286|
                  |L9.274|
000112  6820              LDR      r0,[r4,#0]            ;280
000114  6800              LDR      r0,[r0,#0]            ;280
000116  f0200008          BIC      r0,r0,#8              ;280
00011a  6821              LDR      r1,[r4,#0]            ;280
00011c  6008              STR      r0,[r1,#0]            ;280
                  |L9.286|
00011e  6ae0              LDR      r0,[r4,#0x2c]         ;284
000120  2801              CMP      r0,#1                 ;284
000122  d106              BNE      |L9.306|
000124  6820              LDR      r0,[r4,#0]            ;286
000126  6800              LDR      r0,[r0,#0]            ;286
000128  f0400004          ORR      r0,r0,#4              ;286
00012c  6821              LDR      r1,[r4,#0]            ;286
00012e  6008              STR      r0,[r1,#0]            ;286
000130  e005              B        |L9.318|
                  |L9.306|
000132  6820              LDR      r0,[r4,#0]            ;290
000134  6800              LDR      r0,[r0,#0]            ;290
000136  f0200004          BIC      r0,r0,#4              ;290
00013a  6821              LDR      r1,[r4,#0]            ;290
00013c  6008              STR      r0,[r1,#0]            ;290
                  |L9.318|
00013e  e9d40102          LDRD     r0,r1,[r4,#8]         ;294
000142  4308              ORRS     r0,r0,r1              ;294
000144  6921              LDR      r1,[r4,#0x10]         ;294
000146  4308              ORRS     r0,r0,r1              ;294
000148  6961              LDR      r1,[r4,#0x14]         ;294
00014a  4308              ORRS     r0,r0,r1              ;294
00014c  6861              LDR      r1,[r4,#4]            ;294
00014e  1e49              SUBS     r1,r1,#1              ;294
000150  4308              ORRS     r0,r0,r1              ;294
000152  6821              LDR      r1,[r4,#0]            ;294
000154  61c8              STR      r0,[r1,#0x1c]         ;294
000156  6820              LDR      r0,[r4,#0]            ;301
000158  6800              LDR      r0,[r0,#0]            ;301
00015a  f0200001          BIC      r0,r0,#1              ;301
00015e  6821              LDR      r1,[r4,#0]            ;301
000160  6008              STR      r0,[r1,#0]            ;301
000162  f7fffffe          BL       HAL_GetTick
000166  4605              MOV      r5,r0                 ;304
000168  e00e              B        |L9.392|
                  |L9.362|
00016a  f7fffffe          BL       HAL_GetTick
00016e  1b40              SUBS     r0,r0,r5              ;309
000170  280a              CMP      r0,#0xa               ;309
000172  d909              BLS      |L9.392|
000174  2003              MOVS     r0,#3                 ;311
000176  f8840038          STRB     r0,[r4,#0x38]         ;311
00017a  bf00              NOP                            ;313
00017c  2000              MOVS     r0,#0                 ;313
00017e  f8840039          STRB     r0,[r4,#0x39]         ;313
000182  bf00              NOP                            ;313
000184  2003              MOVS     r0,#3                 ;314
000186  e741              B        |L9.12|
                  |L9.392|
000188  6820              LDR      r0,[r4,#0]            ;307
00018a  6840              LDR      r0,[r0,#4]            ;307
00018c  f0000001          AND      r0,r0,#1              ;307
000190  2800              CMP      r0,#0                 ;307
000192  d1ea              BNE      |L9.362|
000194  6820              LDR      r0,[r4,#0]            ;319
000196  6840              LDR      r0,[r0,#4]            ;319
000198  f0000001          AND      r0,r0,#1              ;319
00019c  b108              CBZ      r0,|L9.418|
00019e  2600              MOVS     r6,#0                 ;321
0001a0  e000              B        |L9.420|
                  |L9.418|
0001a2  2601              MOVS     r6,#1                 ;325
                  |L9.420|
0001a4  2e01              CMP      r6,#1                 ;329
0001a6  d106              BNE      |L9.438|
0001a8  2000              MOVS     r0,#0                 ;332
0001aa  63e0              STR      r0,[r4,#0x3c]         ;332
0001ac  2001              MOVS     r0,#1                 ;335
0001ae  f8840038          STRB     r0,[r4,#0x38]         ;335
0001b2  2000              MOVS     r0,#0                 ;338
0001b4  e72a              B        |L9.12|
                  |L9.438|
0001b6  2004              MOVS     r0,#4                 ;343
0001b8  f8840038          STRB     r0,[r4,#0x38]         ;343
0001bc  2001              MOVS     r0,#1                 ;346
0001be  e725              B        |L9.12|
;;;349    
                          ENDP


                          AREA ||i.HAL_CAN_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_CAN_MspDeInit PROC
;;;507      */
;;;508    __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
000000  4770              BX       lr
;;;509    {
;;;510      /* Prevent unused argument(s) compilation warning */
;;;511      UNUSED(hcan);
;;;512      /* NOTE : This function Should not be modified, when the callback is needed,
;;;513                the HAL_CAN_MspDeInit could be implemented in the user file
;;;514       */ 
;;;515    }
;;;516    
                          ENDP


                          AREA ||i.HAL_CAN_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_CAN_MspInit PROC
;;;492      */
;;;493    __weak void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
000000  4770              BX       lr
;;;494    {
;;;495      /* Prevent unused argument(s) compilation warning */
;;;496      UNUSED(hcan);
;;;497      /* NOTE : This function Should not be modified, when the callback is needed,
;;;498                the HAL_CAN_MspInit could be implemented in the user file
;;;499       */ 
;;;500    }
;;;501    
                          ENDP


                          AREA ||i.HAL_CAN_Receive||, CODE, READONLY, ALIGN=1

                  HAL_CAN_Receive PROC
;;;800      */
;;;801    HAL_StatusTypeDef HAL_CAN_Receive(CAN_HandleTypeDef* hcan, uint8_t FIFONumber, uint32_t Timeout)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;802    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;803      uint32_t tickstart = 0;
00000a  2700              MOVS     r7,#0
;;;804       
;;;805      /* Check the parameters */
;;;806      assert_param(IS_CAN_FIFO(FIFONumber));
;;;807      
;;;808      /* Process locked */
;;;809      __HAL_LOCK(hcan);
00000c  bf00              NOP      
00000e  f8940039          LDRB     r0,[r4,#0x39]
000012  2801              CMP      r0,#1
000014  d102              BNE      |L12.28|
000016  2002              MOVS     r0,#2
                  |L12.24|
;;;810      
;;;811      if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
;;;812      {
;;;813        /* Change CAN state */
;;;814        hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
;;;815      }
;;;816      else
;;;817      {
;;;818        /* Change CAN state */
;;;819        hcan->State = HAL_CAN_STATE_BUSY_RX;
;;;820      }
;;;821        
;;;822      /* Get tick */ 
;;;823      tickstart = HAL_GetTick();
;;;824      
;;;825      /* Check pending message */
;;;826      while(__HAL_CAN_MSG_PENDING(hcan, FIFONumber) == 0)
;;;827      {
;;;828        /* Check for the Timeout */
;;;829        if(Timeout != HAL_MAX_DELAY)
;;;830        {
;;;831          if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
;;;832          {
;;;833            hcan->State = HAL_CAN_STATE_TIMEOUT;
;;;834            /* Process unlocked */
;;;835            __HAL_UNLOCK(hcan);
;;;836            return HAL_TIMEOUT;
;;;837          }
;;;838        }
;;;839      }
;;;840      
;;;841      /* Get the Id */
;;;842      hcan->pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
;;;843      if (hcan->pRxMsg->IDE == CAN_ID_STD)
;;;844      {
;;;845        hcan->pRxMsg->StdId = (uint32_t)0x000007FF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21);
;;;846      }
;;;847      else
;;;848      {
;;;849        hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
;;;850      }
;;;851      
;;;852      hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
;;;853      /* Get the DLC */
;;;854      hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
;;;855      /* Get the FMI */
;;;856      hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
;;;857      /* Get the data field */
;;;858      hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
;;;859      hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
;;;860      hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
;;;861      hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
;;;862      hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
;;;863      hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
;;;864      hcan->pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16);
;;;865      hcan->pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24);
;;;866      
;;;867      /* Release the FIFO */
;;;868      if(FIFONumber == CAN_FIFO0)
;;;869      {
;;;870        /* Release FIFO0 */
;;;871        __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
;;;872      }
;;;873      else /* FIFONumber == CAN_FIFO1 */
;;;874      {
;;;875        /* Release FIFO1 */
;;;876        __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
;;;877      }
;;;878      
;;;879      if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
;;;880      {
;;;881        /* Change CAN state */
;;;882        hcan->State = HAL_CAN_STATE_BUSY_TX;
;;;883        
;;;884        /* Process unlocked */
;;;885        __HAL_UNLOCK(hcan);
;;;886      }
;;;887      else
;;;888      {
;;;889        /* Change CAN state */
;;;890        hcan->State = HAL_CAN_STATE_READY;
;;;891        
;;;892        /* Process unlocked */
;;;893        __HAL_UNLOCK(hcan);
;;;894      }
;;;895      
;;;896      /* Return function status */
;;;897      return HAL_OK;
;;;898    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L12.28|
00001c  2001              MOVS     r0,#1                 ;809
00001e  f8840039          STRB     r0,[r4,#0x39]         ;809
000022  bf00              NOP                            ;809
000024  f8940038          LDRB     r0,[r4,#0x38]         ;811
000028  2812              CMP      r0,#0x12              ;811
00002a  d103              BNE      |L12.52|
00002c  2032              MOVS     r0,#0x32              ;814
00002e  f8840038          STRB     r0,[r4,#0x38]         ;814
000032  e002              B        |L12.58|
                  |L12.52|
000034  2022              MOVS     r0,#0x22              ;819
000036  f8840038          STRB     r0,[r4,#0x38]         ;819
                  |L12.58|
00003a  f7fffffe          BL       HAL_GetTick
00003e  4607              MOV      r7,r0                 ;823
000040  e011              B        |L12.102|
                  |L12.66|
000042  1c70              ADDS     r0,r6,#1              ;829
000044  b178              CBZ      r0,|L12.102|
000046  b126              CBZ      r6,|L12.82|
000048  f7fffffe          BL       HAL_GetTick
00004c  1bc0              SUBS     r0,r0,r7              ;831
00004e  42b0              CMP      r0,r6                 ;831
000050  d909              BLS      |L12.102|
                  |L12.82|
000052  2003              MOVS     r0,#3                 ;833
000054  f8840038          STRB     r0,[r4,#0x38]         ;833
000058  bf00              NOP                            ;835
00005a  2000              MOVS     r0,#0                 ;835
00005c  f8840039          STRB     r0,[r4,#0x39]         ;835
000060  bf00              NOP                            ;835
000062  2003              MOVS     r0,#3                 ;836
000064  e7d8              B        |L12.24|
                  |L12.102|
000066  b925              CBNZ     r5,|L12.114|
000068  6820              LDR      r0,[r4,#0]            ;826
00006a  68c0              LDR      r0,[r0,#0xc]          ;826
00006c  f0000003          AND      r0,r0,#3              ;826
000070  e003              B        |L12.122|
                  |L12.114|
000072  6820              LDR      r0,[r4,#0]            ;826
000074  6900              LDR      r0,[r0,#0x10]         ;826
000076  f0000003          AND      r0,r0,#3              ;826
                  |L12.122|
00007a  2800              CMP      r0,#0                 ;826
00007c  d0e1              BEQ      |L12.66|
00007e  6820              LDR      r0,[r4,#0]            ;842
000080  f50070d8          ADD      r0,r0,#0x1b0          ;842
000084  eb001005          ADD      r0,r0,r5,LSL #4       ;842
000088  6800              LDR      r0,[r0,#0]            ;842
00008a  f0000004          AND      r0,r0,#4              ;842
00008e  6b61              LDR      r1,[r4,#0x34]         ;842
000090  6088              STR      r0,[r1,#8]            ;842
000092  6b60              LDR      r0,[r4,#0x34]         ;843
000094  6880              LDR      r0,[r0,#8]            ;843
000096  b960              CBNZ     r0,|L12.178|
000098  6820              LDR      r0,[r4,#0]            ;845
00009a  f50070d8          ADD      r0,r0,#0x1b0          ;845
00009e  eb001005          ADD      r0,r0,r5,LSL #4       ;845
0000a2  6800              LDR      r0,[r0,#0]            ;845
0000a4  f24071ff          MOV      r1,#0x7ff             ;845
0000a8  ea015050          AND      r0,r1,r0,LSR #21      ;845
0000ac  6b61              LDR      r1,[r4,#0x34]         ;845
0000ae  6008              STR      r0,[r1,#0]            ;845
0000b0  e00b              B        |L12.202|
                  |L12.178|
0000b2  6820              LDR      r0,[r4,#0]            ;849
0000b4  f50070d8          ADD      r0,r0,#0x1b0          ;849
0000b8  eb001005          ADD      r0,r0,r5,LSL #4       ;849
0000bc  6800              LDR      r0,[r0,#0]            ;849
0000be  f06f4160          MVN      r1,#0xe0000000        ;849
0000c2  ea0100d0          AND      r0,r1,r0,LSR #3       ;849
0000c6  6b61              LDR      r1,[r4,#0x34]         ;849
0000c8  6048              STR      r0,[r1,#4]            ;849
                  |L12.202|
0000ca  6820              LDR      r0,[r4,#0]            ;852
0000cc  f50070d8          ADD      r0,r0,#0x1b0          ;852
0000d0  eb001005          ADD      r0,r0,r5,LSL #4       ;852
0000d4  6800              LDR      r0,[r0,#0]            ;852
0000d6  f0000002          AND      r0,r0,#2              ;852
0000da  6b61              LDR      r1,[r4,#0x34]         ;852
0000dc  60c8              STR      r0,[r1,#0xc]          ;852
0000de  6820              LDR      r0,[r4,#0]            ;854
0000e0  f50070d8          ADD      r0,r0,#0x1b0          ;854
0000e4  eb001005          ADD      r0,r0,r5,LSL #4       ;854
0000e8  6840              LDR      r0,[r0,#4]            ;854
0000ea  f000000f          AND      r0,r0,#0xf            ;854
0000ee  6b61              LDR      r1,[r4,#0x34]         ;854
0000f0  6108              STR      r0,[r1,#0x10]         ;854
0000f2  6820              LDR      r0,[r4,#0]            ;856
0000f4  f50070d8          ADD      r0,r0,#0x1b0          ;856
0000f8  eb001005          ADD      r0,r0,r5,LSL #4       ;856
0000fc  6840              LDR      r0,[r0,#4]            ;856
0000fe  f3c02007          UBFX     r0,r0,#8,#8           ;856
000102  6b61              LDR      r1,[r4,#0x34]         ;856
000104  61c8              STR      r0,[r1,#0x1c]         ;856
000106  6820              LDR      r0,[r4,#0]            ;858
000108  f50070d8          ADD      r0,r0,#0x1b0          ;858
00010c  eb001005          ADD      r0,r0,r5,LSL #4       ;858
000110  6880              LDR      r0,[r0,#8]            ;858
000112  6b61              LDR      r1,[r4,#0x34]         ;858
000114  7508              STRB     r0,[r1,#0x14]         ;858
000116  6820              LDR      r0,[r4,#0]            ;859
000118  f50070d8          ADD      r0,r0,#0x1b0          ;859
00011c  eb001005          ADD      r0,r0,r5,LSL #4       ;859
000120  6880              LDR      r0,[r0,#8]            ;859
000122  0a01              LSRS     r1,r0,#8              ;859
000124  6b60              LDR      r0,[r4,#0x34]         ;859
000126  7541              STRB     r1,[r0,#0x15]         ;859
000128  6820              LDR      r0,[r4,#0]            ;860
00012a  f50070d8          ADD      r0,r0,#0x1b0          ;860
00012e  eb001005          ADD      r0,r0,r5,LSL #4       ;860
000132  6880              LDR      r0,[r0,#8]            ;860
000134  0c01              LSRS     r1,r0,#16             ;860
000136  6b60              LDR      r0,[r4,#0x34]         ;860
000138  7581              STRB     r1,[r0,#0x16]         ;860
00013a  6820              LDR      r0,[r4,#0]            ;861
00013c  f50070d8          ADD      r0,r0,#0x1b0          ;861
000140  eb001005          ADD      r0,r0,r5,LSL #4       ;861
000144  6880              LDR      r0,[r0,#8]            ;861
000146  0e00              LSRS     r0,r0,#24             ;861
000148  6b61              LDR      r1,[r4,#0x34]         ;861
00014a  75c8              STRB     r0,[r1,#0x17]         ;861
00014c  6820              LDR      r0,[r4,#0]            ;862
00014e  f50070d8          ADD      r0,r0,#0x1b0          ;862
000152  eb001005          ADD      r0,r0,r5,LSL #4       ;862
000156  68c0              LDR      r0,[r0,#0xc]          ;862
000158  b2c1              UXTB     r1,r0                 ;862
00015a  6b60              LDR      r0,[r4,#0x34]         ;862
00015c  7601              STRB     r1,[r0,#0x18]         ;862
00015e  6820              LDR      r0,[r4,#0]            ;863
000160  f50070d8          ADD      r0,r0,#0x1b0          ;863
000164  eb001005          ADD      r0,r0,r5,LSL #4       ;863
000168  68c0              LDR      r0,[r0,#0xc]          ;863
00016a  0a01              LSRS     r1,r0,#8              ;863
00016c  6b60              LDR      r0,[r4,#0x34]         ;863
00016e  7641              STRB     r1,[r0,#0x19]         ;863
000170  6820              LDR      r0,[r4,#0]            ;864
000172  f50070d8          ADD      r0,r0,#0x1b0          ;864
000176  eb001005          ADD      r0,r0,r5,LSL #4       ;864
00017a  68c0              LDR      r0,[r0,#0xc]          ;864
00017c  0c01              LSRS     r1,r0,#16             ;864
00017e  6b60              LDR      r0,[r4,#0x34]         ;864
000180  7681              STRB     r1,[r0,#0x1a]         ;864
000182  6820              LDR      r0,[r4,#0]            ;865
000184  f50070d8          ADD      r0,r0,#0x1b0          ;865
000188  eb001005          ADD      r0,r0,r5,LSL #4       ;865
00018c  68c0              LDR      r0,[r0,#0xc]          ;865
00018e  0e00              LSRS     r0,r0,#24             ;865
000190  6b61              LDR      r1,[r4,#0x34]         ;865
000192  76c8              STRB     r0,[r1,#0x1b]         ;865
000194  b91d              CBNZ     r5,|L12.414|
000196  2020              MOVS     r0,#0x20              ;871
000198  6821              LDR      r1,[r4,#0]            ;871
00019a  60c8              STR      r0,[r1,#0xc]          ;871
00019c  e002              B        |L12.420|
                  |L12.414|
00019e  2020              MOVS     r0,#0x20              ;876
0001a0  6821              LDR      r1,[r4,#0]            ;876
0001a2  6108              STR      r0,[r1,#0x10]         ;876
                  |L12.420|
0001a4  f8940038          LDRB     r0,[r4,#0x38]         ;879
0001a8  2832              CMP      r0,#0x32              ;879
0001aa  d107              BNE      |L12.444|
0001ac  2012              MOVS     r0,#0x12              ;882
0001ae  f8840038          STRB     r0,[r4,#0x38]         ;882
0001b2  bf00              NOP                            ;885
0001b4  2000              MOVS     r0,#0                 ;885
0001b6  f8840039          STRB     r0,[r4,#0x39]         ;885
0001ba  e007              B        |L12.460|
                  |L12.444|
0001bc  2001              MOVS     r0,#1                 ;890
0001be  f8840038          STRB     r0,[r4,#0x38]         ;890
0001c2  bf00              NOP                            ;893
0001c4  2000              MOVS     r0,#0                 ;893
0001c6  f8840039          STRB     r0,[r4,#0x39]         ;893
0001ca  bf00              NOP                            ;893
                  |L12.460|
0001cc  2000              MOVS     r0,#0                 ;897
0001ce  e723              B        |L12.24|
;;;899    
                          ENDP


                          AREA ||i.HAL_CAN_Receive_IT||, CODE, READONLY, ALIGN=1

                  HAL_CAN_Receive_IT PROC
;;;906      */
;;;907    HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
000000  b510              PUSH     {r4,lr}
;;;908    {
000002  4602              MOV      r2,r0
;;;909      uint32_t tmp = 0;
000004  2300              MOVS     r3,#0
;;;910      
;;;911      /* Check the parameters */
;;;912      assert_param(IS_CAN_FIFO(FIFONumber));
;;;913      
;;;914      tmp = hcan->State;
000006  f8923038          LDRB     r3,[r2,#0x38]
;;;915      if((tmp == HAL_CAN_STATE_READY) || (tmp == HAL_CAN_STATE_BUSY_TX))
00000a  2b01              CMP      r3,#1
00000c  d001              BEQ      |L13.18|
00000e  2b12              CMP      r3,#0x12
000010  d149              BNE      |L13.166|
                  |L13.18|
;;;916      {
;;;917        /* Process locked */
;;;918        __HAL_LOCK(hcan);
000012  bf00              NOP      
000014  f8920039          LDRB     r0,[r2,#0x39]
000018  2801              CMP      r0,#1
00001a  d101              BNE      |L13.32|
00001c  2002              MOVS     r0,#2
                  |L13.30|
;;;919      
;;;920        if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
;;;921        {
;;;922          /* Change CAN state */
;;;923          hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
;;;924        }
;;;925        else
;;;926        {
;;;927          /* Change CAN state */
;;;928          hcan->State = HAL_CAN_STATE_BUSY_RX;
;;;929        }
;;;930        
;;;931        /* Set CAN error code to none */
;;;932        hcan->ErrorCode = HAL_CAN_ERROR_NONE;
;;;933        
;;;934        /* Enable Error warning Interrupt */
;;;935        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG);
;;;936          
;;;937        /* Enable Error passive Interrupt */
;;;938        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EPV);
;;;939          
;;;940        /* Enable Bus-off Interrupt */
;;;941        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_BOF);
;;;942          
;;;943        /* Enable Last error code Interrupt */
;;;944        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_LEC);
;;;945          
;;;946        /* Enable Error Interrupt */
;;;947        __HAL_CAN_ENABLE_IT(hcan, CAN_IT_ERR);
;;;948    
;;;949        /* Process unlocked */
;;;950        __HAL_UNLOCK(hcan);
;;;951    
;;;952        if(FIFONumber == CAN_FIFO0)
;;;953        {
;;;954          /* Enable FIFO 0 message pending Interrupt */
;;;955          __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
;;;956        }
;;;957        else
;;;958        {
;;;959          /* Enable FIFO 1 message pending Interrupt */
;;;960          __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
;;;961        }
;;;962        
;;;963      }
;;;964      else
;;;965      {
;;;966        return HAL_BUSY;
;;;967      }
;;;968      
;;;969      /* Return function status */
;;;970      return HAL_OK;
;;;971    }
00001e  bd10              POP      {r4,pc}
                  |L13.32|
000020  2001              MOVS     r0,#1                 ;918
000022  f8820039          STRB     r0,[r2,#0x39]         ;918
000026  bf00              NOP                            ;918
000028  f8920038          LDRB     r0,[r2,#0x38]         ;920
00002c  2812              CMP      r0,#0x12              ;920
00002e  d103              BNE      |L13.56|
000030  2032              MOVS     r0,#0x32              ;923
000032  f8820038          STRB     r0,[r2,#0x38]         ;923
000036  e002              B        |L13.62|
                  |L13.56|
000038  2022              MOVS     r0,#0x22              ;928
00003a  f8820038          STRB     r0,[r2,#0x38]         ;928
                  |L13.62|
00003e  2000              MOVS     r0,#0                 ;932
000040  63d0              STR      r0,[r2,#0x3c]         ;932
000042  6810              LDR      r0,[r2,#0]            ;935
000044  6940              LDR      r0,[r0,#0x14]         ;935
000046  f4407080          ORR      r0,r0,#0x100          ;935
00004a  6814              LDR      r4,[r2,#0]            ;935
00004c  6160              STR      r0,[r4,#0x14]         ;935
00004e  6810              LDR      r0,[r2,#0]            ;938
000050  6940              LDR      r0,[r0,#0x14]         ;938
000052  f4407000          ORR      r0,r0,#0x200          ;938
000056  6814              LDR      r4,[r2,#0]            ;938
000058  6160              STR      r0,[r4,#0x14]         ;938
00005a  6810              LDR      r0,[r2,#0]            ;941
00005c  6940              LDR      r0,[r0,#0x14]         ;941
00005e  f4406080          ORR      r0,r0,#0x400          ;941
000062  6814              LDR      r4,[r2,#0]            ;941
000064  6160              STR      r0,[r4,#0x14]         ;941
000066  6810              LDR      r0,[r2,#0]            ;944
000068  6940              LDR      r0,[r0,#0x14]         ;944
00006a  f4406000          ORR      r0,r0,#0x800          ;944
00006e  6814              LDR      r4,[r2,#0]            ;944
000070  6160              STR      r0,[r4,#0x14]         ;944
000072  6810              LDR      r0,[r2,#0]            ;947
000074  6940              LDR      r0,[r0,#0x14]         ;947
000076  f4404000          ORR      r0,r0,#0x8000         ;947
00007a  6814              LDR      r4,[r2,#0]            ;947
00007c  6160              STR      r0,[r4,#0x14]         ;947
00007e  bf00              NOP                            ;950
000080  2000              MOVS     r0,#0                 ;950
000082  f8820039          STRB     r0,[r2,#0x39]         ;950
000086  bf00              NOP                            ;950
000088  b931              CBNZ     r1,|L13.152|
00008a  6810              LDR      r0,[r2,#0]            ;955
00008c  6940              LDR      r0,[r0,#0x14]         ;955
00008e  f0400002          ORR      r0,r0,#2              ;955
000092  6814              LDR      r4,[r2,#0]            ;955
000094  6160              STR      r0,[r4,#0x14]         ;955
000096  e008              B        |L13.170|
                  |L13.152|
000098  6810              LDR      r0,[r2,#0]            ;960
00009a  6940              LDR      r0,[r0,#0x14]         ;960
00009c  f0400010          ORR      r0,r0,#0x10           ;960
0000a0  6814              LDR      r4,[r2,#0]            ;960
0000a2  6160              STR      r0,[r4,#0x14]         ;960
0000a4  e001              B        |L13.170|
                  |L13.166|
0000a6  2002              MOVS     r0,#2                 ;966
0000a8  e7b9              B        |L13.30|
                  |L13.170|
0000aa  2000              MOVS     r0,#0                 ;970
0000ac  e7b7              B        |L13.30|
;;;972    
                          ENDP


                          AREA ||i.HAL_CAN_RxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_CAN_RxCpltCallback PROC
;;;1224     */
;;;1225   __weak void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan)
000000  4770              BX       lr
;;;1226   {
;;;1227     /* Prevent unused argument(s) compilation warning */
;;;1228     UNUSED(hcan);
;;;1229     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1230               the HAL_CAN_RxCpltCallback could be implemented in the user file
;;;1231      */
;;;1232   }
;;;1233   
                          ENDP


                          AREA ||i.HAL_CAN_Sleep||, CODE, READONLY, ALIGN=1

                  HAL_CAN_Sleep PROC
;;;978      */
;;;979    HAL_StatusTypeDef HAL_CAN_Sleep(CAN_HandleTypeDef* hcan)
000000  b570              PUSH     {r4-r6,lr}
;;;980    {
000002  4604              MOV      r4,r0
;;;981      uint32_t tickstart = 0;
000004  2500              MOVS     r5,#0
;;;982       
;;;983      /* Process locked */
;;;984      __HAL_LOCK(hcan);
000006  bf00              NOP      
000008  f8940039          LDRB     r0,[r4,#0x39]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L15.20|
000010  2002              MOVS     r0,#2
                  |L15.18|
;;;985      
;;;986      /* Change CAN state */
;;;987      hcan->State = HAL_CAN_STATE_BUSY; 
;;;988        
;;;989      /* Request Sleep mode */
;;;990       hcan->Instance->MCR = (((hcan->Instance->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
;;;991       
;;;992      /* Sleep mode status */
;;;993      if ((hcan->Instance->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) != CAN_MSR_SLAK)
;;;994      {
;;;995        /* Process unlocked */
;;;996        __HAL_UNLOCK(hcan);
;;;997    
;;;998        /* Return function status */
;;;999        return HAL_ERROR;
;;;1000     }
;;;1001     
;;;1002     /* Get tick */ 
;;;1003     tickstart = HAL_GetTick();
;;;1004     
;;;1005     /* Wait the acknowledge */
;;;1006     while((hcan->Instance->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) != CAN_MSR_SLAK)
;;;1007     {
;;;1008       if((HAL_GetTick()  - tickstart) > CAN_TIMEOUT_VALUE)
;;;1009       {
;;;1010         hcan->State = HAL_CAN_STATE_TIMEOUT;
;;;1011         /* Process unlocked */
;;;1012         __HAL_UNLOCK(hcan);
;;;1013         return HAL_TIMEOUT;
;;;1014       }
;;;1015     }
;;;1016     
;;;1017     /* Change CAN state */
;;;1018     hcan->State = HAL_CAN_STATE_READY;
;;;1019     
;;;1020     /* Process unlocked */
;;;1021     __HAL_UNLOCK(hcan);
;;;1022     
;;;1023     /* Return function status */
;;;1024     return HAL_OK;
;;;1025   }
000012  bd70              POP      {r4-r6,pc}
                  |L15.20|
000014  2001              MOVS     r0,#1                 ;984
000016  f8840039          STRB     r0,[r4,#0x39]         ;984
00001a  bf00              NOP                            ;984
00001c  2002              MOVS     r0,#2                 ;987
00001e  f8840038          STRB     r0,[r4,#0x38]         ;987
000022  6820              LDR      r0,[r4,#0]            ;990
000024  6800              LDR      r0,[r0,#0]            ;990
000026  f0200001          BIC      r0,r0,#1              ;990
00002a  f0400002          ORR      r0,r0,#2              ;990
00002e  6821              LDR      r1,[r4,#0]            ;990
000030  6008              STR      r0,[r1,#0]            ;990
000032  6820              LDR      r0,[r4,#0]            ;993
000034  6840              LDR      r0,[r0,#4]            ;993
000036  f0000003          AND      r0,r0,#3              ;993
00003a  2802              CMP      r0,#2                 ;993
00003c  d006              BEQ      |L15.76|
00003e  bf00              NOP                            ;996
000040  2000              MOVS     r0,#0                 ;996
000042  f8840039          STRB     r0,[r4,#0x39]         ;996
000046  bf00              NOP                            ;996
000048  2001              MOVS     r0,#1                 ;999
00004a  e7e2              B        |L15.18|
                  |L15.76|
00004c  f7fffffe          BL       HAL_GetTick
000050  4605              MOV      r5,r0                 ;1003
000052  e00e              B        |L15.114|
                  |L15.84|
000054  f7fffffe          BL       HAL_GetTick
000058  1b40              SUBS     r0,r0,r5              ;1008
00005a  280a              CMP      r0,#0xa               ;1008
00005c  d909              BLS      |L15.114|
00005e  2003              MOVS     r0,#3                 ;1010
000060  f8840038          STRB     r0,[r4,#0x38]         ;1010
000064  bf00              NOP                            ;1012
000066  2000              MOVS     r0,#0                 ;1012
000068  f8840039          STRB     r0,[r4,#0x39]         ;1012
00006c  bf00              NOP                            ;1012
00006e  2003              MOVS     r0,#3                 ;1013
000070  e7cf              B        |L15.18|
                  |L15.114|
000072  6820              LDR      r0,[r4,#0]            ;1006
000074  6840              LDR      r0,[r0,#4]            ;1006
000076  f0000003          AND      r0,r0,#3              ;1006
00007a  2802              CMP      r0,#2                 ;1006
00007c  d1ea              BNE      |L15.84|
00007e  2001              MOVS     r0,#1                 ;1018
000080  f8840038          STRB     r0,[r4,#0x38]         ;1018
000084  bf00              NOP                            ;1021
000086  2000              MOVS     r0,#0                 ;1021
000088  f8840039          STRB     r0,[r4,#0x39]         ;1021
00008c  bf00              NOP                            ;1021
00008e  bf00              NOP                            ;1024
000090  e7bf              B        |L15.18|
;;;1026   
                          ENDP


                          AREA ||i.HAL_CAN_Transmit||, CODE, READONLY, ALIGN=2

                  HAL_CAN_Transmit PROC
;;;544      */
;;;545    HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;546    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;547      uint32_t  transmitmailbox = 5;
000008  2505              MOVS     r5,#5
;;;548      uint32_t tickstart = 0;
00000a  2700              MOVS     r7,#0
;;;549    
;;;550      /* Check the parameters */
;;;551      assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
;;;552      assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
;;;553      assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
;;;554      
;;;555      /* Process locked */
;;;556      __HAL_LOCK(hcan);
00000c  bf00              NOP      
00000e  f8940039          LDRB     r0,[r4,#0x39]
000012  2801              CMP      r0,#1
000014  d102              BNE      |L16.28|
000016  2002              MOVS     r0,#2
                  |L16.24|
;;;557      
;;;558      if(hcan->State == HAL_CAN_STATE_BUSY_RX) 
;;;559      {
;;;560        /* Change CAN state */
;;;561        hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
;;;562      }
;;;563      else
;;;564      {
;;;565        /* Change CAN state */
;;;566        hcan->State = HAL_CAN_STATE_BUSY_TX;
;;;567      }
;;;568      
;;;569      /* Select one empty transmit mailbox */
;;;570      if ((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
;;;571      {
;;;572        transmitmailbox = 0;
;;;573      }
;;;574      else if ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
;;;575      {
;;;576        transmitmailbox = 1;
;;;577      }
;;;578      else if ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
;;;579      {
;;;580        transmitmailbox = 2;
;;;581      }
;;;582      else
;;;583      {
;;;584        transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
;;;585      }
;;;586    
;;;587      if (transmitmailbox != CAN_TXSTATUS_NOMAILBOX)
;;;588      {
;;;589        /* Set up the Id */
;;;590        hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
;;;591        if (hcan->pTxMsg->IDE == CAN_ID_STD)
;;;592        {
;;;593          assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
;;;594          hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21) | \
;;;595                                                      hcan->pTxMsg->RTR);
;;;596        }
;;;597        else
;;;598        {
;;;599          assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
;;;600          hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3) | \
;;;601                                                      hcan->pTxMsg->IDE | \
;;;602                                                      hcan->pTxMsg->RTR);
;;;603        }
;;;604        
;;;605        /* Set up the DLC */
;;;606        hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
;;;607        hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0;
;;;608        hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
;;;609    
;;;610        /* Set up the data field */
;;;611        hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3] << 24) | 
;;;612                                                 ((uint32_t)hcan->pTxMsg->Data[2] << 16) |
;;;613                                                 ((uint32_t)hcan->pTxMsg->Data[1] << 8) | 
;;;614                                                 ((uint32_t)hcan->pTxMsg->Data[0]));
;;;615        hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7] << 24) | 
;;;616                                                 ((uint32_t)hcan->pTxMsg->Data[6] << 16) |
;;;617                                                 ((uint32_t)hcan->pTxMsg->Data[5] << 8) |
;;;618                                                 ((uint32_t)hcan->pTxMsg->Data[4]));
;;;619        /* Request transmission */
;;;620        hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
;;;621      
;;;622      /* Get tick */ 
;;;623      tickstart = HAL_GetTick();
;;;624      
;;;625        /* Check End of transmission flag */
;;;626        while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
;;;627        {
;;;628          /* Check for the Timeout */
;;;629          if(Timeout != HAL_MAX_DELAY)
;;;630          {
;;;631           if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
;;;632           {
;;;633             hcan->State = HAL_CAN_STATE_TIMEOUT;
;;;634             /* Process unlocked */
;;;635             __HAL_UNLOCK(hcan);
;;;636             return HAL_TIMEOUT;
;;;637            }
;;;638          }
;;;639        }
;;;640        if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
;;;641        {
;;;642          /* Change CAN state */
;;;643          hcan->State = HAL_CAN_STATE_BUSY_RX;
;;;644          
;;;645          /* Process unlocked */
;;;646          __HAL_UNLOCK(hcan);
;;;647        }
;;;648        else
;;;649        {
;;;650          /* Change CAN state */
;;;651          hcan->State = HAL_CAN_STATE_READY;
;;;652          
;;;653          /* Process unlocked */
;;;654          __HAL_UNLOCK(hcan);
;;;655        }
;;;656        
;;;657        /* Return function status */
;;;658        return HAL_OK;
;;;659      }
;;;660      else
;;;661      {
;;;662        /* Change CAN state */
;;;663        hcan->State = HAL_CAN_STATE_ERROR; 
;;;664    
;;;665        /* Process unlocked */
;;;666        __HAL_UNLOCK(hcan);
;;;667    
;;;668        /* Return function status */
;;;669        return HAL_ERROR;
;;;670      }
;;;671    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L16.28|
00001c  2001              MOVS     r0,#1                 ;556
00001e  f8840039          STRB     r0,[r4,#0x39]         ;556
000022  bf00              NOP                            ;556
000024  f8940038          LDRB     r0,[r4,#0x38]         ;558
000028  2822              CMP      r0,#0x22              ;558
00002a  d103              BNE      |L16.52|
00002c  2032              MOVS     r0,#0x32              ;561
00002e  f8840038          STRB     r0,[r4,#0x38]         ;561
000032  e002              B        |L16.58|
                  |L16.52|
000034  2012              MOVS     r0,#0x12              ;566
000036  f8840038          STRB     r0,[r4,#0x38]         ;566
                  |L16.58|
00003a  6820              LDR      r0,[r4,#0]            ;570
00003c  6880              LDR      r0,[r0,#8]            ;570
00003e  f0006080          AND      r0,r0,#0x4000000      ;570
000042  f1b06f80          CMP      r0,#0x4000000         ;570
000046  d101              BNE      |L16.76|
000048  2500              MOVS     r5,#0                 ;572
00004a  e012              B        |L16.114|
                  |L16.76|
00004c  6820              LDR      r0,[r4,#0]            ;574
00004e  6880              LDR      r0,[r0,#8]            ;574
000050  f0006000          AND      r0,r0,#0x8000000      ;574
000054  f1b06f00          CMP      r0,#0x8000000         ;574
000058  d101              BNE      |L16.94|
00005a  2501              MOVS     r5,#1                 ;576
00005c  e009              B        |L16.114|
                  |L16.94|
00005e  6820              LDR      r0,[r4,#0]            ;578
000060  6880              LDR      r0,[r0,#8]            ;578
000062  f0005080          AND      r0,r0,#0x10000000     ;578
000066  f1b05f80          CMP      r0,#0x10000000        ;578
00006a  d101              BNE      |L16.112|
00006c  2502              MOVS     r5,#2                 ;580
00006e  e000              B        |L16.114|
                  |L16.112|
000070  2504              MOVS     r5,#4                 ;584
                  |L16.114|
000072  2d04              CMP      r5,#4                 ;587
000074  d07e              BEQ      |L16.372|
000076  6820              LDR      r0,[r4,#0]            ;590
000078  f50070c0          ADD      r0,r0,#0x180          ;590
00007c  eb001005          ADD      r0,r0,r5,LSL #4       ;590
000080  6800              LDR      r0,[r0,#0]            ;590
000082  f0000101          AND      r1,r0,#1              ;590
000086  6820              LDR      r0,[r4,#0]            ;590
000088  f50070c0          ADD      r0,r0,#0x180          ;590
00008c  eb001005          ADD      r0,r0,r5,LSL #4       ;590
000090  6001              STR      r1,[r0,#0]            ;590
000092  6b20              LDR      r0,[r4,#0x30]         ;591
000094  6880              LDR      r0,[r0,#8]            ;591
000096  b998              CBNZ     r0,|L16.192|
000098  6820              LDR      r0,[r4,#0]            ;594
00009a  f50070c0          ADD      r0,r0,#0x180          ;594
00009e  eb001005          ADD      r0,r0,r5,LSL #4       ;594
0000a2  6800              LDR      r0,[r0,#0]            ;594
0000a4  6b21              LDR      r1,[r4,#0x30]         ;594
0000a6  68c9              LDR      r1,[r1,#0xc]          ;594
0000a8  6b22              LDR      r2,[r4,#0x30]         ;594
0000aa  8812              LDRH     r2,[r2,#0]            ;594
0000ac  ea415142          ORR      r1,r1,r2,LSL #21      ;594
0000b0  4308              ORRS     r0,r0,r1              ;594
0000b2  6821              LDR      r1,[r4,#0]            ;594
0000b4  f50171c0          ADD      r1,r1,#0x180          ;594
0000b8  eb011105          ADD      r1,r1,r5,LSL #4       ;594
0000bc  6008              STR      r0,[r1,#0]            ;594
0000be  e015              B        |L16.236|
                  |L16.192|
0000c0  6820              LDR      r0,[r4,#0]            ;600
0000c2  f50070c0          ADD      r0,r0,#0x180          ;600
0000c6  eb001005          ADD      r0,r0,r5,LSL #4       ;600
0000ca  6800              LDR      r0,[r0,#0]            ;600
0000cc  6b21              LDR      r1,[r4,#0x30]         ;600
0000ce  6889              LDR      r1,[r1,#8]            ;600
0000d0  6b22              LDR      r2,[r4,#0x30]         ;600
0000d2  6852              LDR      r2,[r2,#4]            ;600
0000d4  ea4101c2          ORR      r1,r1,r2,LSL #3       ;600
0000d8  6b22              LDR      r2,[r4,#0x30]         ;600
0000da  68d2              LDR      r2,[r2,#0xc]          ;600
0000dc  4311              ORRS     r1,r1,r2              ;600
0000de  4308              ORRS     r0,r0,r1              ;600
0000e0  6821              LDR      r1,[r4,#0]            ;600
0000e2  f50171c0          ADD      r1,r1,#0x180          ;600
0000e6  eb011105          ADD      r1,r1,r5,LSL #4       ;600
0000ea  6008              STR      r0,[r1,#0]            ;600
                  |L16.236|
0000ec  6b20              LDR      r0,[r4,#0x30]         ;606
0000ee  7c00              LDRB     r0,[r0,#0x10]         ;606
0000f0  f000000f          AND      r0,r0,#0xf            ;606
0000f4  6b21              LDR      r1,[r4,#0x30]         ;606
0000f6  6108              STR      r0,[r1,#0x10]         ;606
0000f8  6820              LDR      r0,[r4,#0]            ;607
0000fa  f50070c0          ADD      r0,r0,#0x180          ;607
0000fe  eb001005          ADD      r0,r0,r5,LSL #4       ;607
000102  6840              LDR      r0,[r0,#4]            ;607
000104  f020010f          BIC      r1,r0,#0xf            ;607
000108  6820              LDR      r0,[r4,#0]            ;607
00010a  f50070c0          ADD      r0,r0,#0x180          ;607
00010e  eb001005          ADD      r0,r0,r5,LSL #4       ;607
000112  6041              STR      r1,[r0,#4]            ;607
000114  6820              LDR      r0,[r4,#0]            ;608
000116  f50070c0          ADD      r0,r0,#0x180          ;608
00011a  eb001005          ADD      r0,r0,r5,LSL #4       ;608
00011e  6840              LDR      r0,[r0,#4]            ;608
000120  6b21              LDR      r1,[r4,#0x30]         ;608
000122  6909              LDR      r1,[r1,#0x10]         ;608
000124  4308              ORRS     r0,r0,r1              ;608
000126  6821              LDR      r1,[r4,#0]            ;608
000128  f50171c0          ADD      r1,r1,#0x180          ;608
00012c  eb011105          ADD      r1,r1,r5,LSL #4       ;608
000130  6048              STR      r0,[r1,#4]            ;608
000132  6b20              LDR      r0,[r4,#0x30]         ;611
000134  7dc0              LDRB     r0,[r0,#0x17]         ;611
000136  0601              LSLS     r1,r0,#24             ;611
000138  6b20              LDR      r0,[r4,#0x30]         ;611
00013a  7d80              LDRB     r0,[r0,#0x16]         ;611
00013c  ea414100          ORR      r1,r1,r0,LSL #16      ;611
000140  6b20              LDR      r0,[r4,#0x30]         ;611
000142  7d40              LDRB     r0,[r0,#0x15]         ;611
000144  ea412100          ORR      r1,r1,r0,LSL #8       ;611
000148  6b20              LDR      r0,[r4,#0x30]         ;611
00014a  7d00              LDRB     r0,[r0,#0x14]         ;611
00014c  4301              ORRS     r1,r1,r0              ;611
00014e  6820              LDR      r0,[r4,#0]            ;611
000150  f50070c0          ADD      r0,r0,#0x180          ;611
000154  eb001005          ADD      r0,r0,r5,LSL #4       ;611
000158  6081              STR      r1,[r0,#8]            ;611
00015a  6b20              LDR      r0,[r4,#0x30]         ;615
00015c  7ec0              LDRB     r0,[r0,#0x1b]         ;615
00015e  0601              LSLS     r1,r0,#24             ;615
000160  6b20              LDR      r0,[r4,#0x30]         ;615
000162  7e80              LDRB     r0,[r0,#0x1a]         ;615
000164  ea414100          ORR      r1,r1,r0,LSL #16      ;615
000168  6b20              LDR      r0,[r4,#0x30]         ;615
00016a  7e40              LDRB     r0,[r0,#0x19]         ;615
00016c  ea412000          ORR      r0,r1,r0,LSL #8       ;615
000170  6b21              LDR      r1,[r4,#0x30]         ;615
000172  e000              B        |L16.374|
                  |L16.372|
000174  e063              B        |L16.574|
                  |L16.374|
000176  7e09              LDRB     r1,[r1,#0x18]         ;615
000178  4308              ORRS     r0,r0,r1              ;615
00017a  6821              LDR      r1,[r4,#0]            ;615
00017c  f50171c0          ADD      r1,r1,#0x180          ;615
000180  eb011105          ADD      r1,r1,r5,LSL #4       ;615
000184  60c8              STR      r0,[r1,#0xc]          ;615
000186  6820              LDR      r0,[r4,#0]            ;620
000188  f50070c0          ADD      r0,r0,#0x180          ;620
00018c  eb001005          ADD      r0,r0,r5,LSL #4       ;620
000190  6800              LDR      r0,[r0,#0]            ;620
000192  f0400101          ORR      r1,r0,#1              ;620
000196  6820              LDR      r0,[r4,#0]            ;620
000198  f50070c0          ADD      r0,r0,#0x180          ;620
00019c  eb001005          ADD      r0,r0,r5,LSL #4       ;620
0001a0  6001              STR      r1,[r0,#0]            ;620
0001a2  f7fffffe          BL       HAL_GetTick
0001a6  4607              MOV      r7,r0                 ;623
0001a8  e011              B        |L16.462|
                  |L16.426|
0001aa  1c70              ADDS     r0,r6,#1              ;629
0001ac  b178              CBZ      r0,|L16.462|
0001ae  b126              CBZ      r6,|L16.442|
0001b0  f7fffffe          BL       HAL_GetTick
0001b4  1bc0              SUBS     r0,r0,r7              ;631
0001b6  42b0              CMP      r0,r6                 ;631
0001b8  d909              BLS      |L16.462|
                  |L16.442|
0001ba  2003              MOVS     r0,#3                 ;633
0001bc  f8840038          STRB     r0,[r4,#0x38]         ;633
0001c0  bf00              NOP                            ;635
0001c2  2000              MOVS     r0,#0                 ;635
0001c4  f8840039          STRB     r0,[r4,#0x39]         ;635
0001c8  bf00              NOP                            ;635
0001ca  2003              MOVS     r0,#3                 ;636
0001cc  e724              B        |L16.24|
                  |L16.462|
0001ce  b94d              CBNZ     r5,|L16.484|
0001d0  6820              LDR      r0,[r4,#0]            ;626
0001d2  6880              LDR      r0,[r0,#8]            ;626
0001d4  491f              LDR      r1,|L16.596|
0001d6  4008              ANDS     r0,r0,r1              ;626
0001d8  4288              CMP      r0,r1                 ;626
0001da  d101              BNE      |L16.480|
0001dc  2001              MOVS     r0,#1                 ;626
0001de  e016              B        |L16.526|
                  |L16.480|
0001e0  2000              MOVS     r0,#0                 ;626
0001e2  e014              B        |L16.526|
                  |L16.484|
0001e4  2d01              CMP      r5,#1                 ;626
0001e6  d109              BNE      |L16.508|
0001e8  6820              LDR      r0,[r4,#0]            ;626
0001ea  6880              LDR      r0,[r0,#8]            ;626
0001ec  491a              LDR      r1,|L16.600|
0001ee  4008              ANDS     r0,r0,r1              ;626
0001f0  4288              CMP      r0,r1                 ;626
0001f2  d101              BNE      |L16.504|
0001f4  2001              MOVS     r0,#1                 ;626
0001f6  e00a              B        |L16.526|
                  |L16.504|
0001f8  2000              MOVS     r0,#0                 ;626
0001fa  e008              B        |L16.526|
                  |L16.508|
0001fc  6820              LDR      r0,[r4,#0]            ;626
0001fe  6880              LDR      r0,[r0,#8]            ;626
000200  4916              LDR      r1,|L16.604|
000202  4008              ANDS     r0,r0,r1              ;626
000204  4288              CMP      r0,r1                 ;626
000206  d101              BNE      |L16.524|
000208  2001              MOVS     r0,#1                 ;626
00020a  e000              B        |L16.526|
                  |L16.524|
00020c  2000              MOVS     r0,#0                 ;626
                  |L16.526|
00020e  2800              CMP      r0,#0                 ;626
000210  d0cb              BEQ      |L16.426|
000212  f8940038          LDRB     r0,[r4,#0x38]         ;640
000216  2832              CMP      r0,#0x32              ;640
000218  d107              BNE      |L16.554|
00021a  2022              MOVS     r0,#0x22              ;643
00021c  f8840038          STRB     r0,[r4,#0x38]         ;643
000220  bf00              NOP                            ;646
000222  2000              MOVS     r0,#0                 ;646
000224  f8840039          STRB     r0,[r4,#0x39]         ;646
000228  e007              B        |L16.570|
                  |L16.554|
00022a  2001              MOVS     r0,#1                 ;651
00022c  f8840038          STRB     r0,[r4,#0x38]         ;651
000230  bf00              NOP                            ;654
000232  2000              MOVS     r0,#0                 ;654
000234  f8840039          STRB     r0,[r4,#0x39]         ;654
000238  bf00              NOP                            ;654
                  |L16.570|
00023a  2000              MOVS     r0,#0                 ;658
00023c  e6ec              B        |L16.24|
                  |L16.574|
00023e  2004              MOVS     r0,#4                 ;663
000240  f8840038          STRB     r0,[r4,#0x38]         ;663
000244  bf00              NOP                            ;666
000246  2000              MOVS     r0,#0                 ;666
000248  f8840039          STRB     r0,[r4,#0x39]         ;666
00024c  bf00              NOP                            ;666
00024e  2001              MOVS     r0,#1                 ;669
000250  e6e2              B        |L16.24|
;;;672    
                          ENDP

000252  0000              DCW      0x0000
                  |L16.596|
                          DCD      0x04000003
                  |L16.600|
                          DCD      0x08000300
                  |L16.604|
                          DCD      0x10030000

                          AREA ||i.HAL_CAN_Transmit_IT||, CODE, READONLY, ALIGN=1

                  HAL_CAN_Transmit_IT PROC
;;;678      */
;;;679    HAL_StatusTypeDef HAL_CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
000000  b530              PUSH     {r4,r5,lr}
;;;680    {
000002  4601              MOV      r1,r0
;;;681      uint32_t  transmitmailbox = 5;
000004  2205              MOVS     r2,#5
;;;682      uint32_t tmp = 0;
000006  2300              MOVS     r3,#0
;;;683      
;;;684      /* Check the parameters */
;;;685      assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
;;;686      assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
;;;687      assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
;;;688      
;;;689      tmp = hcan->State;
000008  f8913038          LDRB     r3,[r1,#0x38]
;;;690      if((tmp == HAL_CAN_STATE_READY) || (tmp == HAL_CAN_STATE_BUSY_RX))
00000c  2b01              CMP      r3,#1
00000e  d001              BEQ      |L17.20|
000010  2b22              CMP      r3,#0x22
000012  d17d              BNE      |L17.272|
                  |L17.20|
;;;691      {
;;;692        /* Process Locked */
;;;693        __HAL_LOCK(hcan);
000014  bf00              NOP      
000016  f8910039          LDRB     r0,[r1,#0x39]
00001a  2801              CMP      r0,#1
00001c  d101              BNE      |L17.34|
00001e  2002              MOVS     r0,#2
                  |L17.32|
;;;694        
;;;695        /* Select one empty transmit mailbox */
;;;696        if((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
;;;697        {
;;;698          transmitmailbox = 0;
;;;699        }
;;;700        else if((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
;;;701        {
;;;702          transmitmailbox = 1;
;;;703        }
;;;704        else if((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
;;;705        {
;;;706          transmitmailbox = 2;
;;;707        }
;;;708        else
;;;709        {
;;;710          transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
;;;711        }
;;;712    
;;;713        if(transmitmailbox != CAN_TXSTATUS_NOMAILBOX)
;;;714        {
;;;715          /* Set up the Id */
;;;716          hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
;;;717          if(hcan->pTxMsg->IDE == CAN_ID_STD)
;;;718          {
;;;719            assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
;;;720            hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21) | \
;;;721                                                      hcan->pTxMsg->RTR);
;;;722          }
;;;723          else
;;;724          {
;;;725            assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
;;;726            hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3) | \
;;;727                                                      hcan->pTxMsg->IDE | \
;;;728                                                      hcan->pTxMsg->RTR);
;;;729          }
;;;730        
;;;731          /* Set up the DLC */
;;;732          hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
;;;733          hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0;
;;;734          hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
;;;735    
;;;736          /* Set up the data field */
;;;737          hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3] << 24) | 
;;;738                                                 ((uint32_t)hcan->pTxMsg->Data[2] << 16) |
;;;739                                                 ((uint32_t)hcan->pTxMsg->Data[1] << 8) | 
;;;740                                                 ((uint32_t)hcan->pTxMsg->Data[0]));
;;;741          hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7] << 24) | 
;;;742                                                 ((uint32_t)hcan->pTxMsg->Data[6] << 16) |
;;;743                                                 ((uint32_t)hcan->pTxMsg->Data[5] << 8) |
;;;744                                                 ((uint32_t)hcan->pTxMsg->Data[4]));
;;;745        
;;;746          if(hcan->State == HAL_CAN_STATE_BUSY_RX) 
;;;747          {
;;;748            /* Change CAN state */
;;;749            hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
;;;750          }
;;;751          else
;;;752          {
;;;753            /* Change CAN state */
;;;754            hcan->State = HAL_CAN_STATE_BUSY_TX;
;;;755          }
;;;756          
;;;757          /* Set CAN error code to none */
;;;758          hcan->ErrorCode = HAL_CAN_ERROR_NONE;
;;;759          
;;;760          /* Process Unlocked */
;;;761          __HAL_UNLOCK(hcan);
;;;762          
;;;763          /* Enable Error warning Interrupt */
;;;764          __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG);
;;;765          
;;;766          /* Enable Error passive Interrupt */
;;;767          __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EPV);
;;;768          
;;;769          /* Enable Bus-off Interrupt */
;;;770          __HAL_CAN_ENABLE_IT(hcan, CAN_IT_BOF);
;;;771          
;;;772          /* Enable Last error code Interrupt */
;;;773          __HAL_CAN_ENABLE_IT(hcan, CAN_IT_LEC);
;;;774          
;;;775          /* Enable Error Interrupt */
;;;776          __HAL_CAN_ENABLE_IT(hcan, CAN_IT_ERR);
;;;777          
;;;778          /* Enable Transmit mailbox empty Interrupt */
;;;779          __HAL_CAN_ENABLE_IT(hcan, CAN_IT_TME);
;;;780          
;;;781          /* Request transmission */
;;;782          hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
;;;783        }
;;;784      }
;;;785      else
;;;786      {
;;;787        return HAL_BUSY;
;;;788      }
;;;789      
;;;790      return HAL_OK;
;;;791    }
000020  bd30              POP      {r4,r5,pc}
                  |L17.34|
000022  2001              MOVS     r0,#1                 ;693
000024  f8810039          STRB     r0,[r1,#0x39]         ;693
000028  bf00              NOP                            ;693
00002a  6808              LDR      r0,[r1,#0]            ;696
00002c  6880              LDR      r0,[r0,#8]            ;696
00002e  f0006080          AND      r0,r0,#0x4000000      ;696
000032  f1b06f80          CMP      r0,#0x4000000         ;696
000036  d101              BNE      |L17.60|
000038  2200              MOVS     r2,#0                 ;698
00003a  e012              B        |L17.98|
                  |L17.60|
00003c  6808              LDR      r0,[r1,#0]            ;700
00003e  6880              LDR      r0,[r0,#8]            ;700
000040  f0006000          AND      r0,r0,#0x8000000      ;700
000044  f1b06f00          CMP      r0,#0x8000000         ;700
000048  d101              BNE      |L17.78|
00004a  2201              MOVS     r2,#1                 ;702
00004c  e009              B        |L17.98|
                  |L17.78|
00004e  6808              LDR      r0,[r1,#0]            ;704
000050  6880              LDR      r0,[r0,#8]            ;704
000052  f0005080          AND      r0,r0,#0x10000000     ;704
000056  f1b05f80          CMP      r0,#0x10000000        ;704
00005a  d101              BNE      |L17.96|
00005c  2202              MOVS     r2,#2                 ;706
00005e  e000              B        |L17.98|
                  |L17.96|
000060  2204              MOVS     r2,#4                 ;710
                  |L17.98|
000062  2a04              CMP      r2,#4                 ;713
000064  d07d              BEQ      |L17.354|
000066  6808              LDR      r0,[r1,#0]            ;716
000068  f50070c0          ADD      r0,r0,#0x180          ;716
00006c  eb001002          ADD      r0,r0,r2,LSL #4       ;716
000070  6800              LDR      r0,[r0,#0]            ;716
000072  f0000401          AND      r4,r0,#1              ;716
000076  6808              LDR      r0,[r1,#0]            ;716
000078  f50070c0          ADD      r0,r0,#0x180          ;716
00007c  eb001002          ADD      r0,r0,r2,LSL #4       ;716
000080  6004              STR      r4,[r0,#0]            ;716
000082  6b08              LDR      r0,[r1,#0x30]         ;717
000084  6880              LDR      r0,[r0,#8]            ;717
000086  b998              CBNZ     r0,|L17.176|
000088  6808              LDR      r0,[r1,#0]            ;720
00008a  f50070c0          ADD      r0,r0,#0x180          ;720
00008e  eb001002          ADD      r0,r0,r2,LSL #4       ;720
000092  6800              LDR      r0,[r0,#0]            ;720
000094  6b0c              LDR      r4,[r1,#0x30]         ;720
000096  68e4              LDR      r4,[r4,#0xc]          ;720
000098  6b0d              LDR      r5,[r1,#0x30]         ;720
00009a  882d              LDRH     r5,[r5,#0]            ;720
00009c  ea445445          ORR      r4,r4,r5,LSL #21      ;720
0000a0  4320              ORRS     r0,r0,r4              ;720
0000a2  680c              LDR      r4,[r1,#0]            ;720
0000a4  f50474c0          ADD      r4,r4,#0x180          ;720
0000a8  eb041402          ADD      r4,r4,r2,LSL #4       ;720
0000ac  6020              STR      r0,[r4,#0]            ;720
0000ae  e015              B        |L17.220|
                  |L17.176|
0000b0  6808              LDR      r0,[r1,#0]            ;726
0000b2  f50070c0          ADD      r0,r0,#0x180          ;726
0000b6  eb001002          ADD      r0,r0,r2,LSL #4       ;726
0000ba  6800              LDR      r0,[r0,#0]            ;726
0000bc  6b0c              LDR      r4,[r1,#0x30]         ;726
0000be  68a4              LDR      r4,[r4,#8]            ;726
0000c0  6b0d              LDR      r5,[r1,#0x30]         ;726
0000c2  686d              LDR      r5,[r5,#4]            ;726
0000c4  ea4404c5          ORR      r4,r4,r5,LSL #3       ;726
0000c8  6b0d              LDR      r5,[r1,#0x30]         ;726
0000ca  68ed              LDR      r5,[r5,#0xc]          ;726
0000cc  432c              ORRS     r4,r4,r5              ;726
0000ce  4320              ORRS     r0,r0,r4              ;726
0000d0  680c              LDR      r4,[r1,#0]            ;726
0000d2  f50474c0          ADD      r4,r4,#0x180          ;726
0000d6  eb041402          ADD      r4,r4,r2,LSL #4       ;726
0000da  6020              STR      r0,[r4,#0]            ;726
                  |L17.220|
0000dc  6b08              LDR      r0,[r1,#0x30]         ;732
0000de  7c00              LDRB     r0,[r0,#0x10]         ;732
0000e0  f000000f          AND      r0,r0,#0xf            ;732
0000e4  6b0c              LDR      r4,[r1,#0x30]         ;732
0000e6  6120              STR      r0,[r4,#0x10]         ;732
0000e8  6808              LDR      r0,[r1,#0]            ;733
0000ea  f50070c0          ADD      r0,r0,#0x180          ;733
0000ee  eb001002          ADD      r0,r0,r2,LSL #4       ;733
0000f2  6840              LDR      r0,[r0,#4]            ;733
0000f4  f020040f          BIC      r4,r0,#0xf            ;733
0000f8  6808              LDR      r0,[r1,#0]            ;733
0000fa  f50070c0          ADD      r0,r0,#0x180          ;733
0000fe  eb001002          ADD      r0,r0,r2,LSL #4       ;733
000102  6044              STR      r4,[r0,#4]            ;733
000104  6808              LDR      r0,[r1,#0]            ;734
000106  f50070c0          ADD      r0,r0,#0x180          ;734
00010a  eb001002          ADD      r0,r0,r2,LSL #4       ;734
00010e  e000              B        |L17.274|
                  |L17.272|
000110  e077              B        |L17.514|
                  |L17.274|
000112  6840              LDR      r0,[r0,#4]            ;734
000114  6b0c              LDR      r4,[r1,#0x30]         ;734
000116  6924              LDR      r4,[r4,#0x10]         ;734
000118  4320              ORRS     r0,r0,r4              ;734
00011a  680c              LDR      r4,[r1,#0]            ;734
00011c  f50474c0          ADD      r4,r4,#0x180          ;734
000120  eb041402          ADD      r4,r4,r2,LSL #4       ;734
000124  6060              STR      r0,[r4,#4]            ;734
000126  6b08              LDR      r0,[r1,#0x30]         ;737
000128  7dc0              LDRB     r0,[r0,#0x17]         ;737
00012a  0604              LSLS     r4,r0,#24             ;737
00012c  6b08              LDR      r0,[r1,#0x30]         ;737
00012e  7d80              LDRB     r0,[r0,#0x16]         ;737
000130  ea444400          ORR      r4,r4,r0,LSL #16      ;737
000134  6b08              LDR      r0,[r1,#0x30]         ;737
000136  7d40              LDRB     r0,[r0,#0x15]         ;737
000138  ea442400          ORR      r4,r4,r0,LSL #8       ;737
00013c  6b08              LDR      r0,[r1,#0x30]         ;737
00013e  7d00              LDRB     r0,[r0,#0x14]         ;737
000140  4304              ORRS     r4,r4,r0              ;737
000142  6808              LDR      r0,[r1,#0]            ;737
000144  f50070c0          ADD      r0,r0,#0x180          ;737
000148  eb001002          ADD      r0,r0,r2,LSL #4       ;737
00014c  6084              STR      r4,[r0,#8]            ;737
00014e  6b08              LDR      r0,[r1,#0x30]         ;741
000150  7ec0              LDRB     r0,[r0,#0x1b]         ;741
000152  0604              LSLS     r4,r0,#24             ;741
000154  6b08              LDR      r0,[r1,#0x30]         ;741
000156  7e80              LDRB     r0,[r0,#0x1a]         ;741
000158  ea444400          ORR      r4,r4,r0,LSL #16      ;741
00015c  6b08              LDR      r0,[r1,#0x30]         ;741
00015e  7e40              LDRB     r0,[r0,#0x19]         ;741
000160  e000              B        |L17.356|
                  |L17.354|
000162  e050              B        |L17.518|
                  |L17.356|
000164  ea442400          ORR      r4,r4,r0,LSL #8       ;741
000168  6b08              LDR      r0,[r1,#0x30]         ;741
00016a  7e00              LDRB     r0,[r0,#0x18]         ;741
00016c  4304              ORRS     r4,r4,r0              ;741
00016e  6808              LDR      r0,[r1,#0]            ;741
000170  f50070c0          ADD      r0,r0,#0x180          ;741
000174  eb001002          ADD      r0,r0,r2,LSL #4       ;741
000178  60c4              STR      r4,[r0,#0xc]          ;741
00017a  f8910038          LDRB     r0,[r1,#0x38]         ;746
00017e  2822              CMP      r0,#0x22              ;746
000180  d103              BNE      |L17.394|
000182  2032              MOVS     r0,#0x32              ;749
000184  f8810038          STRB     r0,[r1,#0x38]         ;749
000188  e002              B        |L17.400|
                  |L17.394|
00018a  2012              MOVS     r0,#0x12              ;754
00018c  f8810038          STRB     r0,[r1,#0x38]         ;754
                  |L17.400|
000190  2000              MOVS     r0,#0                 ;758
000192  63c8              STR      r0,[r1,#0x3c]         ;758
000194  bf00              NOP                            ;761
000196  f8810039          STRB     r0,[r1,#0x39]         ;761
00019a  bf00              NOP                            ;761
00019c  6808              LDR      r0,[r1,#0]            ;764
00019e  6940              LDR      r0,[r0,#0x14]         ;764
0001a0  f4407080          ORR      r0,r0,#0x100          ;764
0001a4  680c              LDR      r4,[r1,#0]            ;764
0001a6  6160              STR      r0,[r4,#0x14]         ;764
0001a8  6808              LDR      r0,[r1,#0]            ;767
0001aa  6940              LDR      r0,[r0,#0x14]         ;767
0001ac  f4407000          ORR      r0,r0,#0x200          ;767
0001b0  680c              LDR      r4,[r1,#0]            ;767
0001b2  6160              STR      r0,[r4,#0x14]         ;767
0001b4  6808              LDR      r0,[r1,#0]            ;770
0001b6  6940              LDR      r0,[r0,#0x14]         ;770
0001b8  f4406080          ORR      r0,r0,#0x400          ;770
0001bc  680c              LDR      r4,[r1,#0]            ;770
0001be  6160              STR      r0,[r4,#0x14]         ;770
0001c0  6808              LDR      r0,[r1,#0]            ;773
0001c2  6940              LDR      r0,[r0,#0x14]         ;773
0001c4  f4406000          ORR      r0,r0,#0x800          ;773
0001c8  680c              LDR      r4,[r1,#0]            ;773
0001ca  6160              STR      r0,[r4,#0x14]         ;773
0001cc  6808              LDR      r0,[r1,#0]            ;776
0001ce  6940              LDR      r0,[r0,#0x14]         ;776
0001d0  f4404000          ORR      r0,r0,#0x8000         ;776
0001d4  680c              LDR      r4,[r1,#0]            ;776
0001d6  6160              STR      r0,[r4,#0x14]         ;776
0001d8  6808              LDR      r0,[r1,#0]            ;779
0001da  6940              LDR      r0,[r0,#0x14]         ;779
0001dc  f0400001          ORR      r0,r0,#1              ;779
0001e0  680c              LDR      r4,[r1,#0]            ;779
0001e2  6160              STR      r0,[r4,#0x14]         ;779
0001e4  6808              LDR      r0,[r1,#0]            ;782
0001e6  f50070c0          ADD      r0,r0,#0x180          ;782
0001ea  eb001002          ADD      r0,r0,r2,LSL #4       ;782
0001ee  6800              LDR      r0,[r0,#0]            ;782
0001f0  f0400401          ORR      r4,r0,#1              ;782
0001f4  6808              LDR      r0,[r1,#0]            ;782
0001f6  f50070c0          ADD      r0,r0,#0x180          ;782
0001fa  eb001002          ADD      r0,r0,r2,LSL #4       ;782
0001fe  6004              STR      r4,[r0,#0]            ;782
000200  e001              B        |L17.518|
                  |L17.514|
000202  2002              MOVS     r0,#2                 ;787
000204  e70c              B        |L17.32|
                  |L17.518|
000206  2000              MOVS     r0,#0                 ;790
000208  e70a              B        |L17.32|
;;;792    
                          ENDP


                          AREA ||i.HAL_CAN_TxCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_CAN_TxCpltCallback PROC
;;;1209     */
;;;1210   __weak void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef* hcan)
000000  4770              BX       lr
;;;1211   {
;;;1212     /* Prevent unused argument(s) compilation warning */
;;;1213     UNUSED(hcan);
;;;1214     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1215               the HAL_CAN_TxCpltCallback could be implemented in the user file
;;;1216      */
;;;1217   }
;;;1218   
                          ENDP


                          AREA ||i.HAL_CAN_WakeUp||, CODE, READONLY, ALIGN=1

                  HAL_CAN_WakeUp PROC
;;;1033     */
;;;1034   HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef* hcan)
000000  b570              PUSH     {r4-r6,lr}
;;;1035   {
000002  4604              MOV      r4,r0
;;;1036     uint32_t tickstart = 0;
000004  2500              MOVS     r5,#0
;;;1037       
;;;1038     /* Process locked */
;;;1039     __HAL_LOCK(hcan);
000006  bf00              NOP      
000008  f8940039          LDRB     r0,[r4,#0x39]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L19.20|
000010  2002              MOVS     r0,#2
                  |L19.18|
;;;1040     
;;;1041     /* Change CAN state */
;;;1042     hcan->State = HAL_CAN_STATE_BUSY;  
;;;1043    
;;;1044     /* Wake up request */
;;;1045     hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
;;;1046   
;;;1047     /* Get tick */ 
;;;1048     tickstart = HAL_GetTick();
;;;1049   
;;;1050     /* Sleep mode status */
;;;1051     while((hcan->Instance->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)
;;;1052     {
;;;1053       if((HAL_GetTick()  - tickstart) > CAN_TIMEOUT_VALUE)
;;;1054       {
;;;1055         hcan->State= HAL_CAN_STATE_TIMEOUT;
;;;1056         /* Process unlocked */
;;;1057         __HAL_UNLOCK(hcan);
;;;1058         return HAL_TIMEOUT;
;;;1059       }
;;;1060     }
;;;1061     if((hcan->Instance->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)
;;;1062     {
;;;1063       /* Process unlocked */
;;;1064       __HAL_UNLOCK(hcan);
;;;1065    
;;;1066       /* Return function status */
;;;1067       return HAL_ERROR;
;;;1068     }
;;;1069     
;;;1070     /* Change CAN state */
;;;1071     hcan->State = HAL_CAN_STATE_READY; 
;;;1072     
;;;1073     /* Process unlocked */
;;;1074     __HAL_UNLOCK(hcan);
;;;1075     
;;;1076     /* Return function status */
;;;1077     return HAL_OK;
;;;1078   }
000012  bd70              POP      {r4-r6,pc}
                  |L19.20|
000014  2001              MOVS     r0,#1                 ;1039
000016  f8840039          STRB     r0,[r4,#0x39]         ;1039
00001a  bf00              NOP                            ;1039
00001c  2002              MOVS     r0,#2                 ;1042
00001e  f8840038          STRB     r0,[r4,#0x38]         ;1042
000022  6820              LDR      r0,[r4,#0]            ;1045
000024  6800              LDR      r0,[r0,#0]            ;1045
000026  f0200002          BIC      r0,r0,#2              ;1045
00002a  6821              LDR      r1,[r4,#0]            ;1045
00002c  6008              STR      r0,[r1,#0]            ;1045
00002e  f7fffffe          BL       HAL_GetTick
000032  4605              MOV      r5,r0                 ;1048
000034  e00e              B        |L19.84|
                  |L19.54|
000036  f7fffffe          BL       HAL_GetTick
00003a  1b40              SUBS     r0,r0,r5              ;1053
00003c  280a              CMP      r0,#0xa               ;1053
00003e  d909              BLS      |L19.84|
000040  2003              MOVS     r0,#3                 ;1055
000042  f8840038          STRB     r0,[r4,#0x38]         ;1055
000046  bf00              NOP                            ;1057
000048  2000              MOVS     r0,#0                 ;1057
00004a  f8840039          STRB     r0,[r4,#0x39]         ;1057
00004e  bf00              NOP                            ;1057
000050  2003              MOVS     r0,#3                 ;1058
000052  e7de              B        |L19.18|
                  |L19.84|
000054  6820              LDR      r0,[r4,#0]            ;1051
000056  6840              LDR      r0,[r0,#4]            ;1051
000058  f0000002          AND      r0,r0,#2              ;1051
00005c  2802              CMP      r0,#2                 ;1051
00005e  d0ea              BEQ      |L19.54|
000060  6820              LDR      r0,[r4,#0]            ;1061
000062  6840              LDR      r0,[r0,#4]            ;1061
000064  f0000002          AND      r0,r0,#2              ;1061
000068  2802              CMP      r0,#2                 ;1061
00006a  d106              BNE      |L19.122|
00006c  bf00              NOP                            ;1064
00006e  2000              MOVS     r0,#0                 ;1064
000070  f8840039          STRB     r0,[r4,#0x39]         ;1064
000074  bf00              NOP                            ;1064
000076  2001              MOVS     r0,#1                 ;1067
000078  e7cb              B        |L19.18|
                  |L19.122|
00007a  2001              MOVS     r0,#1                 ;1071
00007c  f8840038          STRB     r0,[r4,#0x38]         ;1071
000080  bf00              NOP                            ;1074
000082  2000              MOVS     r0,#0                 ;1074
000084  f8840039          STRB     r0,[r4,#0x39]         ;1074
000088  bf00              NOP                            ;1074
00008a  bf00              NOP                            ;1077
00008c  e7c1              B        |L19.18|
;;;1079   
                          ENDP


;*** Start embedded assembler ***

#line 1 "HALLIB\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_can.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_can_c_fe6cb454____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___19_stm32f4xx_hal_can_c_fe6cb454____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_can_c_fe6cb454____REVSH|
#line 402
|__asm___19_stm32f4xx_hal_can_c_fe6cb454____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_can_c_fe6cb454____RRX|
#line 587
|__asm___19_stm32f4xx_hal_can_c_fe6cb454____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
