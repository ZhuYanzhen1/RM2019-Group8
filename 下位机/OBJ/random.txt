; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\random.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\random.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\random.crf Hardware\Random.c]
                          THUMB

                          AREA ||i.Get_RandomRange||, CODE, READONLY, ALIGN=2

                  Get_RandomRange PROC
;;;27     //生成[min,max]范围的随机数
;;;28     int Get_RandomRange(int min,int max)
000000  b570              PUSH     {r4-r6,lr}
;;;29     { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;30        return HAL_RNG_GetRandomNumber(&RNG_Handler)%(max-min+1) +min;
000006  4805              LDR      r0,|L1.28|
000008  f7fffffe          BL       HAL_RNG_GetRandomNumber
00000c  1b29              SUBS     r1,r5,r4
00000e  1c49              ADDS     r1,r1,#1
000010  fbb0f2f1          UDIV     r2,r0,r1
000014  fb010012          MLS      r0,r1,r2,r0
000018  4420              ADD      r0,r0,r4
;;;31     }
00001a  bd70              POP      {r4-r6,pc}
;;;32     
                          ENDP

                  |L1.28|
                          DCD      RNG_Handler

                          AREA ||i.RNG_Get_RandomNum||, CODE, READONLY, ALIGN=2

                  RNG_Get_RandomNum PROC
;;;22     }
;;;23     u32 RNG_Get_RandomNum(void)
000000  b510              PUSH     {r4,lr}
;;;24     {
;;;25         return HAL_RNG_GetRandomNumber(&RNG_Handler);
000002  4802              LDR      r0,|L2.12|
000004  f7fffffe          BL       HAL_RNG_GetRandomNumber
;;;26     }
000008  bd10              POP      {r4,pc}
;;;27     //生成[min,max]范围的随机数
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      RNG_Handler

                          AREA ||i.Random_Init||, CODE, READONLY, ALIGN=2

                  Random_Init PROC
;;;6      RNG_HandleTypeDef RNG_Handler;  //RNG句柄
;;;7      u8 Random_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;8      {
;;;9          u16 retry=0;
000002  2400              MOVS     r4,#0
;;;10     	  u16 Counter=0;
000004  2500              MOVS     r5,#0
;;;11     	  __HAL_RCC_RNG_CLK_ENABLE();//使能RNG时钟
000006  bf00              NOP      
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  4817              LDR      r0,|L3.108|
00000e  6800              LDR      r0,[r0,#0]
000010  f0400040          ORR      r0,r0,#0x40
000014  4915              LDR      r1,|L3.108|
000016  6008              STR      r0,[r1,#0]
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  f0000040          AND      r0,r0,#0x40
000020  9000              STR      r0,[sp,#0]
000022  bf00              NOP      
000024  bf00              NOP      
;;;12         RNG_Handler.Instance=RNG;
000026  4812              LDR      r0,|L3.112|
000028  4912              LDR      r1,|L3.116|
00002a  6008              STR      r0,[r1,#0]  ; RNG_Handler
;;;13         HAL_RNG_Init(&RNG_Handler);//初始化RNG
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       HAL_RNG_Init
;;;14         while(__HAL_RNG_GET_FLAG(&RNG_Handler,RNG_FLAG_DRDY)==RESET&&retry<10000)//等待RNG准备就绪
000032  e009              B        |L3.72|
                  |L3.52|
;;;15         {
;;;16             retry++;
000034  1c60              ADDS     r0,r4,#1
000036  b284              UXTH     r4,r0
;;;17     				Counter=1800;
000038  f44f65e1          MOV      r5,#0x708
;;;18             while(Counter--);
00003c  bf00              NOP      
                  |L3.62|
00003e  1e28              SUBS     r0,r5,#0
000040  f1a50101          SUB      r1,r5,#1
000044  b28d              UXTH     r5,r1
000046  d1fa              BNE      |L3.62|
                  |L3.72|
000048  480a              LDR      r0,|L3.116|
00004a  6800              LDR      r0,[r0,#0]            ;14  ; RNG_Handler
00004c  6840              LDR      r0,[r0,#4]            ;14
00004e  f0000001          AND      r0,r0,#1              ;14
000052  b918              CBNZ     r0,|L3.92|
000054  f2427010          MOV      r0,#0x2710            ;14
000058  4284              CMP      r4,r0                 ;14
00005a  dbeb              BLT      |L3.52|
                  |L3.92|
;;;19         }
;;;20         if(retry>=10000) return 1;//随机数产生器工作不正常
00005c  f2427010          MOV      r0,#0x2710
000060  4284              CMP      r4,r0
000062  db01              BLT      |L3.104|
000064  2001              MOVS     r0,#1
                  |L3.102|
;;;21         return 0;
;;;22     }
000066  bd38              POP      {r3-r5,pc}
                  |L3.104|
000068  2000              MOVS     r0,#0                 ;21
00006a  e7fc              B        |L3.102|
;;;23     u32 RNG_Get_RandomNum(void)
                          ENDP

                  |L3.108|
                          DCD      0x40023834
                  |L3.112|
                          DCD      0x50060800
                  |L3.116|
                          DCD      RNG_Handler

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  RNG_Handler
                          %        12

;*** Start embedded assembler ***

#line 1 "Hardware\\Random.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_Random_c_81a5a2f4____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___8_Random_c_81a5a2f4____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_Random_c_81a5a2f4____REVSH|
#line 402
|__asm___8_Random_c_81a5a2f4____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_Random_c_81a5a2f4____RRX|
#line 587
|__asm___8_Random_c_81a5a2f4____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
