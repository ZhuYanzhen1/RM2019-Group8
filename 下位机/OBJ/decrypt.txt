; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\decrypt.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\decrypt.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\decrypt.crf Hardware\Decrypt.c]
                          THUMB

                          AREA ||i.Received_CallBack||, CODE, READONLY, ALIGN=2

                  Received_CallBack PROC
;;;2      Receive_Data_Package Receive_Package;
;;;3      void Received_CallBack(unsigned char Receive_Buffer[])
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;4      {
000004  4601              MOV      r1,r0
;;;5      		unsigned char Buffer_Data_Counter=0;
000006  2300              MOVS     r3,#0
;;;6      		unsigned char Buffer_Flag=0;
000008  2500              MOVS     r5,#0
;;;7      		while(1)
00000a  e00d              B        |L1.40|
                  |L1.12|
;;;8      		{
;;;9      			if(Buffer_Flag == 0 && Receive_Buffer[Buffer_Data_Counter] == 0xff)
00000c  b925              CBNZ     r5,|L1.24|
00000e  5cc8              LDRB     r0,[r1,r3]
000010  28ff              CMP      r0,#0xff
000012  d101              BNE      |L1.24|
;;;10     				Buffer_Flag = 1;
000014  2501              MOVS     r5,#1
000016  e005              B        |L1.36|
                  |L1.24|
;;;11     			else if(Buffer_Flag == 1 && Receive_Buffer[Buffer_Data_Counter] == 0xff)
000018  2d01              CMP      r5,#1
00001a  d103              BNE      |L1.36|
00001c  5cc8              LDRB     r0,[r1,r3]
00001e  28ff              CMP      r0,#0xff
000020  d100              BNE      |L1.36|
;;;12     				break;
000022  e002              B        |L1.42|
                  |L1.36|
;;;13     				Buffer_Data_Counter++;
000024  1c58              ADDS     r0,r3,#1
000026  b2c3              UXTB     r3,r0
                  |L1.40|
000028  e7f0              B        |L1.12|
                  |L1.42|
00002a  bf00              NOP                            ;12
;;;14     		}
;;;15     		Buffer_Data_Counter++;
00002c  1c58              ADDS     r0,r3,#1
00002e  b2c3              UXTB     r3,r0
;;;16     		if(Buffer_Data_Counter == 12)   //if the package had been broken
000030  2b0c              CMP      r3,#0xc
000032  d173              BNE      |L1.284|
;;;17         {
;;;18     				long Temp_X,Temp_Y;
;;;19             uint8_t Data_Buffer[8];
;;;20             uint8_t PID_Bit = Receive_Buffer[1]>>4;  //Get The PID Bit
000034  7848              LDRB     r0,[r1,#1]
000036  1106              ASRS     r6,r0,#4
;;;21             if(PID_Bit == ((~(Receive_Buffer[1] & 0x0f)) & 0x0f) )  //PID Verify Success
000038  784f              LDRB     r7,[r1,#1]
00003a  200f              MOVS     r0,#0xf
00003c  43b8              BICS     r0,r0,r7
00003e  42b0              CMP      r0,r6
000040  d16d              BNE      |L1.286|
;;;22             {
;;;23                 uint8_t Temp_Var = 0x00 ;
000042  2000              MOVS     r0,#0
;;;24                 while(1)     //Memory Copy
000044  e008              B        |L1.88|
                  |L1.70|
;;;25                 {
;;;26                     Data_Buffer[Temp_Var] = Receive_Buffer[2+Temp_Var];
000046  1c87              ADDS     r7,r0,#2
000048  5dcf              LDRB     r7,[r1,r7]
00004a  f80d7000          STRB     r7,[sp,r0]
;;;27                     Temp_Var++;
00004e  1c47              ADDS     r7,r0,#1
000050  b2f8              UXTB     r0,r7
;;;28                     if(Temp_Var == 8)
000052  2808              CMP      r0,#8
000054  d100              BNE      |L1.88|
;;;29                         break;
000056  e000              B        |L1.90|
                  |L1.88|
000058  e7f5              B        |L1.70|
                  |L1.90|
00005a  bf00              NOP      
;;;30                 }
;;;31                 if(Receive_Buffer[10] != 0x00)   //Some Byte had been replace
00005c  7a8f              LDRB     r7,[r1,#0xa]
00005e  b1ff              CBZ      r7,|L1.160|
;;;32                 {
;;;33                     uint8_t Temp_Filter = 0x00;
000060  2700              MOVS     r7,#0
;;;34     								Temp_Var = 0;
000062  2000              MOVS     r0,#0
;;;35                     while(1)
000064  e019              B        |L1.154|
                  |L1.102|
;;;36                     {
;;;37                         if(((Receive_Buffer[10] & (Temp_Filter|(0x01<<Temp_Var)))>>Temp_Var) == 1)  //This Byte Need To Adjust
000066  f891800a          LDRB     r8,[r1,#0xa]
00006a  f04f0c01          MOV      r12,#1
00006e  fa0cfc00          LSL      r12,r12,r0
000072  ea4c0c07          ORR      r12,r12,r7
000076  ea080c0c          AND      r12,r8,r12
00007a  fa4cfc00          ASR      r12,r12,r0
00007e  f1bc0f01          CMP      r12,#1
000082  d103              BNE      |L1.140|
;;;38                             Data_Buffer[Temp_Var] = 0xff;    //Adjust to 0xff
000084  f04f0cff          MOV      r12,#0xff
000088  f80dc000          STRB     r12,[sp,r0]
                  |L1.140|
;;;39                         Temp_Var++;
00008c  f1000c01          ADD      r12,r0,#1
000090  f00c00ff          AND      r0,r12,#0xff
;;;40                         if(Temp_Var == 8)
000094  2808              CMP      r0,#8
000096  d100              BNE      |L1.154|
;;;41                             break;
000098  e000              B        |L1.156|
                  |L1.154|
00009a  e7e4              B        |L1.102|
                  |L1.156|
00009c  bf00              NOP      
;;;42                     }
;;;43     						}
00009e  bf00              NOP      
                  |L1.160|
;;;44     						
;;;45                 switch(PID_Bit)
0000a0  2e01              CMP      r6,#1
0000a2  d002              BEQ      |L1.170|
0000a4  2e02              CMP      r6,#2
0000a6  d159              BNE      |L1.348|
0000a8  e03a              B        |L1.288|
                  |L1.170|
;;;46                 {
;;;47                     case LOCATION:
;;;48     										Temp_X = ((Data_Buffer[0] << 24)|(Data_Buffer[1] << 16)|(Data_Buffer[2] << 8)|Data_Buffer[3]);
0000aa  f89d7000          LDRB     r7,[sp,#0]
0000ae  063f              LSLS     r7,r7,#24
0000b0  f89dc001          LDRB     r12,[sp,#1]
0000b4  ea47470c          ORR      r7,r7,r12,LSL #16
0000b8  f89dc002          LDRB     r12,[sp,#2]
0000bc  ea47270c          ORR      r7,r7,r12,LSL #8
0000c0  f89dc003          LDRB     r12,[sp,#3]
0000c4  ea47020c          ORR      r2,r7,r12
;;;49     										Temp_Y = ((Data_Buffer[4] << 24)|(Data_Buffer[5] << 16)|(Data_Buffer[6] << 8)|Data_Buffer[7]);
0000c8  f89d7004          LDRB     r7,[sp,#4]
0000cc  063f              LSLS     r7,r7,#24
0000ce  f89dc005          LDRB     r12,[sp,#5]
0000d2  ea47470c          ORR      r7,r7,r12,LSL #16
0000d6  f89dc006          LDRB     r12,[sp,#6]
0000da  ea47270c          ORR      r7,r7,r12,LSL #8
0000de  f89dc007          LDRB     r12,[sp,#7]
0000e2  ea47040c          ORR      r4,r7,r12
;;;50     									  Receive_Package.X_Possition = (Temp_X/10000.0f);
0000e6  ee002a10          VMOV     s0,r2
0000ea  eef80ac0          VCVT.F32.S32 s1,s0
0000ee  ed9f1a1e          VLDR     s2,|L1.360|
0000f2  ee800a81          VDIV.F32 s0,s1,s2
0000f6  ee107a10          VMOV     r7,s0
0000fa  f8dfc070          LDR      r12,|L1.364|
0000fe  f8cc7000          STR      r7,[r12,#0]  ; Receive_Package
;;;51     										Receive_Package.Y_Possition = (Temp_Y/10000.0f);
000102  ee004a10          VMOV     s0,r4
000106  eef80ac0          VCVT.F32.S32 s1,s0
00010a  ed9f1a17          VLDR     s2,|L1.360|
00010e  ee800a81          VDIV.F32 s0,s1,s2
000112  ee107a10          VMOV     r7,s0
000116  f8cc7004          STR      r7,[r12,#4]  ; Receive_Package
;;;52     										break;
00011a  e01f              B        |L1.348|
                  |L1.284|
00011c  e021              B        |L1.354|
                  |L1.286|
00011e  e01f              B        |L1.352|
                  |L1.288|
;;;53     								case ANGLE:
;;;54     										Temp_X = ((Data_Buffer[0] << 24)|(Data_Buffer[1] << 16)|(Data_Buffer[2] << 8)|Data_Buffer[3]);
000120  f89d7000          LDRB     r7,[sp,#0]
000124  063f              LSLS     r7,r7,#24
000126  f89dc001          LDRB     r12,[sp,#1]
00012a  ea47470c          ORR      r7,r7,r12,LSL #16
00012e  f89dc002          LDRB     r12,[sp,#2]
000132  ea47270c          ORR      r7,r7,r12,LSL #8
000136  f89dc003          LDRB     r12,[sp,#3]
00013a  ea47020c          ORR      r2,r7,r12
;;;55     									  Receive_Package.Angle = (Temp_X/10000.0f);
00013e  ee002a10          VMOV     s0,r2
000142  eef80ac0          VCVT.F32.S32 s1,s0
000146  ed9f1a08          VLDR     s2,|L1.360|
00014a  ee800a81          VDIV.F32 s0,s1,s2
00014e  ee107a10          VMOV     r7,s0
000152  f8dfc018          LDR      r12,|L1.364|
000156  f8cc7008          STR      r7,[r12,#8]  ; Receive_Package
;;;56     										break;
00015a  bf00              NOP      
                  |L1.348|
00015c  bf00              NOP                            ;52
;;;57                 }
;;;58             }
00015e  bf00              NOP      
                  |L1.352|
;;;59     			}
000160  bf00              NOP      
                  |L1.354|
;;;60     }
000162  e8bd81fc          POP      {r2-r8,pc}
                          ENDP

000166  0000              DCW      0x0000
                  |L1.360|
000168  461c4000          DCFS     0x461c4000 ; 10000
                  |L1.364|
                          DCD      Receive_Package

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  Receive_Package
                          %        12

;*** Start embedded assembler ***

#line 1 "Hardware\\Decrypt.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_Decrypt_c_1c0b81ee____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___9_Decrypt_c_1c0b81ee____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_Decrypt_c_1c0b81ee____REVSH|
#line 402
|__asm___9_Decrypt_c_1c0b81ee____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_Decrypt_c_1c0b81ee____RRX|
#line 587
|__asm___9_Decrypt_c_1c0b81ee____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
