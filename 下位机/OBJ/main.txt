; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\main.crf USER\main.c]
                          THUMB

                          AREA ||i.Init_Task||, CODE, READONLY, ALIGN=2

                  Init_Task PROC
;;;2      TaskHandle_t Init_Task_Hanlder;
;;;3      void Init_Task(void* pvParameters)
000000  b570              PUSH     {r4-r6,lr}
;;;4      {
000002  4605              MOV      r5,r0
;;;5      	taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;6      	u8 num=1;
000008  2401              MOVS     r4,#1
;;;7      	oled_init();										//初始化OLED
00000a  f7fffffe          BL       oled_init
;;;8      	oled_LOGO();										//OLED显示RM的LOGO
00000e  f7fffffe          BL       oled_LOGO
;;;9      	Delayms(300);
000012  f44f7096          MOV      r0,#0x12c
000016  f7fffffe          BL       Delayms
;;;10     	oled_clear(Pen_Clear);
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       oled_clear
;;;11     	oled_printf(num,Pen_Write,"OLED Init Success");  //1
000020  a262              ADR      r2,|L1.428|
000022  2101              MOVS     r1,#1
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       oled_printf
;;;12     	LED_Init();											//初始化LED
00002a  f7fffffe          BL       LED_Init
;;;13     	num++;
00002e  1c64              ADDS     r4,r4,#1
;;;14     	oled_printf(num,Pen_Write,"LED Init Success");   //2
000030  a263              ADR      r2,|L1.448|
000032  2101              MOVS     r1,#1
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       oled_printf
;;;15     	Random_Init();									//初始化硬件随机数
00003a  f7fffffe          BL       Random_Init
;;;16     	num++;
00003e  1c64              ADDS     r4,r4,#1
;;;17     	oled_printf(num,Pen_Write,"RNG Init Success");   //3
000040  a264              ADR      r2,|L1.468|
000042  2101              MOVS     r1,#1
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       oled_printf
;;;18     	USART2_init(115200);							//初始化串口2(蓝牙串口)，波特率115200
00004a  f44f30e1          MOV      r0,#0x1c200
00004e  f7fffffe          BL       USART2_init
;;;19     	num++;
000052  1c64              ADDS     r4,r4,#1
;;;20     	oled_printf(num,Pen_Write,"USART2 Init Success");//4
000054  a264              ADR      r2,|L1.488|
000056  2101              MOVS     r1,#1
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       oled_printf
;;;21     	ADC1_Init();										//初始化ADC
00005e  f7fffffe          BL       ADC1_Init
;;;22     	num=1;
000062  2401              MOVS     r4,#1
;;;23     	oled_clear(Pen_Clear);
000064  2000              MOVS     r0,#0
000066  f7fffffe          BL       oled_clear
;;;24     	oled_printf(num,Pen_Write,"ADC1 Init Success");  //1
00006a  a264              ADR      r2,|L1.508|
00006c  2101              MOVS     r1,#1
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       oled_printf
;;;25     	DAC1_Init();										//初始化DAC1
000074  f7fffffe          BL       DAC1_Init
;;;26     	num++;
000078  1c64              ADDS     r4,r4,#1
;;;27     	oled_printf(num,Pen_Write,"DAC1 Init Success");  //2
00007a  a265              ADR      r2,|L1.528|
00007c  2101              MOVS     r1,#1
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       oled_printf
;;;28     	DAC2_Init();										//初始化DAC2
000084  f7fffffe          BL       DAC2_Init
;;;29     	num++;
000088  1c64              ADDS     r4,r4,#1
;;;30     	oled_printf(num,Pen_Write,"DAC2 Init Success");  //3
00008a  a266              ADR      r2,|L1.548|
00008c  2101              MOVS     r1,#1
00008e  4620              MOV      r0,r4
000090  f7fffffe          BL       oled_printf
;;;31     	IIC2_Init();										//初始化IIC2
000094  f7fffffe          BL       IIC2_Init
;;;32     	num++;
000098  1c64              ADDS     r4,r4,#1
;;;33     	oled_printf(num,Pen_Write,"IIC2 Init Success");  //4
00009a  a267              ADR      r2,|L1.568|
00009c  2101              MOVS     r1,#1
00009e  4620              MOV      r0,r4
0000a0  f7fffffe          BL       oled_printf
;;;34     	num=1;
0000a4  2401              MOVS     r4,#1
;;;35     	oled_clear(Pen_Clear);
0000a6  2000              MOVS     r0,#0
0000a8  f7fffffe          BL       oled_clear
;;;36     	Key_Init();											//初始化用户按键
0000ac  f7fffffe          BL       Key_Init
;;;37     	oled_printf(num,Pen_Write,"Key Init Success");   //1
0000b0  a266              ADR      r2,|L1.588|
0000b2  2101              MOVS     r1,#1
0000b4  4620              MOV      r0,r4
0000b6  f7fffffe          BL       oled_printf
;;;38     	num++;
0000ba  1c64              ADDS     r4,r4,#1
;;;39     	oled_printf(num,Pen_Write,"Malloc Init Success"); //2
0000bc  a268              ADR      r2,|L1.608|
0000be  2101              MOVS     r1,#1
0000c0  4620              MOV      r0,r4
0000c2  f7fffffe          BL       oled_printf
;;;40     	Beep_Startup();									//初始化蜂鸣器
0000c6  f7fffffe          BL       Beep_Startup
;;;41     	num++;
0000ca  1c64              ADDS     r4,r4,#1
;;;42     	oled_printf(num,Pen_Write,"Beep Init Success");  //3
0000cc  a269              ADR      r2,|L1.628|
0000ce  2101              MOVS     r1,#1
0000d0  4620              MOV      r0,r4
0000d2  f7fffffe          BL       oled_printf
;;;43     	num++;
0000d6  1c64              ADDS     r4,r4,#1
;;;44     	MX_CAN1_Init();									//初始化CAN1
0000d8  f7fffffe          BL       MX_CAN1_Init
;;;45     	oled_printf(num,Pen_Write,"CAN1 Init Success");  //4
0000dc  a26a              ADR      r2,|L1.648|
0000de  2101              MOVS     r1,#1
0000e0  4620              MOV      r0,r4
0000e2  f7fffffe          BL       oled_printf
;;;46     	num++;
0000e6  1c64              ADDS     r4,r4,#1
;;;47     	num=1;
0000e8  2401              MOVS     r4,#1
;;;48     	oled_clear(Pen_Clear);
0000ea  2000              MOVS     r0,#0
0000ec  f7fffffe          BL       oled_clear
;;;49     	MX_CAN2_Init();									//初始化CAN2
0000f0  f7fffffe          BL       MX_CAN2_Init
;;;50     	oled_printf(num,Pen_Write,"CAN2 Init Success");  //1
0000f4  a269              ADR      r2,|L1.668|
0000f6  2101              MOVS     r1,#1
0000f8  4620              MOV      r0,r4
0000fa  f7fffffe          BL       oled_printf
;;;51     	num++;
0000fe  1c64              ADDS     r4,r4,#1
;;;52     	PWM_Init();											//初始化PWM
000100  f7fffffe          BL       PWM_Init
;;;53     	oled_printf(num,Pen_Write,"PWM Init Success");   //2
000104  a26a              ADR      r2,|L1.688|
000106  2101              MOVS     r1,#1
000108  4620              MOV      r0,r4
00010a  f7fffffe          BL       oled_printf
;;;54     	num++;
00010e  1c64              ADDS     r4,r4,#1
;;;55     	USART3_Init(115200);						//初始化妙算交互口
000110  f44f30e1          MOV      r0,#0x1c200
000114  f7fffffe          BL       USART3_Init
;;;56     	oled_printf(num,Pen_Write,"USART3 Init Success");
000118  a26a              ADR      r2,|L1.708|
00011a  2101              MOVS     r1,#1
00011c  4620              MOV      r0,r4
00011e  f7fffffe          BL       oled_printf
;;;57     	num++;
000122  1c64              ADDS     r4,r4,#1
;;;58     	Laser_Init();										//初始化激光
000124  f7fffffe          BL       Laser_Init
;;;59     	oled_printf(num,Pen_Write,"Laser Init Success");//4
000128  a26b              ADR      r2,|L1.728|
00012a  2101              MOVS     r1,#1
00012c  4620              MOV      r0,r4
00012e  f7fffffe          BL       oled_printf
;;;60     	num++;
000132  1c64              ADDS     r4,r4,#1
;;;61     	num=1;
000134  2401              MOVS     r4,#1
;;;62     	oled_clear(Pen_Clear);
000136  2000              MOVS     r0,#0
000138  f7fffffe          BL       oled_clear
;;;63     	Remote_Init();									//初始化遥控器
00013c  f7fffffe          BL       Remote_Init
;;;64     	oled_printf(num,Pen_Write,"Remote Init Success"); //1
000140  a26a              ADR      r2,|L1.748|
000142  2101              MOVS     r1,#1
000144  4620              MOV      r0,r4
000146  f7fffffe          BL       oled_printf
;;;65     	num++;
00014a  1c64              ADDS     r4,r4,#1
;;;66     	Power_Init();										//初始化供电
00014c  f7fffffe          BL       Power_Init
;;;67     	oled_printf(num,Pen_Write,"Power Init Success"); //2
000150  a26b              ADR      r2,|L1.768|
000152  2101              MOVS     r1,#1
000154  4620              MOV      r0,r4
000156  f7fffffe          BL       oled_printf
;;;68     	num=1;
00015a  2401              MOVS     r4,#1
;;;69     	oled_clear(Pen_Clear);
00015c  2000              MOVS     r0,#0
00015e  f7fffffe          BL       oled_clear
;;;70     	SPI4_Init();										//初始化SPI4
000162  f7fffffe          BL       SPI4_Init
;;;71     	oled_printf(num,Pen_Write,"SPI4 Init Success");  //3
000166  a26b              ADR      r2,|L1.788|
000168  2101              MOVS     r1,#1
00016a  4620              MOV      r0,r4
00016c  f7fffffe          BL       oled_printf
;;;72     	num++;
000170  1c64              ADDS     r4,r4,#1
;;;73     	Motor_Init();										//初始化马达
000172  f7fffffe          BL       Motor_Init
;;;74     	oled_printf(num,Pen_Write,"Motor Init Success"); //4
000176  a26c              ADR      r2,|L1.808|
000178  2101              MOVS     r1,#1
00017a  4620              MOV      r0,r4
00017c  f7fffffe          BL       oled_printf
;;;75     	num++;
000180  1c64              ADDS     r4,r4,#1
;;;76     	num=1;
000182  2401              MOVS     r4,#1
;;;77     	oled_clear(Pen_Clear);
000184  2000              MOVS     r0,#0
000186  f7fffffe          BL       oled_clear
;;;78     	USART2_Receve_Handler.Buffer_Counter=-1;
00018a  1ea0              SUBS     r0,r4,#2
00018c  496b              LDR      r1,|L1.828|
00018e  6048              STR      r0,[r1,#4]  ; USART2_Receve_Handler
;;;79     	USART3_Receve_Handler.Buffer_Counter=-1;
000190  496b              LDR      r1,|L1.832|
000192  6048              STR      r0,[r1,#4]  ; USART3_Receve_Handler
;;;80     	PID_Init();                     //初始化PID参数
000194  f7fffffe          BL       PID_Init
;;;81     	User_Code();										//进入用户代码
000198  f7fffffe          BL       User_Code
;;;82     	taskEXIT_CRITICAL();
00019c  f7fffffe          BL       vPortExitCritical
;;;83     	vTaskDelete(Init_Task_Hanlder);
0001a0  4868              LDR      r0,|L1.836|
0001a2  6800              LDR      r0,[r0,#0]  ; Init_Task_Hanlder
0001a4  f7fffffe          BL       vTaskDelete
;;;84     }
0001a8  bd70              POP      {r4-r6,pc}
;;;85     int main(void)
                          ENDP

0001aa  0000              DCW      0x0000
                  |L1.428|
0001ac  4f4c4544          DCB      "OLED Init Success",0
0001b0  20496e69
0001b4  74205375
0001b8  63636573
0001bc  7300    
0001be  00                DCB      0
0001bf  00                DCB      0
                  |L1.448|
0001c0  4c454420          DCB      "LED Init Success",0
0001c4  496e6974
0001c8  20537563
0001cc  63657373
0001d0  00      
0001d1  00                DCB      0
0001d2  00                DCB      0
0001d3  00                DCB      0
                  |L1.468|
0001d4  524e4720          DCB      "RNG Init Success",0
0001d8  496e6974
0001dc  20537563
0001e0  63657373
0001e4  00      
0001e5  00                DCB      0
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L1.488|
0001e8  55534152          DCB      "USART2 Init Success",0
0001ec  54322049
0001f0  6e697420
0001f4  53756363
0001f8  65737300
                  |L1.508|
0001fc  41444331          DCB      "ADC1 Init Success",0
000200  20496e69
000204  74205375
000208  63636573
00020c  7300    
00020e  00                DCB      0
00020f  00                DCB      0
                  |L1.528|
000210  44414331          DCB      "DAC1 Init Success",0
000214  20496e69
000218  74205375
00021c  63636573
000220  7300    
000222  00                DCB      0
000223  00                DCB      0
                  |L1.548|
000224  44414332          DCB      "DAC2 Init Success",0
000228  20496e69
00022c  74205375
000230  63636573
000234  7300    
000236  00                DCB      0
000237  00                DCB      0
                  |L1.568|
000238  49494332          DCB      "IIC2 Init Success",0
00023c  20496e69
000240  74205375
000244  63636573
000248  7300    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L1.588|
00024c  4b657920          DCB      "Key Init Success",0
000250  496e6974
000254  20537563
000258  63657373
00025c  00      
00025d  00                DCB      0
00025e  00                DCB      0
00025f  00                DCB      0
                  |L1.608|
000260  4d616c6c          DCB      "Malloc Init Success",0
000264  6f632049
000268  6e697420
00026c  53756363
000270  65737300
                  |L1.628|
000274  42656570          DCB      "Beep Init Success",0
000278  20496e69
00027c  74205375
000280  63636573
000284  7300    
000286  00                DCB      0
000287  00                DCB      0
                  |L1.648|
000288  43414e31          DCB      "CAN1 Init Success",0
00028c  20496e69
000290  74205375
000294  63636573
000298  7300    
00029a  00                DCB      0
00029b  00                DCB      0
                  |L1.668|
00029c  43414e32          DCB      "CAN2 Init Success",0
0002a0  20496e69
0002a4  74205375
0002a8  63636573
0002ac  7300    
0002ae  00                DCB      0
0002af  00                DCB      0
                  |L1.688|
0002b0  50574d20          DCB      "PWM Init Success",0
0002b4  496e6974
0002b8  20537563
0002bc  63657373
0002c0  00      
0002c1  00                DCB      0
0002c2  00                DCB      0
0002c3  00                DCB      0
                  |L1.708|
0002c4  55534152          DCB      "USART3 Init Success",0
0002c8  54332049
0002cc  6e697420
0002d0  53756363
0002d4  65737300
                  |L1.728|
0002d8  4c617365          DCB      "Laser Init Success",0
0002dc  7220496e
0002e0  69742053
0002e4  75636365
0002e8  737300  
0002eb  00                DCB      0
                  |L1.748|
0002ec  52656d6f          DCB      "Remote Init Success",0
0002f0  74652049
0002f4  6e697420
0002f8  53756363
0002fc  65737300
                  |L1.768|
000300  506f7765          DCB      "Power Init Success",0
000304  7220496e
000308  69742053
00030c  75636365
000310  737300  
000313  00                DCB      0
                  |L1.788|
000314  53504934          DCB      "SPI4 Init Success",0
000318  20496e69
00031c  74205375
000320  63636573
000324  7300    
000326  00                DCB      0
000327  00                DCB      0
                  |L1.808|
000328  4d6f746f          DCB      "Motor Init Success",0
00032c  7220496e
000330  69742053
000334  75636365
000338  737300  
00033b  00                DCB      0
                  |L1.828|
                          DCD      USART2_Receve_Handler
                  |L1.832|
                          DCD      USART3_Receve_Handler
                  |L1.836|
                          DCD      Init_Task_Hanlder

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;84     }
;;;85     int main(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;86     {
;;;87     	HAL_Init();                     //初始化HAL库    
000002  f7fffffe          BL       HAL_Init
;;;88     	Stm32_Clock_Init(360,12,2,8);   //设置时钟,180Mhz
000006  2308              MOVS     r3,#8
000008  2202              MOVS     r2,#2
00000a  210c              MOVS     r1,#0xc
00000c  f44f70b4          MOV      r0,#0x168
000010  f7fffffe          BL       Stm32_Clock_Init
;;;89     	xTaskCreate((TaskFunction_t)Init_Task,
000014  4807              LDR      r0,|L2.52|
000016  6800              LDR      r0,[r0,#0]  ; Init_Task_Hanlder
000018  2102              MOVS     r1,#2
00001a  2300              MOVS     r3,#0
00001c  2280              MOVS     r2,#0x80
00001e  e9cd1000          STRD     r1,r0,[sp,#0]
000022  a105              ADR      r1,|L2.56|
000024  4807              LDR      r0,|L2.68|
000026  f7fffffe          BL       xTaskCreate
;;;90     							(const char *)"Init_Task",
;;;91     							(uint16_t)128,
;;;92     							(void *)NULL,
;;;93     							(UBaseType_t)2,
;;;94     							(TaskHandle_t *)Init_Task_Hanlder);
;;;95     	vTaskStartScheduler();
00002a  f7fffffe          BL       vTaskStartScheduler
;;;96     }
00002e  2000              MOVS     r0,#0
000030  bd1c              POP      {r2-r4,pc}
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      Init_Task_Hanlder
                  |L2.56|
000038  496e6974          DCB      "Init_Task",0
00003c  5f546173
000040  6b00    
000042  00                DCB      0
000043  00                DCB      0
                  |L2.68|
                          DCD      Init_Task

                          AREA ||.data||, DATA, ALIGN=2

                  Init_Task_Hanlder
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "USER\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_b68fa687____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___6_main_c_b68fa687____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_b68fa687____REVSH|
#line 402
|__asm___6_main_c_b68fa687____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_b68fa687____RRX|
#line 587
|__asm___6_main_c_b68fa687____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
