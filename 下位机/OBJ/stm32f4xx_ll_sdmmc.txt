; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_ll_sdmmc.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm32f4xx_ll_sdmmc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm32f4xx_ll_sdmmc.crf HALLIB\STM32F4xx_HAL_Driver\Src\stm32f4xx_ll_sdmmc.c]
                          THUMB

                          AREA ||i.SDIO_DataConfig||, CODE, READONLY, ALIGN=1

                  SDIO_DataConfig PROC
;;;421      */
;;;422    HAL_StatusTypeDef SDIO_DataConfig(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000000  b510              PUSH     {r4,lr}
;;;423    {
000002  4602              MOV      r2,r0
;;;424      uint32_t tmpreg = 0;
000004  2300              MOVS     r3,#0
;;;425      
;;;426      /* Check the parameters */
;;;427      assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->DataLength));
;;;428      assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->DataBlockSize));
;;;429      assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->TransferDir));
;;;430      assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->TransferMode));
;;;431      assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->DPSM));
;;;432    
;;;433      /* Set the SDIO Data Timeout value */
;;;434      SDIOx->DTIMER = SDIO_DataInitStruct->DataTimeOut;
000006  6808              LDR      r0,[r1,#0]
000008  6250              STR      r0,[r2,#0x24]
;;;435    
;;;436      /* Set the SDIO DataLength value */
;;;437      SDIOx->DLEN = SDIO_DataInitStruct->DataLength;
00000a  6848              LDR      r0,[r1,#4]
00000c  6290              STR      r0,[r2,#0x28]
;;;438    
;;;439      /* Set the SDIO data configuration parameters */
;;;440      tmpreg |= (uint32_t)(SDIO_DataInitStruct->DataBlockSize |\
00000e  e9d10402          LDRD     r0,r4,[r1,#8]
000012  4320              ORRS     r0,r0,r4
000014  690c              LDR      r4,[r1,#0x10]
000016  4320              ORRS     r0,r0,r4
000018  694c              LDR      r4,[r1,#0x14]
00001a  4320              ORRS     r0,r0,r4
00001c  4303              ORRS     r3,r3,r0
;;;441                           SDIO_DataInitStruct->TransferDir   |\
;;;442                           SDIO_DataInitStruct->TransferMode  |\
;;;443                           SDIO_DataInitStruct->DPSM);
;;;444      
;;;445      /* Write to SDIO DCTRL */
;;;446      MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
00001e  6ad0              LDR      r0,[r2,#0x2c]
000020  f02000f7          BIC      r0,r0,#0xf7
000024  4318              ORRS     r0,r0,r3
000026  62d0              STR      r0,[r2,#0x2c]
;;;447    
;;;448      return HAL_OK;
000028  2000              MOVS     r0,#0
;;;449    
;;;450    }
00002a  bd10              POP      {r4,pc}
;;;451    
                          ENDP


                          AREA ||i.SDIO_GetCommandResponse||, CODE, READONLY, ALIGN=1

                  SDIO_GetCommandResponse PROC
;;;384      */
;;;385    uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
000000  4601              MOV      r1,r0
;;;386    {
;;;387      return (uint8_t)(SDIOx->RESPCMD);
000002  6908              LDR      r0,[r1,#0x10]
000004  b2c0              UXTB     r0,r0
;;;388    }
000006  4770              BX       lr
;;;389    
                          ENDP


                          AREA ||i.SDIO_GetDataCounter||, CODE, READONLY, ALIGN=1

                  SDIO_GetDataCounter PROC
;;;456      */
;;;457    uint32_t SDIO_GetDataCounter(SDIO_TypeDef *SDIOx)
000000  4601              MOV      r1,r0
;;;458    {
;;;459      return (SDIOx->DCOUNT);
000002  6b08              LDR      r0,[r1,#0x30]
;;;460    }
000004  4770              BX       lr
;;;461    
                          ENDP


                          AREA ||i.SDIO_GetFIFOCount||, CODE, READONLY, ALIGN=1

                  SDIO_GetFIFOCount PROC
;;;466      */
;;;467    uint32_t SDIO_GetFIFOCount(SDIO_TypeDef *SDIOx)
000000  4601              MOV      r1,r0
;;;468    {
;;;469      return (SDIOx->FIFO);
000002  f8d10080          LDR      r0,[r1,#0x80]
;;;470    }
000006  4770              BX       lr
;;;471    
                          ENDP


                          AREA ||i.SDIO_GetPowerState||, CODE, READONLY, ALIGN=1

                  SDIO_GetPowerState PROC
;;;341      */
;;;342    uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
000000  4601              MOV      r1,r0
;;;343    {
;;;344      return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
000002  6808              LDR      r0,[r1,#0]
000004  f0000003          AND      r0,r0,#3
;;;345    }
000008  4770              BX       lr
;;;346    
                          ENDP


                          AREA ||i.SDIO_GetResponse||, CODE, READONLY, ALIGN=2

                  SDIO_GetResponse PROC
;;;400      */
;;;401    uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
000000  b508              PUSH     {r3,lr}
;;;402    {
000002  4601              MOV      r1,r0
;;;403      __IO uint32_t tmp = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;404    
;;;405      /* Check the parameters */
;;;406      assert_param(IS_SDIO_RESP(SDIO_RESP));
;;;407    
;;;408      /* Get the response */
;;;409      tmp = SDIO_RESP_ADDR + SDIO_RESP;
000008  4802              LDR      r0,|L6.20|
00000a  4408              ADD      r0,r0,r1
00000c  9000              STR      r0,[sp,#0]
;;;410      
;;;411      return (*(__IO uint32_t *) tmp);
00000e  9800              LDR      r0,[sp,#0]
000010  6800              LDR      r0,[r0,#0]
;;;412    }  
000012  bd08              POP      {r3,pc}
;;;413    
                          ENDP

                  |L6.20|
                          DCD      0x40012c14

                          AREA ||i.SDIO_Init||, CODE, READONLY, ALIGN=1

                  SDIO_Init PROC
;;;215      */
;;;216    HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
000000  b40f              PUSH     {r0-r3}
;;;217    {
000002  b510              PUSH     {r4,lr}
000004  4604              MOV      r4,r0
;;;218      uint32_t tmpreg = 0; 
000006  2100              MOVS     r1,#0
;;;219    
;;;220      /* Check the parameters */
;;;221      assert_param(IS_SDIO_ALL_INSTANCE(SDIOx));
;;;222      assert_param(IS_SDIO_CLOCK_EDGE(Init.ClockEdge)); 
;;;223      assert_param(IS_SDIO_CLOCK_BYPASS(Init.ClockBypass));
;;;224      assert_param(IS_SDIO_CLOCK_POWER_SAVE(Init.ClockPowerSave));
;;;225      assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
;;;226      assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
;;;227      assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
;;;228      
;;;229      /* Set SDIO configuration parameters */
;;;230      tmpreg |= (Init.ClockEdge           |\
000008  e9dd0203          LDRD     r0,r2,[sp,#0xc]
00000c  4310              ORRS     r0,r0,r2
00000e  9a05              LDR      r2,[sp,#0x14]
000010  4310              ORRS     r0,r0,r2
000012  9a06              LDR      r2,[sp,#0x18]
000014  4310              ORRS     r0,r0,r2
000016  9a07              LDR      r2,[sp,#0x1c]
000018  4310              ORRS     r0,r0,r2
00001a  9a08              LDR      r2,[sp,#0x20]
00001c  4310              ORRS     r0,r0,r2
00001e  4301              ORRS     r1,r1,r0
;;;231                 Init.ClockBypass         |\
;;;232                 Init.ClockPowerSave      |\
;;;233                 Init.BusWide             |\
;;;234                 Init.HardwareFlowControl |\
;;;235                 Init.ClockDiv
;;;236                 ); 
;;;237      
;;;238      /* Write to SDIO CLKCR */
;;;239      MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
000020  6860              LDR      r0,[r4,#4]
000022  f64762ff          MOV      r2,#0x7eff
000026  4390              BICS     r0,r0,r2
000028  4308              ORRS     r0,r0,r1
00002a  6060              STR      r0,[r4,#4]
;;;240    
;;;241      return HAL_OK;
00002c  2000              MOVS     r0,#0
;;;242    }
00002e  bc10              POP      {r4}
000030  f85dfb14          LDR      pc,[sp],#0x14
;;;243    
                          ENDP


                          AREA ||i.SDIO_PowerState_OFF||, CODE, READONLY, ALIGN=1

                  SDIO_PowerState_OFF PROC
;;;324      */
;;;325    HAL_StatusTypeDef SDIO_PowerState_OFF(SDIO_TypeDef *SDIOx)
000000  4601              MOV      r1,r0
;;;326    {
;;;327      /* Set power state to OFF */
;;;328      SDIOx->POWER = (uint32_t)0x00000000;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;329      
;;;330      return HAL_OK;
;;;331    }
000006  4770              BX       lr
;;;332    
                          ENDP


                          AREA ||i.SDIO_PowerState_ON||, CODE, READONLY, ALIGN=1

                  SDIO_PowerState_ON PROC
;;;311      */
;;;312    HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
000000  4601              MOV      r1,r0
;;;313    {  
;;;314      /* Set power state to ON */ 
;;;315      SDIOx->POWER = SDIO_POWER_PWRCTRL;
000002  2003              MOVS     r0,#3
000004  6008              STR      r0,[r1,#0]
;;;316      
;;;317      return HAL_OK; 
000006  2000              MOVS     r0,#0
;;;318    }
000008  4770              BX       lr
;;;319    
                          ENDP


                          AREA ||i.SDIO_ReadFIFO||, CODE, READONLY, ALIGN=1

                  SDIO_ReadFIFO PROC
;;;267      */
;;;268    uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
000000  4601              MOV      r1,r0
;;;269    {
;;;270      /* Read data from Rx FIFO */ 
;;;271      return (SDIOx->FIFO);
000002  f8d10080          LDR      r0,[r1,#0x80]
;;;272    }
000006  4770              BX       lr
;;;273    
                          ENDP


                          AREA ||i.SDIO_SendCommand||, CODE, READONLY, ALIGN=1

                  SDIO_SendCommand PROC
;;;354      */
;;;355    HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
000000  b510              PUSH     {r4,lr}
;;;356    {
000002  4602              MOV      r2,r0
;;;357      uint32_t tmpreg = 0;
000004  2300              MOVS     r3,#0
;;;358      
;;;359      /* Check the parameters */
;;;360      assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->CmdIndex));
;;;361      assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->Response));
;;;362      assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->WaitForInterrupt));
;;;363      assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->CPSM));
;;;364    
;;;365      /* Set the SDIO Argument value */
;;;366      SDIOx->ARG = SDIO_CmdInitStruct->Argument;
000006  6808              LDR      r0,[r1,#0]
000008  6090              STR      r0,[r2,#8]
;;;367    
;;;368      /* Set SDIO command parameters */
;;;369      tmpreg |= (uint32_t)(SDIO_CmdInitStruct->CmdIndex         |\
00000a  e9d10401          LDRD     r0,r4,[r1,#4]
00000e  4320              ORRS     r0,r0,r4
000010  68cc              LDR      r4,[r1,#0xc]
000012  4320              ORRS     r0,r0,r4
000014  690c              LDR      r4,[r1,#0x10]
000016  4320              ORRS     r0,r0,r4
000018  4303              ORRS     r3,r3,r0
;;;370                           SDIO_CmdInitStruct->Response         |\
;;;371                           SDIO_CmdInitStruct->WaitForInterrupt |\
;;;372                           SDIO_CmdInitStruct->CPSM);
;;;373      
;;;374      /* Write to SDIO CMD register */
;;;375      MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
00001a  68d0              LDR      r0,[r2,#0xc]
00001c  f36f000b          BFC      r0,#0,#12
000020  4318              ORRS     r0,r0,r3
000022  60d0              STR      r0,[r2,#0xc]
;;;376      
;;;377      return HAL_OK;  
000024  2000              MOVS     r0,#0
;;;378    }
000026  bd10              POP      {r4,pc}
;;;379    
                          ENDP


                          AREA ||i.SDIO_SetSDIOReadWaitMode||, CODE, READONLY, ALIGN=2

                  SDIO_SetSDIOReadWaitMode PROC
;;;480      */
;;;481    HAL_StatusTypeDef SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
000000  4601              MOV      r1,r0
;;;482    {
;;;483      /* Check the parameters */
;;;484      assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
;;;485      
;;;486      *(__IO uint32_t *)DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
000002  4802              LDR      r0,|L12.12|
000004  6001              STR      r1,[r0,#0]
;;;487      
;;;488      return HAL_OK;  
000006  2000              MOVS     r0,#0
;;;489    }
000008  4770              BX       lr
;;;490    
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      0x422585a8

                          AREA ||i.SDIO_WriteFIFO||, CODE, READONLY, ALIGN=1

                  SDIO_WriteFIFO PROC
;;;279      */
;;;280    HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
000000  4602              MOV      r2,r0
;;;281    { 
;;;282      /* Write data to FIFO */ 
;;;283      SDIOx->FIFO = *pWriteData;
000002  6808              LDR      r0,[r1,#0]
000004  f8c20080          STR      r0,[r2,#0x80]
;;;284    
;;;285      return HAL_OK;
000008  2000              MOVS     r0,#0
;;;286    }
00000a  4770              BX       lr
;;;287    
                          ENDP


;*** Start embedded assembler ***

#line 1 "HALLIB\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_ll_sdmmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_ll_sdmmc_c_d2dde155____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___20_stm32f4xx_ll_sdmmc_c_d2dde155____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_ll_sdmmc_c_d2dde155____REVSH|
#line 402
|__asm___20_stm32f4xx_ll_sdmmc_c_d2dde155____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_ll_sdmmc_c_d2dde155____RRX|
#line 587
|__asm___20_stm32f4xx_ll_sdmmc_c_d2dde155____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
