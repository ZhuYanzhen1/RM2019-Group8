; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32f4xx_hal_adc_ex.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm32f4xx_hal_adc_ex.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm32f4xx_hal_adc_ex.crf HALLIB\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_adc_ex.c]
                          THUMB

                          AREA ||i.ADC_MultiModeDMAConvCplt||, CODE, READONLY, ALIGN=1

                  ADC_MultiModeDMAConvCplt PROC
;;;813      */
;;;814    static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;815    {
000002  4605              MOV      r5,r0
;;;816        ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;817        
;;;818      /* Check if an injected conversion is ready */
;;;819      if(hadc->State == HAL_ADC_STATE_EOC_INJ)
000006  f894003d          LDRB     r0,[r4,#0x3d]
00000a  2825              CMP      r0,#0x25
00000c  d103              BNE      |L1.22|
;;;820      {
;;;821        /* Change ADC state */
;;;822        hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
00000e  2035              MOVS     r0,#0x35
000010  f884003d          STRB     r0,[r4,#0x3d]
000014  e002              B        |L1.28|
                  |L1.22|
;;;823      }
;;;824      else
;;;825      {
;;;826        /* Change ADC state */
;;;827        hadc->State = HAL_ADC_STATE_EOC_REG;
000016  2015              MOVS     r0,#0x15
000018  f884003d          STRB     r0,[r4,#0x3d]
                  |L1.28|
;;;828      }
;;;829        
;;;830        HAL_ADC_ConvCpltCallback(hadc); 
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       HAL_ADC_ConvCpltCallback
;;;831    }
000022  bd70              POP      {r4-r6,pc}
;;;832    
                          ENDP


                          AREA ||i.ADC_MultiModeDMAError||, CODE, READONLY, ALIGN=1

                  ADC_MultiModeDMAError PROC
;;;851      */
;;;852    static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;853    {
000002  4605              MOV      r5,r0
;;;854        ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;855        hadc->State= HAL_ADC_STATE_ERROR;
000006  2004              MOVS     r0,#4
000008  f884003d          STRB     r0,[r4,#0x3d]
;;;856        /* Set ADC error code to DMA error */
;;;857        hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
00000c  6c20              LDR      r0,[r4,#0x40]
00000e  f0400002          ORR      r0,r0,#2
000012  6420              STR      r0,[r4,#0x40]
;;;858        HAL_ADC_ErrorCallback(hadc); 
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       HAL_ADC_ErrorCallback
;;;859    }
00001a  bd70              POP      {r4-r6,pc}
;;;860    
                          ENDP


                          AREA ||i.ADC_MultiModeDMAHalfConvCplt||, CODE, READONLY, ALIGN=1

                  ADC_MultiModeDMAHalfConvCplt PROC
;;;838      */
;;;839    static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;840    {
000002  4604              MOV      r4,r0
;;;841        ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;842        /* Conversion complete callback */
;;;843        HAL_ADC_ConvHalfCpltCallback(hadc); 
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HAL_ADC_ConvHalfCpltCallback
;;;844    }
00000c  bd70              POP      {r4-r6,pc}
;;;845    
                          ENDP


                          AREA ||i.HAL_ADCEx_InjectedConfigChannel||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_InjectedConfigChannel PROC
;;;618      */
;;;619    HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
000000  b510              PUSH     {r4,lr}
;;;620    {
000002  4602              MOV      r2,r0
;;;621      
;;;622    #ifdef USE_FULL_ASSERT  
;;;623      uint32_t tmp = 0;
;;;624    #endif /* USE_FULL_ASSERT  */
;;;625      
;;;626      /* Check the parameters */
;;;627      assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
;;;628      assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
;;;629      assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
;;;630      assert_param(IS_ADC_EXT_INJEC_TRIG(sConfigInjected->ExternalTrigInjecConv));
;;;631      assert_param(IS_ADC_INJECTED_LENGTH(sConfigInjected->InjectedNbrOfConversion));
;;;632      assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
;;;633      assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
;;;634    
;;;635    #ifdef USE_FULL_ASSERT
;;;636      tmp = ADC_GET_RESOLUTION(hadc);
;;;637      assert_param(IS_ADC_RANGE(tmp, sConfigInjected->InjectedOffset));
;;;638    #endif /* USE_FULL_ASSERT  */
;;;639    
;;;640      if(sConfigInjected->ExternalTrigInjecConvEdge != ADC_INJECTED_SOFTWARE_START)
000004  4b88              LDR      r3,|L4.552|
000006  69c8              LDR      r0,[r1,#0x1c]
000008  4298              CMP      r0,r3
00000a  d000              BEQ      |L4.14|
;;;641      {
;;;642        assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
00000c  bf00              NOP      
                  |L4.14|
;;;643      }
;;;644    
;;;645      /* Process locked */
;;;646      __HAL_LOCK(hadc);
00000e  bf00              NOP      
000010  f892003c          LDRB     r0,[r2,#0x3c]
000014  2801              CMP      r0,#1
000016  d101              BNE      |L4.28|
000018  2002              MOVS     r0,#2
                  |L4.26|
;;;647      
;;;648      /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
;;;649      if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
;;;650      {
;;;651        /* Clear the old sample time */
;;;652        hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
;;;653        
;;;654        /* Set the new sample time */
;;;655        hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
;;;656      }
;;;657      else /* ADC_Channel include in ADC_Channel_[0..9] */
;;;658      {
;;;659        /* Clear the old sample time */
;;;660        hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
;;;661        
;;;662        /* Set the new sample time */
;;;663        hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
;;;664      }
;;;665      
;;;666      /*---------------------------- ADCx JSQR Configuration -----------------*/
;;;667      hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
;;;668      hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
;;;669      
;;;670      /* Rank configuration */
;;;671      
;;;672      /* Clear the old SQx bits for the selected rank */
;;;673      hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
;;;674       
;;;675      /* Set the SQx bits for the selected rank */
;;;676      hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
;;;677    
;;;678      /* Enable external trigger if trigger selection is different of software  */
;;;679      /* start.                                                                 */
;;;680      /* Note: This configuration keeps the hardware feature of parameter       */
;;;681      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
;;;682      /*       software start.                                                  */ 
;;;683      if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
;;;684      {  
;;;685        /* Select external trigger to start conversion */
;;;686        hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
;;;687        hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
;;;688        
;;;689        /* Select external trigger polarity */
;;;690        hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
;;;691        hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
;;;692      }
;;;693      else
;;;694      {
;;;695        /* Reset the external trigger */
;;;696        hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
;;;697        hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
;;;698      }
;;;699      
;;;700      if (sConfigInjected->AutoInjectedConv != DISABLE)
;;;701      {
;;;702        /* Enable the selected ADC automatic injected group conversion */
;;;703        hadc->Instance->CR1 |= ADC_CR1_JAUTO;
;;;704      }
;;;705      else
;;;706      {
;;;707        /* Disable the selected ADC automatic injected group conversion */
;;;708        hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
;;;709      }
;;;710      
;;;711      if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
;;;712      {
;;;713        /* Enable the selected ADC injected discontinuous mode */
;;;714        hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
;;;715      }
;;;716      else
;;;717      {
;;;718        /* Disable the selected ADC injected discontinuous mode */
;;;719        hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
;;;720      }
;;;721      
;;;722      switch(sConfigInjected->InjectedRank)
;;;723      {
;;;724        case 1:
;;;725          /* Set injected channel 1 offset */
;;;726          hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
;;;727          hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
;;;728          break;
;;;729        case 2:
;;;730          /* Set injected channel 2 offset */
;;;731          hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
;;;732          hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
;;;733          break;
;;;734        case 3:
;;;735          /* Set injected channel 3 offset */
;;;736          hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
;;;737          hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
;;;738          break;
;;;739        default:
;;;740          /* Set injected channel 4 offset */
;;;741          hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
;;;742          hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
;;;743          break;
;;;744      }
;;;745      
;;;746      /* if ADC1 Channel_18 is selected enable VBAT Channel */
;;;747      if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
;;;748      {
;;;749        /* Enable the VBAT channel*/
;;;750        ADC->CCR |= ADC_CCR_VBATE;
;;;751      }
;;;752      
;;;753      /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
;;;754      if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
;;;755      {
;;;756        /* Enable the TSVREFE channel*/
;;;757        ADC->CCR |= ADC_CCR_TSVREFE;
;;;758      }
;;;759      
;;;760      /* Process unlocked */
;;;761      __HAL_UNLOCK(hadc);
;;;762      
;;;763      /* Return function status */
;;;764      return HAL_OK;
;;;765    }
00001a  bd10              POP      {r4,pc}
                  |L4.28|
00001c  2001              MOVS     r0,#1                 ;646
00001e  f882003c          STRB     r0,[r2,#0x3c]         ;646
000022  bf00              NOP                            ;646
000024  6808              LDR      r0,[r1,#0]            ;649
000026  2809              CMP      r0,#9                 ;649
000028  d916              BLS      |L4.88|
00002a  6810              LDR      r0,[r2,#0]            ;652
00002c  68c0              LDR      r0,[r0,#0xc]          ;652
00002e  780b              LDRB     r3,[r1,#0]            ;652
000030  3b0a              SUBS     r3,r3,#0xa            ;652
000032  eb030443          ADD      r4,r3,r3,LSL #1       ;652
000036  2307              MOVS     r3,#7                 ;652
000038  40a3              LSLS     r3,r3,r4              ;652
00003a  4398              BICS     r0,r0,r3              ;652
00003c  6813              LDR      r3,[r2,#0]            ;652
00003e  60d8              STR      r0,[r3,#0xc]          ;652
000040  780b              LDRB     r3,[r1,#0]            ;655
000042  3b0a              SUBS     r3,r3,#0xa            ;655
000044  eb030343          ADD      r3,r3,r3,LSL #1       ;655
000048  6888              LDR      r0,[r1,#8]            ;655
00004a  4098              LSLS     r0,r0,r3              ;655
00004c  6813              LDR      r3,[r2,#0]            ;655
00004e  68db              LDR      r3,[r3,#0xc]          ;655
000050  4318              ORRS     r0,r0,r3              ;655
000052  6813              LDR      r3,[r2,#0]            ;655
000054  60d8              STR      r0,[r3,#0xc]          ;655
000056  e013              B        |L4.128|
                  |L4.88|
000058  6810              LDR      r0,[r2,#0]            ;660
00005a  6900              LDR      r0,[r0,#0x10]         ;660
00005c  780b              LDRB     r3,[r1,#0]            ;660
00005e  eb030443          ADD      r4,r3,r3,LSL #1       ;660
000062  2307              MOVS     r3,#7                 ;660
000064  40a3              LSLS     r3,r3,r4              ;660
000066  4398              BICS     r0,r0,r3              ;660
000068  6813              LDR      r3,[r2,#0]            ;660
00006a  6118              STR      r0,[r3,#0x10]         ;660
00006c  780b              LDRB     r3,[r1,#0]            ;663
00006e  eb030343          ADD      r3,r3,r3,LSL #1       ;663
000072  6888              LDR      r0,[r1,#8]            ;663
000074  4098              LSLS     r0,r0,r3              ;663
000076  6813              LDR      r3,[r2,#0]            ;663
000078  691b              LDR      r3,[r3,#0x10]         ;663
00007a  4318              ORRS     r0,r0,r3              ;663
00007c  6813              LDR      r3,[r2,#0]            ;663
00007e  6118              STR      r0,[r3,#0x10]         ;663
                  |L4.128|
000080  6810              LDR      r0,[r2,#0]            ;667
000082  6b80              LDR      r0,[r0,#0x38]         ;667
000084  f4201040          BIC      r0,r0,#0x300000       ;667
000088  6813              LDR      r3,[r2,#0]            ;667
00008a  6398              STR      r0,[r3,#0x38]         ;667
00008c  6810              LDR      r0,[r2,#0]            ;668
00008e  6b83              LDR      r3,[r0,#0x38]         ;668
000090  8a08              LDRH     r0,[r1,#0x10]         ;668
000092  1e40              SUBS     r0,r0,#1              ;668
000094  ea435000          ORR      r0,r3,r0,LSL #20      ;668
000098  6813              LDR      r3,[r2,#0]            ;668
00009a  6398              STR      r0,[r3,#0x38]         ;668
00009c  7908              LDRB     r0,[r1,#4]            ;673
00009e  1cc0              ADDS     r0,r0,#3              ;673
0000a0  7c0b              LDRB     r3,[r1,#0x10]         ;673
0000a2  1ac0              SUBS     r0,r0,r3              ;673
0000a4  eb000380          ADD      r3,r0,r0,LSL #2       ;673
0000a8  201f              MOVS     r0,#0x1f              ;673
0000aa  4098              LSLS     r0,r0,r3              ;673
0000ac  6813              LDR      r3,[r2,#0]            ;673
0000ae  6b9b              LDR      r3,[r3,#0x38]         ;673
0000b0  4383              BICS     r3,r3,r0              ;673
0000b2  6810              LDR      r0,[r2,#0]            ;673
0000b4  6383              STR      r3,[r0,#0x38]         ;673
0000b6  7908              LDRB     r0,[r1,#4]            ;676
0000b8  1cc0              ADDS     r0,r0,#3              ;676
0000ba  7c0b              LDRB     r3,[r1,#0x10]         ;676
0000bc  1ac0              SUBS     r0,r0,r3              ;676
0000be  eb000380          ADD      r3,r0,r0,LSL #2       ;676
0000c2  8808              LDRH     r0,[r1,#0]            ;676
0000c4  b280              UXTH     r0,r0                 ;676
0000c6  4098              LSLS     r0,r0,r3              ;676
0000c8  6813              LDR      r3,[r2,#0]            ;676
0000ca  6b9b              LDR      r3,[r3,#0x38]         ;676
0000cc  4318              ORRS     r0,r0,r3              ;676
0000ce  6813              LDR      r3,[r2,#0]            ;676
0000d0  6398              STR      r0,[r3,#0x38]         ;676
0000d2  4b55              LDR      r3,|L4.552|
0000d4  6a08              LDR      r0,[r1,#0x20]         ;683
0000d6  4298              CMP      r0,r3                 ;683
0000d8  d018              BEQ      |L4.268|
0000da  6810              LDR      r0,[r2,#0]            ;686
0000dc  6880              LDR      r0,[r0,#8]            ;686
0000de  f4202070          BIC      r0,r0,#0xf0000        ;686
0000e2  6813              LDR      r3,[r2,#0]            ;686
0000e4  6098              STR      r0,[r3,#8]            ;686
0000e6  6810              LDR      r0,[r2,#0]            ;687
0000e8  6880              LDR      r0,[r0,#8]            ;687
0000ea  6a0b              LDR      r3,[r1,#0x20]         ;687
0000ec  4318              ORRS     r0,r0,r3              ;687
0000ee  6813              LDR      r3,[r2,#0]            ;687
0000f0  6098              STR      r0,[r3,#8]            ;687
0000f2  6810              LDR      r0,[r2,#0]            ;690
0000f4  6880              LDR      r0,[r0,#8]            ;690
0000f6  f4201040          BIC      r0,r0,#0x300000       ;690
0000fa  6813              LDR      r3,[r2,#0]            ;690
0000fc  6098              STR      r0,[r3,#8]            ;690
0000fe  6810              LDR      r0,[r2,#0]            ;691
000100  6880              LDR      r0,[r0,#8]            ;691
000102  69cb              LDR      r3,[r1,#0x1c]         ;691
000104  4318              ORRS     r0,r0,r3              ;691
000106  6813              LDR      r3,[r2,#0]            ;691
000108  6098              STR      r0,[r3,#8]            ;691
00010a  e00b              B        |L4.292|
                  |L4.268|
00010c  6810              LDR      r0,[r2,#0]            ;696
00010e  6880              LDR      r0,[r0,#8]            ;696
000110  f4202070          BIC      r0,r0,#0xf0000        ;696
000114  6813              LDR      r3,[r2,#0]            ;696
000116  6098              STR      r0,[r3,#8]            ;696
000118  6810              LDR      r0,[r2,#0]            ;697
00011a  6880              LDR      r0,[r0,#8]            ;697
00011c  f4201040          BIC      r0,r0,#0x300000       ;697
000120  6813              LDR      r3,[r2,#0]            ;697
000122  6098              STR      r0,[r3,#8]            ;697
                  |L4.292|
000124  6948              LDR      r0,[r1,#0x14]         ;700
000126  b130              CBZ      r0,|L4.310|
000128  6810              LDR      r0,[r2,#0]            ;703
00012a  6840              LDR      r0,[r0,#4]            ;703
00012c  f4406080          ORR      r0,r0,#0x400          ;703
000130  6813              LDR      r3,[r2,#0]            ;703
000132  6058              STR      r0,[r3,#4]            ;703
000134  e005              B        |L4.322|
                  |L4.310|
000136  6810              LDR      r0,[r2,#0]            ;708
000138  6840              LDR      r0,[r0,#4]            ;708
00013a  f4206080          BIC      r0,r0,#0x400          ;708
00013e  6813              LDR      r3,[r2,#0]            ;708
000140  6058              STR      r0,[r3,#4]            ;708
                  |L4.322|
000142  6988              LDR      r0,[r1,#0x18]         ;711
000144  b130              CBZ      r0,|L4.340|
000146  6810              LDR      r0,[r2,#0]            ;714
000148  6840              LDR      r0,[r0,#4]            ;714
00014a  f4405080          ORR      r0,r0,#0x1000         ;714
00014e  6813              LDR      r3,[r2,#0]            ;714
000150  6058              STR      r0,[r3,#4]            ;714
000152  e005              B        |L4.352|
                  |L4.340|
000154  6810              LDR      r0,[r2,#0]            ;719
000156  6840              LDR      r0,[r0,#4]            ;719
000158  f4205080          BIC      r0,r0,#0x1000         ;719
00015c  6813              LDR      r3,[r2,#0]            ;719
00015e  6058              STR      r0,[r3,#4]            ;719
                  |L4.352|
000160  6848              LDR      r0,[r1,#4]            ;722
000162  2801              CMP      r0,#1                 ;722
000164  d004              BEQ      |L4.368|
000166  2802              CMP      r0,#2                 ;722
000168  d00f              BEQ      |L4.394|
00016a  2803              CMP      r0,#3                 ;722
00016c  d127              BNE      |L4.446|
00016e  e019              B        |L4.420|
                  |L4.368|
000170  6810              LDR      r0,[r2,#0]            ;726
000172  6940              LDR      r0,[r0,#0x14]         ;726
000174  f36f000b          BFC      r0,#0,#12             ;726
000178  6813              LDR      r3,[r2,#0]            ;726
00017a  6158              STR      r0,[r3,#0x14]         ;726
00017c  6810              LDR      r0,[r2,#0]            ;727
00017e  6940              LDR      r0,[r0,#0x14]         ;727
000180  68cb              LDR      r3,[r1,#0xc]          ;727
000182  4318              ORRS     r0,r0,r3              ;727
000184  6813              LDR      r3,[r2,#0]            ;727
000186  6158              STR      r0,[r3,#0x14]         ;727
000188  e026              B        |L4.472|
                  |L4.394|
00018a  6810              LDR      r0,[r2,#0]            ;731
00018c  6980              LDR      r0,[r0,#0x18]         ;731
00018e  f36f000b          BFC      r0,#0,#12             ;731
000192  6813              LDR      r3,[r2,#0]            ;731
000194  6198              STR      r0,[r3,#0x18]         ;731
000196  6810              LDR      r0,[r2,#0]            ;732
000198  6980              LDR      r0,[r0,#0x18]         ;732
00019a  68cb              LDR      r3,[r1,#0xc]          ;732
00019c  4318              ORRS     r0,r0,r3              ;732
00019e  6813              LDR      r3,[r2,#0]            ;732
0001a0  6198              STR      r0,[r3,#0x18]         ;732
0001a2  e019              B        |L4.472|
                  |L4.420|
0001a4  6810              LDR      r0,[r2,#0]            ;736
0001a6  69c0              LDR      r0,[r0,#0x1c]         ;736
0001a8  f36f000b          BFC      r0,#0,#12             ;736
0001ac  6813              LDR      r3,[r2,#0]            ;736
0001ae  61d8              STR      r0,[r3,#0x1c]         ;736
0001b0  6810              LDR      r0,[r2,#0]            ;737
0001b2  69c0              LDR      r0,[r0,#0x1c]         ;737
0001b4  68cb              LDR      r3,[r1,#0xc]          ;737
0001b6  4318              ORRS     r0,r0,r3              ;737
0001b8  6813              LDR      r3,[r2,#0]            ;737
0001ba  61d8              STR      r0,[r3,#0x1c]         ;737
0001bc  e00c              B        |L4.472|
                  |L4.446|
0001be  6810              LDR      r0,[r2,#0]            ;741
0001c0  6a00              LDR      r0,[r0,#0x20]         ;741
0001c2  f36f000b          BFC      r0,#0,#12             ;741
0001c6  6813              LDR      r3,[r2,#0]            ;741
0001c8  6218              STR      r0,[r3,#0x20]         ;741
0001ca  6810              LDR      r0,[r2,#0]            ;742
0001cc  6a00              LDR      r0,[r0,#0x20]         ;742
0001ce  68cb              LDR      r3,[r1,#0xc]          ;742
0001d0  4318              ORRS     r0,r0,r3              ;742
0001d2  6813              LDR      r3,[r2,#0]            ;742
0001d4  6218              STR      r0,[r3,#0x20]         ;742
0001d6  bf00              NOP                            ;743
                  |L4.472|
0001d8  bf00              NOP                            ;728
0001da  4b14              LDR      r3,|L4.556|
0001dc  6810              LDR      r0,[r2,#0]            ;747
0001de  4298              CMP      r0,r3                 ;747
0001e0  d108              BNE      |L4.500|
0001e2  6808              LDR      r0,[r1,#0]            ;747
0001e4  2812              CMP      r0,#0x12              ;747
0001e6  d105              BNE      |L4.500|
0001e8  4811              LDR      r0,|L4.560|
0001ea  6800              LDR      r0,[r0,#0]            ;750
0001ec  f4400080          ORR      r0,r0,#0x400000       ;750
0001f0  f8c30304          STR      r0,[r3,#0x304]        ;750
                  |L4.500|
0001f4  4b0d              LDR      r3,|L4.556|
0001f6  6810              LDR      r0,[r2,#0]            ;754
0001f8  4298              CMP      r0,r3                 ;754
0001fa  d10d              BNE      |L4.536|
0001fc  4b0d              LDR      r3,|L4.564|
0001fe  6808              LDR      r0,[r1,#0]            ;754
000200  4298              CMP      r0,r3                 ;754
000202  d002              BEQ      |L4.522|
000204  6808              LDR      r0,[r1,#0]            ;754
000206  2811              CMP      r0,#0x11              ;754
000208  d106              BNE      |L4.536|
                  |L4.522|
00020a  4809              LDR      r0,|L4.560|
00020c  6800              LDR      r0,[r0,#0]            ;757
00020e  f4400000          ORR      r0,r0,#0x800000       ;757
000212  4b06              LDR      r3,|L4.556|
000214  f8c30304          STR      r0,[r3,#0x304]        ;757
                  |L4.536|
000218  bf00              NOP                            ;761
00021a  2000              MOVS     r0,#0                 ;761
00021c  f882003c          STRB     r0,[r2,#0x3c]         ;761
000220  bf00              NOP                            ;761
000222  bf00              NOP                            ;764
000224  e6f9              B        |L4.26|
;;;766    
                          ENDP

000226  0000              DCW      0x0000
                  |L4.552|
                          DCD      0x000f0001
                  |L4.556|
                          DCD      0x40012000
                  |L4.560|
                          DCD      0x40012304
                  |L4.564|
                          DCD      0x10000012

                          AREA ||i.HAL_ADCEx_InjectedConvCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_InjectedConvCpltCallback PROC
;;;601      */
;;;602    __weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
000000  4770              BX       lr
;;;603    {
;;;604      /* Prevent unused argument(s) compilation warning */
;;;605      UNUSED(hadc);
;;;606      /* NOTE : This function Should not be modified, when the callback is needed,
;;;607                the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
;;;608       */
;;;609    }
;;;610    
                          ENDP


                          AREA ||i.HAL_ADCEx_InjectedGetValue||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_InjectedGetValue PROC
;;;428      */
;;;429    uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
000000  b508              PUSH     {r3,lr}
;;;430    {
000002  4602              MOV      r2,r0
;;;431      __IO uint32_t tmp = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;432      
;;;433      /* Check the parameters */
;;;434      assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
;;;435      
;;;436       /* Clear the ADCx's flag for injected end of conversion */
;;;437       __HAL_ADC_CLEAR_FLAG(hadc,ADC_FLAG_JEOC);
000008  1f40              SUBS     r0,r0,#5
00000a  6813              LDR      r3,[r2,#0]
00000c  6018              STR      r0,[r3,#0]
;;;438      
;;;439      /* Return the selected ADC converted value */ 
;;;440      switch(InjectedRank)
00000e  2901              CMP      r1,#1
000010  d011              BEQ      |L6.54|
000012  2902              CMP      r1,#2
000014  d00b              BEQ      |L6.46|
000016  2903              CMP      r1,#3
000018  d005              BEQ      |L6.38|
00001a  2904              CMP      r1,#4
00001c  d10f              BNE      |L6.62|
;;;441      {  
;;;442        case ADC_INJECTED_RANK_4:
;;;443        {
;;;444          tmp =  hadc->Instance->JDR4;
00001e  6810              LDR      r0,[r2,#0]
000020  6c80              LDR      r0,[r0,#0x48]
000022  9000              STR      r0,[sp,#0]
;;;445        }  
;;;446        break;
000024  e00c              B        |L6.64|
                  |L6.38|
;;;447        case ADC_INJECTED_RANK_3: 
;;;448        {  
;;;449          tmp =  hadc->Instance->JDR3;
000026  6810              LDR      r0,[r2,#0]
000028  6c40              LDR      r0,[r0,#0x44]
00002a  9000              STR      r0,[sp,#0]
;;;450        }  
;;;451        break;
00002c  e008              B        |L6.64|
                  |L6.46|
;;;452        case ADC_INJECTED_RANK_2: 
;;;453        {  
;;;454          tmp =  hadc->Instance->JDR2;
00002e  6810              LDR      r0,[r2,#0]
000030  6c00              LDR      r0,[r0,#0x40]
000032  9000              STR      r0,[sp,#0]
;;;455        }
;;;456        break;
000034  e004              B        |L6.64|
                  |L6.54|
;;;457        case ADC_INJECTED_RANK_1:
;;;458        {
;;;459          tmp =  hadc->Instance->JDR1;
000036  6810              LDR      r0,[r2,#0]
000038  6bc0              LDR      r0,[r0,#0x3c]
00003a  9000              STR      r0,[sp,#0]
;;;460        }
;;;461        break;
00003c  e000              B        |L6.64|
                  |L6.62|
;;;462        default:
;;;463        break;  
00003e  bf00              NOP      
                  |L6.64|
000040  bf00              NOP                            ;446
;;;464      }
;;;465      return tmp;
000042  9800              LDR      r0,[sp,#0]
;;;466    }
000044  bd08              POP      {r3,pc}
;;;467    
                          ENDP


                          AREA ||i.HAL_ADCEx_InjectedPollForConversion||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_InjectedPollForConversion PROC
;;;350      */
;;;351    HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;352    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;353      uint32_t tickstart = 0;
000006  2600              MOVS     r6,#0
;;;354    
;;;355      /* Get tick */ 
;;;356      tickstart = HAL_GetTick();
000008  f7fffffe          BL       HAL_GetTick
00000c  4606              MOV      r6,r0
;;;357    
;;;358      /* Check End of conversion flag */
;;;359      while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC)))
00000e  e011              B        |L7.52|
                  |L7.16|
;;;360      {
;;;361        /* Check for the Timeout */
;;;362        if(Timeout != HAL_MAX_DELAY)
000010  1c68              ADDS     r0,r5,#1
000012  b178              CBZ      r0,|L7.52|
;;;363        {
;;;364          if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
000014  b125              CBZ      r5,|L7.32|
000016  f7fffffe          BL       HAL_GetTick
00001a  1b80              SUBS     r0,r0,r6
00001c  42a8              CMP      r0,r5
00001e  d909              BLS      |L7.52|
                  |L7.32|
;;;365          {
;;;366            hadc->State= HAL_ADC_STATE_TIMEOUT;
000020  2003              MOVS     r0,#3
000022  f884003d          STRB     r0,[r4,#0x3d]
;;;367            /* Process unlocked */
;;;368            __HAL_UNLOCK(hadc);
000026  bf00              NOP      
000028  2000              MOVS     r0,#0
00002a  f884003c          STRB     r0,[r4,#0x3c]
00002e  bf00              NOP      
;;;369            return HAL_TIMEOUT;
000030  2003              MOVS     r0,#3
                  |L7.50|
;;;370          }
;;;371        }
;;;372      }
;;;373      
;;;374      /* Check if a regular conversion is ready */
;;;375      if(hadc->State == HAL_ADC_STATE_EOC_REG)
;;;376      {
;;;377        /* Change ADC state */
;;;378        hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
;;;379      }
;;;380      else
;;;381      {
;;;382        /* Change ADC state */
;;;383        hadc->State = HAL_ADC_STATE_EOC_INJ;
;;;384      }
;;;385      
;;;386      /* Return ADC state */
;;;387      return HAL_OK;
;;;388    }      
000032  bd70              POP      {r4-r6,pc}
                  |L7.52|
000034  6820              LDR      r0,[r4,#0]            ;359
000036  6800              LDR      r0,[r0,#0]            ;359
000038  f0000004          AND      r0,r0,#4              ;359
00003c  2804              CMP      r0,#4                 ;359
00003e  d1e7              BNE      |L7.16|
000040  f894003d          LDRB     r0,[r4,#0x3d]         ;375
000044  2815              CMP      r0,#0x15              ;375
000046  d103              BNE      |L7.80|
000048  2035              MOVS     r0,#0x35              ;378
00004a  f884003d          STRB     r0,[r4,#0x3d]         ;378
00004e  e002              B        |L7.86|
                  |L7.80|
000050  2025              MOVS     r0,#0x25              ;383
000052  f884003d          STRB     r0,[r4,#0x3d]         ;383
                  |L7.86|
000056  2000              MOVS     r0,#0                 ;387
000058  e7eb              B        |L7.50|
;;;389      
                          ENDP


                          AREA ||i.HAL_ADCEx_InjectedStart||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_InjectedStart PROC
;;;176      */
;;;177    HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
000000  b518              PUSH     {r3,r4,lr}
;;;178    {
000002  4601              MOV      r1,r0
;;;179      __IO uint32_t counter = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;180      uint32_t tmp1 = 0, tmp2 = 0;
000008  2200              MOVS     r2,#0
00000a  2300              MOVS     r3,#0
;;;181      
;;;182      /* Process locked */
;;;183      __HAL_LOCK(hadc);
00000c  bf00              NOP      
00000e  f891003c          LDRB     r0,[r1,#0x3c]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L8.26|
000016  2002              MOVS     r0,#2
                  |L8.24|
;;;184      
;;;185      /* Check if a regular conversion is ongoing */
;;;186      if(hadc->State == HAL_ADC_STATE_BUSY_REG)
;;;187      {
;;;188        /* Change ADC state */
;;;189        hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
;;;190      }
;;;191      else
;;;192      {
;;;193        /* Change ADC state */
;;;194        hadc->State = HAL_ADC_STATE_BUSY_INJ;
;;;195      } 
;;;196      
;;;197      /* Check if ADC peripheral is disabled in order to enable it and wait during 
;;;198         Tstab time the ADC's stabilization */
;;;199      if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
;;;200      {  
;;;201        /* Enable the Peripheral */
;;;202        __HAL_ADC_ENABLE(hadc);
;;;203        
;;;204        /* Delay for temperature sensor stabilization time */
;;;205        /* Compute number of CPU cycles to wait for */
;;;206        counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
;;;207        while(counter != 0)
;;;208        {
;;;209          counter--;
;;;210        }
;;;211      }
;;;212      
;;;213      /* Check if Multimode enabled */
;;;214      if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
;;;215      {
;;;216        tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
;;;217        tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
;;;218        if(tmp1 && tmp2)
;;;219        {
;;;220          /* Enable the selected ADC software conversion for injected group */
;;;221          hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
;;;222        }
;;;223      }
;;;224      else
;;;225      {
;;;226        tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
;;;227        tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
;;;228        if((hadc->Instance == ADC1) && tmp1 && tmp2)  
;;;229        {
;;;230          /* Enable the selected ADC software conversion for injected group */
;;;231          hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
;;;232        }
;;;233      }
;;;234      
;;;235      /* Process unlocked */
;;;236      __HAL_UNLOCK(hadc);
;;;237      
;;;238      /* Return function status */
;;;239      return HAL_OK;
;;;240    }
000018  bd18              POP      {r3,r4,pc}
                  |L8.26|
00001a  2001              MOVS     r0,#1                 ;183
00001c  f881003c          STRB     r0,[r1,#0x3c]         ;183
000020  bf00              NOP                            ;183
000022  f891003d          LDRB     r0,[r1,#0x3d]         ;186
000026  2812              CMP      r0,#0x12              ;186
000028  d103              BNE      |L8.50|
00002a  2032              MOVS     r0,#0x32              ;189
00002c  f881003d          STRB     r0,[r1,#0x3d]         ;189
000030  e002              B        |L8.56|
                  |L8.50|
000032  2022              MOVS     r0,#0x22              ;194
000034  f881003d          STRB     r0,[r1,#0x3d]         ;194
                  |L8.56|
000038  6808              LDR      r0,[r1,#0]            ;199
00003a  6880              LDR      r0,[r0,#8]            ;199
00003c  f0000001          AND      r0,r0,#1              ;199
000040  b9a0              CBNZ     r0,|L8.108|
000042  6808              LDR      r0,[r1,#0]            ;202
000044  6880              LDR      r0,[r0,#8]            ;202
000046  f0400001          ORR      r0,r0,#1              ;202
00004a  680c              LDR      r4,[r1,#0]            ;202
00004c  60a0              STR      r0,[r4,#8]            ;202
00004e  4826              LDR      r0,|L8.232|
000050  6800              LDR      r0,[r0,#0]            ;206  ; SystemCoreClock
000052  4c26              LDR      r4,|L8.236|
000054  fbb0f0f4          UDIV     r0,r0,r4              ;206
000058  eb000040          ADD      r0,r0,r0,LSL #1       ;206
00005c  9000              STR      r0,[sp,#0]            ;206
00005e  e002              B        |L8.102|
                  |L8.96|
000060  9800              LDR      r0,[sp,#0]            ;209
000062  1e40              SUBS     r0,r0,#1              ;209
000064  9000              STR      r0,[sp,#0]            ;209
                  |L8.102|
000066  9800              LDR      r0,[sp,#0]            ;207
000068  2800              CMP      r0,#0                 ;207
00006a  d1f9              BNE      |L8.96|
                  |L8.108|
00006c  4820              LDR      r0,|L8.240|
00006e  6800              LDR      r0,[r0,#0]            ;214
000070  f000001f          AND      r0,r0,#0x1f           ;214
000074  b9b0              CBNZ     r0,|L8.164|
000076  6808              LDR      r0,[r1,#0]            ;216
000078  6880              LDR      r0,[r0,#8]            ;216
00007a  f4001040          AND      r0,r0,#0x300000       ;216
00007e  b908              CBNZ     r0,|L8.132|
000080  2001              MOVS     r0,#1                 ;216
000082  e000              B        |L8.134|
                  |L8.132|
000084  2000              MOVS     r0,#0                 ;216
                  |L8.134|
000086  4602              MOV      r2,r0                 ;216
000088  6808              LDR      r0,[r1,#0]            ;217
00008a  6840              LDR      r0,[r0,#4]            ;217
00008c  2401              MOVS     r4,#1                 ;217
00008e  ea242390          BIC      r3,r4,r0,LSR #10      ;217
000092  b30a              CBZ      r2,|L8.216|
000094  b303              CBZ      r3,|L8.216|
000096  6808              LDR      r0,[r1,#0]            ;221
000098  6880              LDR      r0,[r0,#8]            ;221
00009a  f4400080          ORR      r0,r0,#0x400000       ;221
00009e  680c              LDR      r4,[r1,#0]            ;221
0000a0  60a0              STR      r0,[r4,#8]            ;221
0000a2  e019              B        |L8.216|
                  |L8.164|
0000a4  6808              LDR      r0,[r1,#0]            ;226
0000a6  6880              LDR      r0,[r0,#8]            ;226
0000a8  f4001040          AND      r0,r0,#0x300000       ;226
0000ac  b908              CBNZ     r0,|L8.178|
0000ae  2001              MOVS     r0,#1                 ;226
0000b0  e000              B        |L8.180|
                  |L8.178|
0000b2  2000              MOVS     r0,#0                 ;226
                  |L8.180|
0000b4  4602              MOV      r2,r0                 ;226
0000b6  6808              LDR      r0,[r1,#0]            ;227
0000b8  6840              LDR      r0,[r0,#4]            ;227
0000ba  2401              MOVS     r4,#1                 ;227
0000bc  ea242390          BIC      r3,r4,r0,LSR #10      ;227
0000c0  4c0c              LDR      r4,|L8.244|
0000c2  6808              LDR      r0,[r1,#0]            ;228
0000c4  42a0              CMP      r0,r4                 ;228
0000c6  d107              BNE      |L8.216|
0000c8  b132              CBZ      r2,|L8.216|
0000ca  b12b              CBZ      r3,|L8.216|
0000cc  6808              LDR      r0,[r1,#0]            ;231
0000ce  6880              LDR      r0,[r0,#8]            ;231
0000d0  f4400080          ORR      r0,r0,#0x400000       ;231
0000d4  680c              LDR      r4,[r1,#0]            ;231
0000d6  60a0              STR      r0,[r4,#8]            ;231
                  |L8.216|
0000d8  bf00              NOP                            ;236
0000da  2000              MOVS     r0,#0                 ;236
0000dc  f881003c          STRB     r0,[r1,#0x3c]         ;236
0000e0  bf00              NOP                            ;236
0000e2  bf00              NOP                            ;239
0000e4  e798              B        |L8.24|
;;;241    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L8.232|
                          DCD      SystemCoreClock
                  |L8.236|
                          DCD      0x000f4240
                  |L8.240|
                          DCD      0x40012304
                  |L8.244|
                          DCD      0x40012000

                          AREA ||i.HAL_ADCEx_InjectedStart_IT||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_InjectedStart_IT PROC
;;;248      */
;;;249    HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
000000  b518              PUSH     {r3,r4,lr}
;;;250    {
000002  4601              MOV      r1,r0
;;;251      __IO uint32_t counter = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;252      uint32_t tmp1 = 0, tmp2 =0;
000008  2200              MOVS     r2,#0
00000a  2300              MOVS     r3,#0
;;;253      
;;;254      /* Process locked */
;;;255      __HAL_LOCK(hadc);
00000c  bf00              NOP      
00000e  f891003c          LDRB     r0,[r1,#0x3c]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L9.26|
000016  2002              MOVS     r0,#2
                  |L9.24|
;;;256      
;;;257      /* Check if a regular conversion is ongoing */
;;;258      if(hadc->State == HAL_ADC_STATE_BUSY_REG)
;;;259      {
;;;260        /* Change ADC state */
;;;261        hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
;;;262      }
;;;263      else
;;;264      {
;;;265        /* Change ADC state */
;;;266        hadc->State = HAL_ADC_STATE_BUSY_INJ;
;;;267      }
;;;268      
;;;269      /* Set ADC error code to none */
;;;270      hadc->ErrorCode = HAL_ADC_ERROR_NONE;
;;;271      
;;;272      /* Check if ADC peripheral is disabled in order to enable it and wait during 
;;;273         Tstab time the ADC's stabilization */
;;;274      if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
;;;275      {  
;;;276        /* Enable the Peripheral */
;;;277        __HAL_ADC_ENABLE(hadc);
;;;278        
;;;279        /* Delay for temperature sensor stabilization time */
;;;280        /* Compute number of CPU cycles to wait for */
;;;281        counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
;;;282        while(counter != 0)
;;;283        {
;;;284          counter--;
;;;285        }
;;;286      }
;;;287      
;;;288      /* Enable the ADC end of conversion interrupt for injected group */
;;;289      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
;;;290      
;;;291      /* Enable the ADC overrun interrupt */
;;;292      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
;;;293      
;;;294      /* Check if Multimode enabled */
;;;295      if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
;;;296      {
;;;297        tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
;;;298        tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
;;;299        if(tmp1 && tmp2)
;;;300        {
;;;301          /* Enable the selected ADC software conversion for injected group */
;;;302          hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
;;;303        }
;;;304      }
;;;305      else
;;;306      {
;;;307        tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
;;;308        tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
;;;309        if((hadc->Instance == ADC1) && tmp1 && tmp2)  
;;;310        {
;;;311          /* Enable the selected ADC software conversion for injected group */
;;;312          hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
;;;313        }
;;;314      }
;;;315      
;;;316      /* Process unlocked */
;;;317      __HAL_UNLOCK(hadc);
;;;318      
;;;319      /* Return function status */
;;;320      return HAL_OK;
;;;321    }
000018  bd18              POP      {r3,r4,pc}
                  |L9.26|
00001a  2001              MOVS     r0,#1                 ;255
00001c  f881003c          STRB     r0,[r1,#0x3c]         ;255
000020  bf00              NOP                            ;255
000022  f891003d          LDRB     r0,[r1,#0x3d]         ;258
000026  2812              CMP      r0,#0x12              ;258
000028  d103              BNE      |L9.50|
00002a  2032              MOVS     r0,#0x32              ;261
00002c  f881003d          STRB     r0,[r1,#0x3d]         ;261
000030  e002              B        |L9.56|
                  |L9.50|
000032  2022              MOVS     r0,#0x22              ;266
000034  f881003d          STRB     r0,[r1,#0x3d]         ;266
                  |L9.56|
000038  2000              MOVS     r0,#0                 ;270
00003a  6408              STR      r0,[r1,#0x40]         ;270
00003c  6808              LDR      r0,[r1,#0]            ;274
00003e  6880              LDR      r0,[r0,#8]            ;274
000040  f0000001          AND      r0,r0,#1              ;274
000044  b9a0              CBNZ     r0,|L9.112|
000046  6808              LDR      r0,[r1,#0]            ;277
000048  6880              LDR      r0,[r0,#8]            ;277
00004a  f0400001          ORR      r0,r0,#1              ;277
00004e  680c              LDR      r4,[r1,#0]            ;277
000050  60a0              STR      r0,[r4,#8]            ;277
000052  482c              LDR      r0,|L9.260|
000054  6800              LDR      r0,[r0,#0]            ;281  ; SystemCoreClock
000056  4c2c              LDR      r4,|L9.264|
000058  fbb0f0f4          UDIV     r0,r0,r4              ;281
00005c  eb000040          ADD      r0,r0,r0,LSL #1       ;281
000060  9000              STR      r0,[sp,#0]            ;281
000062  e002              B        |L9.106|
                  |L9.100|
000064  9800              LDR      r0,[sp,#0]            ;284
000066  1e40              SUBS     r0,r0,#1              ;284
000068  9000              STR      r0,[sp,#0]            ;284
                  |L9.106|
00006a  9800              LDR      r0,[sp,#0]            ;282
00006c  2800              CMP      r0,#0                 ;282
00006e  d1f9              BNE      |L9.100|
                  |L9.112|
000070  6808              LDR      r0,[r1,#0]            ;289
000072  6840              LDR      r0,[r0,#4]            ;289
000074  f0400080          ORR      r0,r0,#0x80           ;289
000078  680c              LDR      r4,[r1,#0]            ;289
00007a  6060              STR      r0,[r4,#4]            ;289
00007c  6808              LDR      r0,[r1,#0]            ;292
00007e  6840              LDR      r0,[r0,#4]            ;292
000080  f0406080          ORR      r0,r0,#0x4000000      ;292
000084  680c              LDR      r4,[r1,#0]            ;292
000086  6060              STR      r0,[r4,#4]            ;292
000088  4820              LDR      r0,|L9.268|
00008a  6800              LDR      r0,[r0,#0]            ;295
00008c  f000001f          AND      r0,r0,#0x1f           ;295
000090  b9b0              CBNZ     r0,|L9.192|
000092  6808              LDR      r0,[r1,#0]            ;297
000094  6880              LDR      r0,[r0,#8]            ;297
000096  f4001040          AND      r0,r0,#0x300000       ;297
00009a  b908              CBNZ     r0,|L9.160|
00009c  2001              MOVS     r0,#1                 ;297
00009e  e000              B        |L9.162|
                  |L9.160|
0000a0  2000              MOVS     r0,#0                 ;297
                  |L9.162|
0000a2  4602              MOV      r2,r0                 ;297
0000a4  6808              LDR      r0,[r1,#0]            ;298
0000a6  6840              LDR      r0,[r0,#4]            ;298
0000a8  2401              MOVS     r4,#1                 ;298
0000aa  ea242390          BIC      r3,r4,r0,LSR #10      ;298
0000ae  b30a              CBZ      r2,|L9.244|
0000b0  b303              CBZ      r3,|L9.244|
0000b2  6808              LDR      r0,[r1,#0]            ;302
0000b4  6880              LDR      r0,[r0,#8]            ;302
0000b6  f4400080          ORR      r0,r0,#0x400000       ;302
0000ba  680c              LDR      r4,[r1,#0]            ;302
0000bc  60a0              STR      r0,[r4,#8]            ;302
0000be  e019              B        |L9.244|
                  |L9.192|
0000c0  6808              LDR      r0,[r1,#0]            ;307
0000c2  6880              LDR      r0,[r0,#8]            ;307
0000c4  f4001040          AND      r0,r0,#0x300000       ;307
0000c8  b908              CBNZ     r0,|L9.206|
0000ca  2001              MOVS     r0,#1                 ;307
0000cc  e000              B        |L9.208|
                  |L9.206|
0000ce  2000              MOVS     r0,#0                 ;307
                  |L9.208|
0000d0  4602              MOV      r2,r0                 ;307
0000d2  6808              LDR      r0,[r1,#0]            ;308
0000d4  6840              LDR      r0,[r0,#4]            ;308
0000d6  2401              MOVS     r4,#1                 ;308
0000d8  ea242390          BIC      r3,r4,r0,LSR #10      ;308
0000dc  4c0c              LDR      r4,|L9.272|
0000de  6808              LDR      r0,[r1,#0]            ;309
0000e0  42a0              CMP      r0,r4                 ;309
0000e2  d107              BNE      |L9.244|
0000e4  b132              CBZ      r2,|L9.244|
0000e6  b12b              CBZ      r3,|L9.244|
0000e8  6808              LDR      r0,[r1,#0]            ;312
0000ea  6880              LDR      r0,[r0,#8]            ;312
0000ec  f4400080          ORR      r0,r0,#0x400000       ;312
0000f0  680c              LDR      r4,[r1,#0]            ;312
0000f2  60a0              STR      r0,[r4,#8]            ;312
                  |L9.244|
0000f4  bf00              NOP                            ;317
0000f6  2000              MOVS     r0,#0                 ;317
0000f8  f881003c          STRB     r0,[r1,#0x3c]         ;317
0000fc  bf00              NOP                            ;317
0000fe  bf00              NOP                            ;320
000100  e78a              B        |L9.24|
;;;322    
                          ENDP

000102  0000              DCW      0x0000
                  |L9.260|
                          DCD      SystemCoreClock
                  |L9.264|
                          DCD      0x000f4240
                  |L9.268|
                          DCD      0x40012304
                  |L9.272|
                          DCD      0x40012000

                          AREA ||i.HAL_ADCEx_InjectedStop||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_InjectedStop PROC
;;;331      */
;;;332    HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
000000  4601              MOV      r1,r0
;;;333    {
;;;334      /* Disable the Peripheral */
;;;335      __HAL_ADC_DISABLE(hadc);
000002  6808              LDR      r0,[r1,#0]
000004  6880              LDR      r0,[r0,#8]
000006  f0200001          BIC      r0,r0,#1
00000a  680a              LDR      r2,[r1,#0]
00000c  6090              STR      r0,[r2,#8]
;;;336      
;;;337      /* Change ADC state */
;;;338      hadc->State = HAL_ADC_STATE_READY;
00000e  2001              MOVS     r0,#1
000010  f881003d          STRB     r0,[r1,#0x3d]
;;;339      
;;;340      /* Return function status */
;;;341      return HAL_OK;
000014  2000              MOVS     r0,#0
;;;342    }
000016  4770              BX       lr
;;;343    
                          ENDP


                          AREA ||i.HAL_ADCEx_InjectedStop_IT||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_InjectedStop_IT PROC
;;;398      */
;;;399    HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
000000  4601              MOV      r1,r0
;;;400    {
;;;401      /* Disable the ADC end of conversion interrupt for regular group */
;;;402      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
000002  6808              LDR      r0,[r1,#0]
000004  6840              LDR      r0,[r0,#4]
000006  f0200020          BIC      r0,r0,#0x20
00000a  680a              LDR      r2,[r1,#0]
00000c  6050              STR      r0,[r2,#4]
;;;403      
;;;404      /* Disable the ADC end of conversion interrupt for injected group */
;;;405      __HAL_ADC_DISABLE_IT(hadc, ADC_CR1_JEOCIE);
00000e  6808              LDR      r0,[r1,#0]
000010  6840              LDR      r0,[r0,#4]
000012  f0200080          BIC      r0,r0,#0x80
000016  680a              LDR      r2,[r1,#0]
000018  6050              STR      r0,[r2,#4]
;;;406      
;;;407      /* Enable the Peripheral */
;;;408      __HAL_ADC_DISABLE(hadc);
00001a  6808              LDR      r0,[r1,#0]
00001c  6880              LDR      r0,[r0,#8]
00001e  f0200001          BIC      r0,r0,#1
000022  680a              LDR      r2,[r1,#0]
000024  6090              STR      r0,[r2,#8]
;;;409      
;;;410      /* Change ADC state */
;;;411      hadc->State = HAL_ADC_STATE_READY;
000026  2001              MOVS     r0,#1
000028  f881003d          STRB     r0,[r1,#0x3d]
;;;412      
;;;413      /* Return function status */
;;;414      return HAL_OK;
00002c  2000              MOVS     r0,#0
;;;415    }
00002e  4770              BX       lr
;;;416    
                          ENDP


                          AREA ||i.HAL_ADCEx_MultiModeConfigChannel||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_MultiModeConfigChannel PROC
;;;774      */
;;;775    HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
000000  4602              MOV      r2,r0
;;;776    {
;;;777      /* Check the parameters */
;;;778      assert_param(IS_ADC_MODE(multimode->Mode));
;;;779      assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
;;;780      assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
;;;781      
;;;782      /* Process locked */
;;;783      __HAL_LOCK(hadc);
000002  bf00              NOP      
000004  f892003c          LDRB     r0,[r2,#0x3c]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L12.16|
00000c  2002              MOVS     r0,#2
                  |L12.14|
;;;784      
;;;785      /* Set ADC mode */
;;;786      ADC->CCR &= ~(ADC_CCR_MULTI);
;;;787      ADC->CCR |= multimode->Mode;
;;;788      
;;;789      /* Set the ADC DMA access mode */
;;;790      ADC->CCR &= ~(ADC_CCR_DMA);
;;;791      ADC->CCR |= multimode->DMAAccessMode;
;;;792      
;;;793      /* Set delay between two sampling phases */
;;;794      ADC->CCR &= ~(ADC_CCR_DELAY);
;;;795      ADC->CCR |= multimode->TwoSamplingDelay;
;;;796      
;;;797      /* Process unlocked */
;;;798      __HAL_UNLOCK(hadc);
;;;799      
;;;800      /* Return function status */
;;;801      return HAL_OK;
;;;802    }
00000e  4770              BX       lr
                  |L12.16|
000010  2001              MOVS     r0,#1                 ;783
000012  f882003c          STRB     r0,[r2,#0x3c]         ;783
000016  bf00              NOP                            ;783
000018  4819              LDR      r0,|L12.128|
00001a  6800              LDR      r0,[r0,#0]            ;786
00001c  f020001f          BIC      r0,r0,#0x1f           ;786
000020  4b18              LDR      r3,|L12.132|
000022  f8c30304          STR      r0,[r3,#0x304]        ;786
000026  4618              MOV      r0,r3                 ;787
000028  f8d00304          LDR      r0,[r0,#0x304]        ;787
00002c  680b              LDR      r3,[r1,#0]            ;787
00002e  4318              ORRS     r0,r0,r3              ;787
000030  4b14              LDR      r3,|L12.132|
000032  f8c30304          STR      r0,[r3,#0x304]        ;787
000036  4618              MOV      r0,r3                 ;790
000038  f8d00304          LDR      r0,[r0,#0x304]        ;790
00003c  f4204040          BIC      r0,r0,#0xc000         ;790
000040  f8c30304          STR      r0,[r3,#0x304]        ;790
000044  4618              MOV      r0,r3                 ;791
000046  f8d00304          LDR      r0,[r0,#0x304]        ;791
00004a  684b              LDR      r3,[r1,#4]            ;791
00004c  4318              ORRS     r0,r0,r3              ;791
00004e  4b0d              LDR      r3,|L12.132|
000050  f8c30304          STR      r0,[r3,#0x304]        ;791
000054  4618              MOV      r0,r3                 ;794
000056  f8d00304          LDR      r0,[r0,#0x304]        ;794
00005a  f4206070          BIC      r0,r0,#0xf00          ;794
00005e  f8c30304          STR      r0,[r3,#0x304]        ;794
000062  4618              MOV      r0,r3                 ;795
000064  f8d00304          LDR      r0,[r0,#0x304]        ;795
000068  688b              LDR      r3,[r1,#8]            ;795
00006a  4318              ORRS     r0,r0,r3              ;795
00006c  4b05              LDR      r3,|L12.132|
00006e  f8c30304          STR      r0,[r3,#0x304]        ;795
000072  bf00              NOP                            ;798
000074  2000              MOVS     r0,#0                 ;798
000076  f882003c          STRB     r0,[r2,#0x3c]         ;798
00007a  bf00              NOP                            ;798
00007c  bf00              NOP                            ;801
00007e  e7c6              B        |L12.14|
;;;803    
                          ENDP

                  |L12.128|
                          DCD      0x40012304
                  |L12.132|
                          DCD      0x40012000

                          AREA ||i.HAL_ADCEx_MultiModeGetValue||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_MultiModeGetValue PROC
;;;589      */
;;;590    uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef* hadc)
000000  4601              MOV      r1,r0
;;;591    {
;;;592      /* Return the multi mode conversion value */
;;;593      return ADC->CDR;
000002  4801              LDR      r0,|L13.8|
000004  6800              LDR      r0,[r0,#0]
;;;594    }
000006  4770              BX       lr
;;;595    
                          ENDP

                  |L13.8|
                          DCD      0x40012308

                          AREA ||i.HAL_ADCEx_MultiModeStart_DMA||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_MultiModeStart_DMA PROC
;;;478      */
;;;479    HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;480    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;481      __IO uint32_t counter = 0;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;482      
;;;483      /* Check the parameters */
;;;484      assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
;;;485      assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
;;;486      assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
;;;487      
;;;488      /* Process locked */
;;;489      __HAL_LOCK(hadc);
00000c  bf00              NOP      
00000e  f894003c          LDRB     r0,[r4,#0x3c]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L14.26|
000016  2002              MOVS     r0,#2
                  |L14.24|
;;;490      
;;;491      /* Enable ADC overrun interrupt */
;;;492      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
;;;493      
;;;494      if (hadc->Init.DMAContinuousRequests != DISABLE)
;;;495      {
;;;496        /* Enable the selected ADC DMA request after last transfer */
;;;497        ADC->CCR |= ADC_CCR_DDS;
;;;498      }
;;;499      else
;;;500      {
;;;501        /* Disable the selected ADC EOC rising on each regular channel conversion */
;;;502        ADC->CCR &= ~ADC_CCR_DDS;
;;;503      }
;;;504      
;;;505      /* Set the DMA transfer complete callback */
;;;506      hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
;;;507      
;;;508      /* Set the DMA half transfer complete callback */
;;;509      hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
;;;510         
;;;511      /* Set the DMA error callback */
;;;512      hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
;;;513      
;;;514      /* Enable the DMA Stream */
;;;515      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&ADC->CDR, (uint32_t)pData, Length);
;;;516      
;;;517      /* Change ADC state */
;;;518      hadc->State = HAL_ADC_STATE_BUSY_REG;
;;;519      
;;;520      /* Check if ADC peripheral is disabled in order to enable it and wait during 
;;;521         Tstab time the ADC's stabilization */
;;;522      if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
;;;523      {  
;;;524        /* Enable the Peripheral */
;;;525        __HAL_ADC_ENABLE(hadc);
;;;526        
;;;527        /* Delay for temperature sensor stabilization time */
;;;528        /* Compute number of CPU cycles to wait for */
;;;529        counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
;;;530        while(counter != 0)
;;;531        {
;;;532          counter--;
;;;533        }
;;;534      }
;;;535      
;;;536      /* if no external trigger present enable software conversion of regular channels */
;;;537      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
;;;538      {
;;;539        /* Enable the selected ADC software conversion for regular group */
;;;540        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
;;;541      }
;;;542      
;;;543      /* Process unlocked */
;;;544      __HAL_UNLOCK(hadc);
;;;545      
;;;546      /* Return function status */
;;;547      return HAL_OK;
;;;548    }
000018  bdf8              POP      {r3-r7,pc}
                  |L14.26|
00001a  2001              MOVS     r0,#1                 ;489
00001c  f884003c          STRB     r0,[r4,#0x3c]         ;489
000020  bf00              NOP                            ;489
000022  6820              LDR      r0,[r4,#0]            ;492
000024  6840              LDR      r0,[r0,#4]            ;492
000026  f0406080          ORR      r0,r0,#0x4000000      ;492
00002a  6821              LDR      r1,[r4,#0]            ;492
00002c  6048              STR      r0,[r1,#4]            ;492
00002e  69e0              LDR      r0,[r4,#0x1c]         ;494
000030  b138              CBZ      r0,|L14.66|
000032  4827              LDR      r0,|L14.208|
000034  6800              LDR      r0,[r0,#0]            ;497
000036  f4405000          ORR      r0,r0,#0x2000         ;497
00003a  4926              LDR      r1,|L14.212|
00003c  f8c10304          STR      r0,[r1,#0x304]        ;497
000040  e006              B        |L14.80|
                  |L14.66|
000042  4823              LDR      r0,|L14.208|
000044  6800              LDR      r0,[r0,#0]            ;502
000046  f4205000          BIC      r0,r0,#0x2000         ;502
00004a  4922              LDR      r1,|L14.212|
00004c  f8c10304          STR      r0,[r1,#0x304]        ;502
                  |L14.80|
000050  4821              LDR      r0,|L14.216|
000052  6ba1              LDR      r1,[r4,#0x38]         ;506
000054  63c8              STR      r0,[r1,#0x3c]         ;506
000056  4821              LDR      r0,|L14.220|
000058  6ba1              LDR      r1,[r4,#0x38]         ;509
00005a  6408              STR      r0,[r1,#0x40]         ;509
00005c  4820              LDR      r0,|L14.224|
00005e  6ba1              LDR      r1,[r4,#0x38]         ;512
000060  6488              STR      r0,[r1,#0x48]         ;512
000062  4633              MOV      r3,r6                 ;515
000064  462a              MOV      r2,r5                 ;515
000066  491a              LDR      r1,|L14.208|
000068  1d09              ADDS     r1,r1,#4              ;515
00006a  6ba0              LDR      r0,[r4,#0x38]         ;515
00006c  f7fffffe          BL       HAL_DMA_Start_IT
000070  2012              MOVS     r0,#0x12              ;518
000072  f884003d          STRB     r0,[r4,#0x3d]         ;518
000076  6820              LDR      r0,[r4,#0]            ;522
000078  6880              LDR      r0,[r0,#8]            ;522
00007a  f0000001          AND      r0,r0,#1              ;522
00007e  b9a0              CBNZ     r0,|L14.170|
000080  6820              LDR      r0,[r4,#0]            ;525
000082  6880              LDR      r0,[r0,#8]            ;525
000084  f0400001          ORR      r0,r0,#1              ;525
000088  6821              LDR      r1,[r4,#0]            ;525
00008a  6088              STR      r0,[r1,#8]            ;525
00008c  4815              LDR      r0,|L14.228|
00008e  6800              LDR      r0,[r0,#0]            ;529  ; SystemCoreClock
000090  4915              LDR      r1,|L14.232|
000092  fbb0f0f1          UDIV     r0,r0,r1              ;529
000096  eb000040          ADD      r0,r0,r0,LSL #1       ;529
00009a  9000              STR      r0,[sp,#0]            ;529
00009c  e002              B        |L14.164|
                  |L14.158|
00009e  9800              LDR      r0,[sp,#0]            ;532
0000a0  1e40              SUBS     r0,r0,#1              ;532
0000a2  9000              STR      r0,[sp,#0]            ;532
                  |L14.164|
0000a4  9800              LDR      r0,[sp,#0]            ;530
0000a6  2800              CMP      r0,#0                 ;530
0000a8  d1f9              BNE      |L14.158|
                  |L14.170|
0000aa  6820              LDR      r0,[r4,#0]            ;537
0000ac  6880              LDR      r0,[r0,#8]            ;537
0000ae  f0005040          AND      r0,r0,#0x30000000     ;537
0000b2  b928              CBNZ     r0,|L14.192|
0000b4  6820              LDR      r0,[r4,#0]            ;540
0000b6  6880              LDR      r0,[r0,#8]            ;540
0000b8  f0404080          ORR      r0,r0,#0x40000000     ;540
0000bc  6821              LDR      r1,[r4,#0]            ;540
0000be  6088              STR      r0,[r1,#8]            ;540
                  |L14.192|
0000c0  bf00              NOP                            ;544
0000c2  2000              MOVS     r0,#0                 ;544
0000c4  f884003c          STRB     r0,[r4,#0x3c]         ;544
0000c8  bf00              NOP                            ;544
0000ca  bf00              NOP                            ;547
0000cc  e7a4              B        |L14.24|
;;;549    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L14.208|
                          DCD      0x40012304
                  |L14.212|
                          DCD      0x40012000
                  |L14.216|
                          DCD      ADC_MultiModeDMAConvCplt
                  |L14.220|
                          DCD      ADC_MultiModeDMAHalfConvCplt
                  |L14.224|
                          DCD      ADC_MultiModeDMAError
                  |L14.228|
                          DCD      SystemCoreClock
                  |L14.232|
                          DCD      0x000f4240

                          AREA ||i.HAL_ADCEx_MultiModeStop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_MultiModeStop_DMA PROC
;;;555      */
;;;556    HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef* hadc)
000000  b510              PUSH     {r4,lr}
;;;557    {
000002  4604              MOV      r4,r0
;;;558      /* Process locked */
;;;559      __HAL_LOCK(hadc);
000004  bf00              NOP      
000006  f894003c          LDRB     r0,[r4,#0x3c]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L15.18|
00000e  2002              MOVS     r0,#2
                  |L15.16|
;;;560      
;;;561      /* Enable the Peripheral */
;;;562      __HAL_ADC_DISABLE(hadc);
;;;563      
;;;564      /* Disable ADC overrun interrupt */
;;;565      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
;;;566      
;;;567      /* Disable the selected ADC DMA request after last transfer */
;;;568      ADC->CCR &= ~ADC_CCR_DDS;
;;;569      
;;;570      /* Disable the ADC DMA Stream */
;;;571      HAL_DMA_Abort(hadc->DMA_Handle);
;;;572      
;;;573      /* Change ADC state */
;;;574      hadc->State = HAL_ADC_STATE_READY;
;;;575      
;;;576      /* Process unlocked */
;;;577      __HAL_UNLOCK(hadc);
;;;578        
;;;579      /* Return function status */
;;;580      return HAL_OK;
;;;581    }
000010  bd10              POP      {r4,pc}
                  |L15.18|
000012  2001              MOVS     r0,#1                 ;559
000014  f884003c          STRB     r0,[r4,#0x3c]         ;559
000018  bf00              NOP                            ;559
00001a  6820              LDR      r0,[r4,#0]            ;562
00001c  6880              LDR      r0,[r0,#8]            ;562
00001e  f0200001          BIC      r0,r0,#1              ;562
000022  6821              LDR      r1,[r4,#0]            ;562
000024  6088              STR      r0,[r1,#8]            ;562
000026  6820              LDR      r0,[r4,#0]            ;565
000028  6840              LDR      r0,[r0,#4]            ;565
00002a  f0206080          BIC      r0,r0,#0x4000000      ;565
00002e  6821              LDR      r1,[r4,#0]            ;565
000030  6048              STR      r0,[r1,#4]            ;565
000032  4809              LDR      r0,|L15.88|
000034  6800              LDR      r0,[r0,#0]            ;568
000036  f4205000          BIC      r0,r0,#0x2000         ;568
00003a  4907              LDR      r1,|L15.88|
00003c  6008              STR      r0,[r1,#0]            ;568
00003e  6ba0              LDR      r0,[r4,#0x38]         ;571
000040  f7fffffe          BL       HAL_DMA_Abort
000044  2001              MOVS     r0,#1                 ;574
000046  f884003d          STRB     r0,[r4,#0x3d]         ;574
00004a  bf00              NOP                            ;577
00004c  2000              MOVS     r0,#0                 ;577
00004e  f884003c          STRB     r0,[r4,#0x3c]         ;577
000052  bf00              NOP                            ;577
000054  bf00              NOP                            ;580
000056  e7db              B        |L15.16|
;;;582    
                          ENDP

                  |L15.88|
                          DCD      0x40012304

;*** Start embedded assembler ***

#line 1 "HALLIB\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_adc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____REVSH|
#line 402
|__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____RRX|
#line 587
|__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
