; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm_flash.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\stm_flash.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\stm_flash.crf Hardware\STM_Flash.c]
                          THUMB

                          AREA ||i.STMFLASH_GetFlashSector||, CODE, READONLY, ALIGN=2

                  STMFLASH_GetFlashSector PROC
;;;15     //返回值:0~11,即addr所在的扇区
;;;16     u8 STMFLASH_GetFlashSector(u32 addr)
000000  4601              MOV      r1,r0
;;;17     {
;;;18     	if(addr<ADDR_FLASH_SECTOR_1)return FLASH_SECTOR_0;
000002  483a              LDR      r0,|L1.236|
000004  4281              CMP      r1,r0
000006  d201              BCS      |L1.12|
000008  2000              MOVS     r0,#0
                  |L1.10|
;;;19     	else if(addr<ADDR_FLASH_SECTOR_2)return FLASH_SECTOR_1;
;;;20     	else if(addr<ADDR_FLASH_SECTOR_3)return FLASH_SECTOR_2;
;;;21     	else if(addr<ADDR_FLASH_SECTOR_4)return FLASH_SECTOR_3;
;;;22     	else if(addr<ADDR_FLASH_SECTOR_5)return FLASH_SECTOR_4;
;;;23     	else if(addr<ADDR_FLASH_SECTOR_6)return FLASH_SECTOR_5;
;;;24     	else if(addr<ADDR_FLASH_SECTOR_7)return FLASH_SECTOR_6;
;;;25     	else if(addr<ADDR_FLASH_SECTOR_8)return FLASH_SECTOR_7;
;;;26     	else if(addr<ADDR_FLASH_SECTOR_9)return FLASH_SECTOR_8;
;;;27     	else if(addr<ADDR_FLASH_SECTOR_10)return FLASH_SECTOR_9;
;;;28     	else if(addr<ADDR_FLASH_SECTOR_11)return FLASH_SECTOR_10; 
;;;29     	else if(addr<ADDR_FLASH_SECTOR_12)return FLASH_SECTOR_11; 
;;;30     	else if(addr<ADDR_FLASH_SECTOR_13)return FLASH_SECTOR_12; 
;;;31     	else if(addr<ADDR_FLASH_SECTOR_14)return FLASH_SECTOR_13; 
;;;32     	else if(addr<ADDR_FLASH_SECTOR_15)return FLASH_SECTOR_14; 
;;;33     	else if(addr<ADDR_FLASH_SECTOR_16)return FLASH_SECTOR_15; 
;;;34     	else if(addr<ADDR_FLASH_SECTOR_17)return FLASH_SECTOR_16; 
;;;35     	else if(addr<ADDR_FLASH_SECTOR_18)return FLASH_SECTOR_17; 
;;;36     	else if(addr<ADDR_FLASH_SECTOR_19)return FLASH_SECTOR_18; 
;;;37     	else if(addr<ADDR_FLASH_SECTOR_20)return FLASH_SECTOR_19; 
;;;38     	else if(addr<ADDR_FLASH_SECTOR_21)return FLASH_SECTOR_20; 
;;;39     	else if(addr<ADDR_FLASH_SECTOR_22)return FLASH_SECTOR_21; 
;;;40     	else if(addr<ADDR_FLASH_SECTOR_23)return FLASH_SECTOR_22;  
;;;41     	return FLASH_SECTOR_23;	
;;;42     }
00000a  4770              BX       lr
                  |L1.12|
00000c  4838              LDR      r0,|L1.240|
00000e  4281              CMP      r1,r0                 ;19
000010  d201              BCS      |L1.22|
000012  2001              MOVS     r0,#1                 ;19
000014  e7f9              B        |L1.10|
                  |L1.22|
000016  4837              LDR      r0,|L1.244|
000018  4281              CMP      r1,r0                 ;20
00001a  d201              BCS      |L1.32|
00001c  2002              MOVS     r0,#2                 ;20
00001e  e7f4              B        |L1.10|
                  |L1.32|
000020  4835              LDR      r0,|L1.248|
000022  4281              CMP      r1,r0                 ;21
000024  d201              BCS      |L1.42|
000026  2003              MOVS     r0,#3                 ;21
000028  e7ef              B        |L1.10|
                  |L1.42|
00002a  4834              LDR      r0,|L1.252|
00002c  4281              CMP      r1,r0                 ;22
00002e  d201              BCS      |L1.52|
000030  2004              MOVS     r0,#4                 ;22
000032  e7ea              B        |L1.10|
                  |L1.52|
000034  4832              LDR      r0,|L1.256|
000036  4281              CMP      r1,r0                 ;23
000038  d201              BCS      |L1.62|
00003a  2005              MOVS     r0,#5                 ;23
00003c  e7e5              B        |L1.10|
                  |L1.62|
00003e  4831              LDR      r0,|L1.260|
000040  4281              CMP      r1,r0                 ;24
000042  d201              BCS      |L1.72|
000044  2006              MOVS     r0,#6                 ;24
000046  e7e0              B        |L1.10|
                  |L1.72|
000048  482f              LDR      r0,|L1.264|
00004a  4281              CMP      r1,r0                 ;25
00004c  d201              BCS      |L1.82|
00004e  2007              MOVS     r0,#7                 ;25
000050  e7db              B        |L1.10|
                  |L1.82|
000052  482e              LDR      r0,|L1.268|
000054  4281              CMP      r1,r0                 ;26
000056  d201              BCS      |L1.92|
000058  2008              MOVS     r0,#8                 ;26
00005a  e7d6              B        |L1.10|
                  |L1.92|
00005c  482c              LDR      r0,|L1.272|
00005e  4281              CMP      r1,r0                 ;27
000060  d201              BCS      |L1.102|
000062  2009              MOVS     r0,#9                 ;27
000064  e7d1              B        |L1.10|
                  |L1.102|
000066  482b              LDR      r0,|L1.276|
000068  4281              CMP      r1,r0                 ;28
00006a  d201              BCS      |L1.112|
00006c  200a              MOVS     r0,#0xa               ;28
00006e  e7cc              B        |L1.10|
                  |L1.112|
000070  f1b16f01          CMP      r1,#0x8100000         ;29
000074  d201              BCS      |L1.122|
000076  200b              MOVS     r0,#0xb               ;29
000078  e7c7              B        |L1.10|
                  |L1.122|
00007a  4827              LDR      r0,|L1.280|
00007c  4281              CMP      r1,r0                 ;30
00007e  d201              BCS      |L1.132|
000080  200c              MOVS     r0,#0xc               ;30
000082  e7c2              B        |L1.10|
                  |L1.132|
000084  4825              LDR      r0,|L1.284|
000086  4281              CMP      r1,r0                 ;31
000088  d201              BCS      |L1.142|
00008a  200d              MOVS     r0,#0xd               ;31
00008c  e7bd              B        |L1.10|
                  |L1.142|
00008e  4824              LDR      r0,|L1.288|
000090  4281              CMP      r1,r0                 ;32
000092  d201              BCS      |L1.152|
000094  200e              MOVS     r0,#0xe               ;32
000096  e7b8              B        |L1.10|
                  |L1.152|
000098  4822              LDR      r0,|L1.292|
00009a  4281              CMP      r1,r0                 ;33
00009c  d201              BCS      |L1.162|
00009e  200f              MOVS     r0,#0xf               ;33
0000a0  e7b3              B        |L1.10|
                  |L1.162|
0000a2  4821              LDR      r0,|L1.296|
0000a4  4281              CMP      r1,r0                 ;34
0000a6  d201              BCS      |L1.172|
0000a8  2010              MOVS     r0,#0x10              ;34
0000aa  e7ae              B        |L1.10|
                  |L1.172|
0000ac  481f              LDR      r0,|L1.300|
0000ae  4281              CMP      r1,r0                 ;35
0000b0  d201              BCS      |L1.182|
0000b2  2011              MOVS     r0,#0x11              ;35
0000b4  e7a9              B        |L1.10|
                  |L1.182|
0000b6  481e              LDR      r0,|L1.304|
0000b8  4281              CMP      r1,r0                 ;36
0000ba  d201              BCS      |L1.192|
0000bc  2012              MOVS     r0,#0x12              ;36
0000be  e7a4              B        |L1.10|
                  |L1.192|
0000c0  481c              LDR      r0,|L1.308|
0000c2  4281              CMP      r1,r0                 ;37
0000c4  d201              BCS      |L1.202|
0000c6  2013              MOVS     r0,#0x13              ;37
0000c8  e79f              B        |L1.10|
                  |L1.202|
0000ca  481b              LDR      r0,|L1.312|
0000cc  4281              CMP      r1,r0                 ;38
0000ce  d201              BCS      |L1.212|
0000d0  2014              MOVS     r0,#0x14              ;38
0000d2  e79a              B        |L1.10|
                  |L1.212|
0000d4  4819              LDR      r0,|L1.316|
0000d6  4281              CMP      r1,r0                 ;39
0000d8  d201              BCS      |L1.222|
0000da  2015              MOVS     r0,#0x15              ;39
0000dc  e795              B        |L1.10|
                  |L1.222|
0000de  4818              LDR      r0,|L1.320|
0000e0  4281              CMP      r1,r0                 ;40
0000e2  d201              BCS      |L1.232|
0000e4  2016              MOVS     r0,#0x16              ;40
0000e6  e790              B        |L1.10|
                  |L1.232|
0000e8  2017              MOVS     r0,#0x17              ;41
0000ea  e78e              B        |L1.10|
;;;43     //从指定地址开始写入指定长度的数据
                          ENDP

                  |L1.236|
                          DCD      0x08004000
                  |L1.240|
                          DCD      0x08008000
                  |L1.244|
                          DCD      0x0800c000
                  |L1.248|
                          DCD      0x08010000
                  |L1.252|
                          DCD      0x08020000
                  |L1.256|
                          DCD      0x08040000
                  |L1.260|
                          DCD      0x08060000
                  |L1.264|
                          DCD      0x08080000
                  |L1.268|
                          DCD      0x080a0000
                  |L1.272|
                          DCD      0x080c0000
                  |L1.276|
                          DCD      0x080e0000
                  |L1.280|
                          DCD      0x08104000
                  |L1.284|
                          DCD      0x08108000
                  |L1.288|
                          DCD      0x0810c000
                  |L1.292|
                          DCD      0x08110000
                  |L1.296|
                          DCD      0x08120000
                  |L1.300|
                          DCD      0x08140000
                  |L1.304|
                          DCD      0x08160000
                  |L1.308|
                          DCD      0x08180000
                  |L1.312|
                          DCD      0x081a0000
                  |L1.316|
                          DCD      0x081c0000
                  |L1.320|
                          DCD      0x081e0000

                          AREA ||i.STMFLASH_Read||, CODE, READONLY, ALIGN=1

                  STMFLASH_Read PROC
;;;103    //NumToRead:字(32位)数
;;;104    void STMFLASH_Read(u32 ReadAddr,u32 *pBuffer,u32 NumToRead)   	
000000  b530              PUSH     {r4,r5,lr}
;;;105    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;106    	u32 i;
;;;107    	for(i=0;i<NumToRead;i++)
000008  2200              MOVS     r2,#0
00000a  e006              B        |L2.26|
                  |L2.12|
;;;108    	{
;;;109    		pBuffer[i]=STMFLASH_ReadWord(ReadAddr);//读取4个字节.
00000c  4618              MOV      r0,r3
00000e  f7fffffe          BL       STMFLASH_ReadWord
000012  f8440022          STR      r0,[r4,r2,LSL #2]
;;;110    		ReadAddr+=4;//偏移4个字节.	
000016  1d1b              ADDS     r3,r3,#4
000018  1c52              ADDS     r2,r2,#1              ;107
                  |L2.26|
00001a  42aa              CMP      r2,r5                 ;107
00001c  d3f6              BCC      |L2.12|
;;;111    	}
;;;112    }
00001e  bd30              POP      {r4,r5,pc}
;;;113    
                          ENDP


                          AREA ||i.STMFLASH_ReadWord||, CODE, READONLY, ALIGN=1

                  STMFLASH_ReadWord PROC
;;;8      //返回值:对应数据.
;;;9      u32 STMFLASH_ReadWord(u32 faddr)
000000  4601              MOV      r1,r0
;;;10     {
;;;11     	return *(vu32*)faddr; 
000002  6808              LDR      r0,[r1,#0]
;;;12     }
000004  4770              BX       lr
;;;13     //获取某个地址所在的flash扇区
                          ENDP


                          AREA ||i.STMFLASH_Write||, CODE, READONLY, ALIGN=2

                  STMFLASH_Write PROC
;;;52     //NumToWrite:字(32位)数(就是要写入的32位数据的个数.)
;;;53     void STMFLASH_Write(u32 WriteAddr,u32 *pBuffer,u32 NumToWrite)	
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;54     { 
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
;;;55     	FLASH_EraseInitTypeDef FlashEraseInit;
;;;56     	HAL_StatusTypeDef FlashStatus=HAL_OK;
00000c  f04f0900          MOV      r9,#0
;;;57     	u32 SectorError=0;
000010  2000              MOVS     r0,#0
000012  9001              STR      r0,[sp,#4]
;;;58     	u32 addrx=0;
000014  2500              MOVS     r5,#0
;;;59     	u32 endaddr=0;	
000016  4680              MOV      r8,r0
;;;60     	if(WriteAddr<STM32_FLASH_BASE||WriteAddr%4)return;	//非法地址
000018  f1b46f00          CMP      r4,#0x8000000
00001c  d302              BCC      |L4.36|
00001e  f0040003          AND      r0,r4,#3
000022  b110              CBZ      r0,|L4.42|
                  |L4.36|
;;;61         
;;;62     	HAL_FLASH_Unlock();             //解锁	
;;;63     	addrx=WriteAddr;				//写入的起始地址
;;;64     	endaddr=WriteAddr+NumToWrite*4;	//写入的结束地址
;;;65         
;;;66     	if(addrx<0X1FFF0000)
;;;67     	{
;;;68     		while(addrx<endaddr)		//扫清一切障碍.(对非FFFFFFFF的地方,先擦除)
;;;69     		{
;;;70     			 if(STMFLASH_ReadWord(addrx)!=0XFFFFFFFF)//有非0XFFFFFFFF的地方,要擦除这个扇区
;;;71     			{   
;;;72     				FlashEraseInit.TypeErase=FLASH_TYPEERASE_SECTORS;       //擦除类型，扇区擦除 
;;;73     				FlashEraseInit.Sector=STMFLASH_GetFlashSector(addrx);   //要擦除的扇区
;;;74     				FlashEraseInit.NbSectors=1;                             //一次只擦除一个扇区
;;;75     				FlashEraseInit.VoltageRange=FLASH_VOLTAGE_RANGE_3;      //电压范围，VCC=2.7~3.6V之间!!
;;;76     				if(HAL_FLASHEx_Erase(&FlashEraseInit,&SectorError)!=HAL_OK) 
;;;77     				{
;;;78     					break;//发生错误了	
;;;79     				}
;;;80     				}else addrx+=4;
;;;81     				FLASH_WaitForLastOperation(FLASH_WAITETIME);                //等待上次操作完成
;;;82     		}
;;;83     	}
;;;84     	FlashStatus=FLASH_WaitForLastOperation(FLASH_WAITETIME);            //等待上次操作完成
;;;85     	if(FlashStatus==HAL_OK)
;;;86     	{
;;;87     		 while(WriteAddr<endaddr)//写数据
;;;88     		 {
;;;89     			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,WriteAddr,*pBuffer)!=HAL_OK)//写入数据
;;;90     			{ 
;;;91     				break;	//写入异常
;;;92     			}
;;;93     			WriteAddr+=4;
;;;94     			pBuffer++;
;;;95     		}  
;;;96     	}
;;;97     	HAL_FLASH_Lock();           //上锁
;;;98     } 
000024  b007              ADD      sp,sp,#0x1c
000026  e8bd83f0          POP      {r4-r9,pc}
                  |L4.42|
00002a  f7fffffe          BL       HAL_FLASH_Unlock
00002e  4625              MOV      r5,r4                 ;63
000030  eb040887          ADD      r8,r4,r7,LSL #2       ;64
000034  481e              LDR      r0,|L4.176|
000036  4285              CMP      r5,r0                 ;66
000038  d21d              BCS      |L4.118|
00003a  e019              B        |L4.112|
                  |L4.60|
00003c  4628              MOV      r0,r5                 ;70
00003e  f7fffffe          BL       STMFLASH_ReadWord
000042  1c40              ADDS     r0,r0,#1              ;70
000044  b178              CBZ      r0,|L4.102|
000046  2000              MOVS     r0,#0                 ;72
000048  9002              STR      r0,[sp,#8]            ;72
00004a  4628              MOV      r0,r5                 ;73
00004c  f7fffffe          BL       STMFLASH_GetFlashSector
000050  9004              STR      r0,[sp,#0x10]         ;73
000052  2001              MOVS     r0,#1                 ;74
000054  9005              STR      r0,[sp,#0x14]         ;74
000056  2002              MOVS     r0,#2                 ;75
000058  9006              STR      r0,[sp,#0x18]         ;75
00005a  a901              ADD      r1,sp,#4              ;76
00005c  a802              ADD      r0,sp,#8              ;76
00005e  f7fffffe          BL       HAL_FLASHEx_Erase
000062  b108              CBZ      r0,|L4.104|
000064  e006              B        |L4.116|
                  |L4.102|
000066  1d2d              ADDS     r5,r5,#4              ;80
                  |L4.104|
000068  f24c3050          MOV      r0,#0xc350            ;81
00006c  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L4.112|
000070  4545              CMP      r5,r8                 ;68
000072  d3e3              BCC      |L4.60|
                  |L4.116|
000074  bf00              NOP                            ;78
                  |L4.118|
000076  f24c3050          MOV      r0,#0xc350            ;84
00007a  f7fffffe          BL       FLASH_WaitForLastOperation
00007e  4681              MOV      r9,r0                 ;84
000080  f1b90f00          CMP      r9,#0                 ;85
000084  d10f              BNE      |L4.166|
000086  e00b              B        |L4.160|
                  |L4.136|
000088  f8d6c000          LDR      r12,[r6,#0]           ;89
00008c  4662              MOV      r2,r12                ;89
00008e  2300              MOVS     r3,#0                 ;89
000090  4621              MOV      r1,r4                 ;89
000092  2002              MOVS     r0,#2                 ;89
000094  f7fffffe          BL       HAL_FLASH_Program
000098  b100              CBZ      r0,|L4.156|
00009a  e003              B        |L4.164|
                  |L4.156|
00009c  1d24              ADDS     r4,r4,#4              ;93
00009e  1d36              ADDS     r6,r6,#4              ;94
                  |L4.160|
0000a0  4544              CMP      r4,r8                 ;87
0000a2  d3f1              BCC      |L4.136|
                  |L4.164|
0000a4  bf00              NOP                            ;91
                  |L4.166|
0000a6  f7fffffe          BL       HAL_FLASH_Lock
0000aa  bf00              NOP      
0000ac  e7ba              B        |L4.36|
;;;99     
                          ENDP

0000ae  0000              DCW      0x0000
                  |L4.176|
                          DCD      0x1fff0000

                          AREA ||i.Test_Write||, CODE, READONLY, ALIGN=1

                  Test_Write PROC
;;;116    //WriteData:要写入的数据
;;;117    void Test_Write(u32 WriteAddr,u32 WriteData)   	
000000  b513              PUSH     {r0,r1,r4,lr}
;;;118    {
000002  4604              MOV      r4,r0
;;;119    	STMFLASH_Write(WriteAddr,&WriteData,1);//写入一个字 
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       STMFLASH_Write
;;;120    }
00000e  bd1c              POP      {r2-r4,pc}
;;;121    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Hardware\\STM_Flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_STM_Flash_c_2dbf59c4____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___11_STM_Flash_c_2dbf59c4____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_STM_Flash_c_2dbf59c4____REVSH|
#line 402
|__asm___11_STM_Flash_c_2dbf59c4____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_STM_Flash_c_2dbf59c4____RRX|
#line 587
|__asm___11_STM_Flash_c_2dbf59c4____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
