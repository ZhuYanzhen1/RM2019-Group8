; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\adc.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\adc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FreeRTOS -I.\MPU9250\DMP -I.\MPU9250 -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -DMPL_LOG_NDEBUG=1 -DEMPL -DMPU9250 -DEMPL_TARGET_STM32F4 --omf_browse=.\obj\adc.crf Hardware\ADC.c]
                          THUMB

                          AREA ||i.ADC1_Init||, CODE, READONLY, ALIGN=2

                  ADC1_Init PROC
;;;6      ADC_HandleTypeDef ADC1_Handler;//ADC句柄
;;;7      void ADC1_Init(void)
000000  b500              PUSH     {lr}
;;;8      {
000002  b087              SUB      sp,sp,#0x1c
;;;9      		GPIO_InitTypeDef GPIO_InitStructure;
;;;10         __HAL_RCC_ADC1_CLK_ENABLE();            //使能ADC1时钟
000004  bf00              NOP      
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
00000a  4837              LDR      r0,|L1.232|
00000c  6800              LDR      r0,[r0,#0]
00000e  f4407080          ORR      r0,r0,#0x100
000012  4935              LDR      r1,|L1.232|
000014  6008              STR      r0,[r1,#0]
000016  4608              MOV      r0,r1
000018  6800              LDR      r0,[r0,#0]
00001a  f4007080          AND      r0,r0,#0x100
00001e  9001              STR      r0,[sp,#4]
000020  bf00              NOP      
000022  bf00              NOP      
;;;11         __HAL_RCC_GPIOC_CLK_ENABLE();			//开启GPIOA时钟
000024  bf00              NOP      
000026  2000              MOVS     r0,#0
000028  9001              STR      r0,[sp,#4]
00002a  482f              LDR      r0,|L1.232|
00002c  3814              SUBS     r0,r0,#0x14
00002e  6800              LDR      r0,[r0,#0]
000030  f0400004          ORR      r0,r0,#4
000034  492c              LDR      r1,|L1.232|
000036  3914              SUBS     r1,r1,#0x14
000038  6008              STR      r0,[r1,#0]
00003a  4608              MOV      r0,r1
00003c  6800              LDR      r0,[r0,#0]
00003e  f0000004          AND      r0,r0,#4
000042  9001              STR      r0,[sp,#4]
000044  bf00              NOP      
000046  bf00              NOP      
;;;12     		__HAL_RCC_GPIOB_CLK_ENABLE();
000048  bf00              NOP      
00004a  2000              MOVS     r0,#0
00004c  9001              STR      r0,[sp,#4]
00004e  4608              MOV      r0,r1
000050  6800              LDR      r0,[r0,#0]
000052  f0400002          ORR      r0,r0,#2
000056  6008              STR      r0,[r1,#0]
000058  4608              MOV      r0,r1
00005a  6800              LDR      r0,[r0,#0]
00005c  f0000002          AND      r0,r0,#2
000060  9001              STR      r0,[sp,#4]
000062  bf00              NOP      
000064  bf00              NOP      
;;;13     		__HAL_RCC_GPIOA_CLK_ENABLE();
000066  bf00              NOP      
000068  2000              MOVS     r0,#0
00006a  9001              STR      r0,[sp,#4]
00006c  4608              MOV      r0,r1
00006e  6800              LDR      r0,[r0,#0]
000070  f0400001          ORR      r0,r0,#1
000074  6008              STR      r0,[r1,#0]
000076  4608              MOV      r0,r1
000078  6800              LDR      r0,[r0,#0]
00007a  f0000001          AND      r0,r0,#1
00007e  9001              STR      r0,[sp,#4]
000080  bf00              NOP      
000082  bf00              NOP      
;;;14     		GPIO_InitStructure.Mode=GPIO_MODE_ANALOG;
000084  2003              MOVS     r0,#3
000086  9003              STR      r0,[sp,#0xc]
;;;15     		GPIO_InitStructure.Pin=GPIO_PIN_0|GPIO_PIN_1;
000088  9002              STR      r0,[sp,#8]
;;;16     		GPIO_InitStructure.Pull=GPIO_NOPULL;
00008a  2000              MOVS     r0,#0
00008c  9004              STR      r0,[sp,#0x10]
;;;17     		GPIO_InitStructure.Speed=GPIO_SPEED_FREQ_HIGH;
00008e  2002              MOVS     r0,#2
000090  9005              STR      r0,[sp,#0x14]
;;;18     		HAL_GPIO_Init(GPIOB,&GPIO_InitStructure);
000092  a902              ADD      r1,sp,#8
000094  4815              LDR      r0,|L1.236|
000096  f7fffffe          BL       HAL_GPIO_Init
;;;19     		GPIO_InitStructure.Pin=GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
00009a  203f              MOVS     r0,#0x3f
00009c  9002              STR      r0,[sp,#8]
;;;20     		HAL_GPIO_Init(GPIOC,&GPIO_InitStructure);
00009e  a902              ADD      r1,sp,#8
0000a0  4813              LDR      r0,|L1.240|
0000a2  f7fffffe          BL       HAL_GPIO_Init
;;;21     		GPIO_InitStructure.Pin=GPIO_PIN_6;
0000a6  2040              MOVS     r0,#0x40
0000a8  9002              STR      r0,[sp,#8]
;;;22     		HAL_GPIO_Init(GPIOA,&GPIO_InitStructure);
0000aa  a902              ADD      r1,sp,#8
0000ac  4811              LDR      r0,|L1.244|
0000ae  f7fffffe          BL       HAL_GPIO_Init
;;;23         ADC1_Handler.Instance=ADC1;
0000b2  4811              LDR      r0,|L1.248|
0000b4  4911              LDR      r1,|L1.252|
0000b6  6008              STR      r0,[r1,#0]  ; ADC1_Handler
;;;24         ADC1_Handler.Init.ClockPrescaler=ADC_CLOCK_SYNC_PCLK_DIV4;   //4分频，ADCCLK=PCLK2/4=90/4=22.5MHZ
0000b8  f44f3080          MOV      r0,#0x10000
0000bc  6048              STR      r0,[r1,#4]  ; ADC1_Handler
;;;25         ADC1_Handler.Init.Resolution=ADC_RESOLUTION_12B;             //12位模式
0000be  2100              MOVS     r1,#0
0000c0  480e              LDR      r0,|L1.252|
0000c2  6081              STR      r1,[r0,#8]
;;;26         ADC1_Handler.Init.DataAlign=ADC_DATAALIGN_RIGHT;             //右对齐
0000c4  60c1              STR      r1,[r0,#0xc]
;;;27         ADC1_Handler.Init.ScanConvMode=DISABLE;                      //非扫描模式
0000c6  6101              STR      r1,[r0,#0x10]
;;;28         ADC1_Handler.Init.EOCSelection=DISABLE;                      //关闭EOC中断
0000c8  6141              STR      r1,[r0,#0x14]
;;;29         ADC1_Handler.Init.ContinuousConvMode=DISABLE;                //关闭连续转换
0000ca  6181              STR      r1,[r0,#0x18]
;;;30         ADC1_Handler.Init.NbrOfConversion=1;                         //1个转换在规则序列中 也就是只转换规则序列1 
0000cc  2101              MOVS     r1,#1
0000ce  6201              STR      r1,[r0,#0x20]
;;;31         ADC1_Handler.Init.DiscontinuousConvMode=DISABLE;             //禁止不连续采样模式
0000d0  2100              MOVS     r1,#0
0000d2  6241              STR      r1,[r0,#0x24]
;;;32         ADC1_Handler.Init.NbrOfDiscConversion=0;                     //不连续采样通道数为0
0000d4  6281              STR      r1,[r0,#0x28]
;;;33         ADC1_Handler.Init.ExternalTrigConv=ADC_SOFTWARE_START;       //软件触发
0000d6  490a              LDR      r1,|L1.256|
0000d8  62c1              STR      r1,[r0,#0x2c]
;;;34         ADC1_Handler.Init.ExternalTrigConvEdge=ADC_EXTERNALTRIGCONVEDGE_NONE;//使用软件触发
0000da  2100              MOVS     r1,#0
0000dc  6301              STR      r1,[r0,#0x30]
;;;35         ADC1_Handler.Init.DMAContinuousRequests=DISABLE;             //关闭DMA请求
0000de  61c1              STR      r1,[r0,#0x1c]
;;;36         HAL_ADC_Init(&ADC1_Handler);                                 //初始化 
0000e0  f7fffffe          BL       HAL_ADC_Init
;;;37     }
0000e4  b007              ADD      sp,sp,#0x1c
0000e6  bd00              POP      {pc}
;;;38     u16 Get_Adc(u32 ch)   
                          ENDP

                  |L1.232|
                          DCD      0x40023844
                  |L1.236|
                          DCD      0x40020400
                  |L1.240|
                          DCD      0x40020800
                  |L1.244|
                          DCD      0x40020000
                  |L1.248|
                          DCD      0x40012000
                  |L1.252|
                          DCD      ADC1_Handler
                  |L1.256|
                          DCD      0x0f000001

                          AREA ||i.Get_ADC||, CODE, READONLY, ALIGN=1

                  Get_ADC PROC
;;;52     //返回值:通道ch的times次转换结果平均值
;;;53     u16 Get_ADC(u32 ch)
000000  b570              PUSH     {r4-r6,lr}
;;;54     {
000002  4606              MOV      r6,r0
;;;55     	u32 temp_val=0;
000004  2400              MOVS     r4,#0
;;;56     	u8 t;
;;;57     	for(t=0;t<50;t++)
000006  2500              MOVS     r5,#0
000008  e005              B        |L2.22|
                  |L2.10|
;;;58     	{
;;;59     		temp_val+=Get_Adc(ch);
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       Get_Adc
000010  4404              ADD      r4,r4,r0
000012  1c68              ADDS     r0,r5,#1              ;57
000014  b2c5              UXTB     r5,r0                 ;57
                  |L2.22|
000016  2d32              CMP      r5,#0x32              ;57
000018  dbf7              BLT      |L2.10|
;;;60     		//Delayus(100);
;;;61     	}
;;;62     	return temp_val/50;
00001a  2032              MOVS     r0,#0x32
00001c  fbb4f0f0          UDIV     r0,r4,r0
000020  b280              UXTH     r0,r0
;;;63     } 
000022  bd70              POP      {r4-r6,pc}
;;;64     //得到温度值
                          ENDP


                          AREA ||i.Get_Adc||, CODE, READONLY, ALIGN=2

                  Get_Adc PROC
;;;37     }
;;;38     u16 Get_Adc(u32 ch)   
000000  b51f              PUSH     {r0-r4,lr}
;;;39     {
000002  4604              MOV      r4,r0
;;;40         ADC_ChannelConfTypeDef ADC1_ChanConf;
;;;41         ADC1_ChanConf.Channel=ch;                                   //通道
000004  9400              STR      r4,[sp,#0]
;;;42         ADC1_ChanConf.Rank=1;                                       //第1个序列，序列1
000006  2001              MOVS     r0,#1
000008  9001              STR      r0,[sp,#4]
;;;43         ADC1_ChanConf.SamplingTime=ADC_SAMPLETIME_3CYCLES;        //采样时间
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;44         ADC1_ChanConf.Offset=0;                 
00000e  9003              STR      r0,[sp,#0xc]
;;;45         HAL_ADC_ConfigChannel(&ADC1_Handler,&ADC1_ChanConf);        //通道配置
000010  4669              MOV      r1,sp
000012  4808              LDR      r0,|L3.52|
000014  f7fffffe          BL       HAL_ADC_ConfigChannel
;;;46         HAL_ADC_Start(&ADC1_Handler);                               //开启ADC
000018  4806              LDR      r0,|L3.52|
00001a  f7fffffe          BL       HAL_ADC_Start
;;;47         HAL_ADC_PollForConversion(&ADC1_Handler,10);                //轮询转换
00001e  210a              MOVS     r1,#0xa
000020  4804              LDR      r0,|L3.52|
000022  f7fffffe          BL       HAL_ADC_PollForConversion
;;;48     	  return (u16)HAL_ADC_GetValue(&ADC1_Handler);	        //返回最近一次ADC1规则组的转换结果
000026  4803              LDR      r0,|L3.52|
000028  f7fffffe          BL       HAL_ADC_GetValue
00002c  b280              UXTH     r0,r0
;;;49     }
00002e  b004              ADD      sp,sp,#0x10
000030  bd10              POP      {r4,pc}
;;;50     //获取指定通道的转换值，取times次,然后平均 
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      ADC1_Handler

                          AREA ||i.Get_Temprate||, CODE, READONLY, ALIGN=2

                  Get_Temprate PROC
;;;68     static double temperate=0;
;;;69     short Get_Temprate(void)
000000  b510              PUSH     {r4,lr}
;;;70     {
000002  ed2d8b04          VPUSH    {d8-d9}
;;;71     	adcx=Get_ADC(ADC_CHANNEL_TEMPSENSOR);//读取内部温度传感器通道,10次取平均
000006  4827              LDR      r0,|L4.164|
000008  f7fffffe          BL       Get_ADC
00000c  4926              LDR      r1,|L4.168|
00000e  6008              STR      r0,[r1,#0]  ; adcx
;;;72     	temperate=(float)adcx*(3.3/4096);		//电压值
000010  4608              MOV      r0,r1
000012  ed900a00          VLDR     s0,[r0,#0]
000016  eeb80a40          VCVT.F32.U32 s0,s0
00001a  ee100a10          VMOV     r0,s0
00001e  f7fffffe          BL       __aeabi_f2d
000022  ec410b18          VMOV     d8,r0,r1
000026  ed9f0b21          VLDR     d0,|L4.172|
00002a  ec532b10          VMOV     r2,r3,d0
00002e  f7fffffe          BL       __aeabi_dmul
000032  4a20              LDR      r2,|L4.180|
000034  c203              STM      r2!,{r0,r1}
;;;73     	temperate=(temperate-0.76)/0.0025 + 25; //转换为温度值 
000036  ed9f0b20          VLDR     d0,|L4.184|
00003a  ec532b10          VMOV     r2,r3,d0
00003e  481d              LDR      r0,|L4.180|
000040  ed900b00          VLDR     d0,[r0,#0]
000044  ec510b10          VMOV     r0,r1,d0
000048  f7fffffe          BL       __aeabi_dsub
00004c  ec410b19          VMOV     d9,r0,r1
000050  ed9f0b1b          VLDR     d0,|L4.192|
000054  ec532b10          VMOV     r2,r3,d0
000058  f7fffffe          BL       __aeabi_ddiv
00005c  ec410b18          VMOV     d8,r0,r1
000060  ed9f0b19          VLDR     d0,|L4.200|
000064  ec532b10          VMOV     r2,r3,d0
000068  f7fffffe          BL       __aeabi_dadd
00006c  4a11              LDR      r2,|L4.180|
00006e  c203              STM      r2!,{r0,r1}
;;;74     	result=temperate*=100;					//扩大100倍.
000070  ed9f0b17          VLDR     d0,|L4.208|
000074  ec532b10          VMOV     r2,r3,d0
000078  480e              LDR      r0,|L4.180|
00007a  ed900b00          VLDR     d0,[r0,#0]
00007e  ec510b10          VMOV     r0,r1,d0
000082  f7fffffe          BL       __aeabi_dmul
000086  4a0b              LDR      r2,|L4.180|
000088  ec410b18          VMOV     d8,r0,r1
00008c  c203              STM      r2!,{r0,r1}
00008e  f7fffffe          BL       __aeabi_d2iz
000092  b200              SXTH     r0,r0
000094  4910              LDR      r1,|L4.216|
000096  8008              STRH     r0,[r1,#0]
;;;75     	return result;
000098  4608              MOV      r0,r1
00009a  f9b00000          LDRSH    r0,[r0,#0]  ; result
;;;76     }
00009e  ecbd8b04          VPOP     {d8-d9}
0000a2  bd10              POP      {r4,pc}
;;;77     
                          ENDP

                  |L4.164|
                          DCD      0x10000012
                  |L4.168|
                          DCD      adcx
                  |L4.172|
0000ac  66666666          DCFD     0x3f4a666666666666 ; 0.00080566406249999996
0000b0  3f4a6666
                  |L4.180|
                          DCD      temperate
                  |L4.184|
0000b8  851eb852          DCFD     0x3fe851eb851eb852 ; 0.76000000000000001
0000bc  3fe851eb
                  |L4.192|
0000c0  47ae147b          DCFD     0x3f647ae147ae147b ; 0.0025000000000000001
0000c4  3f647ae1
                  |L4.200|
0000c8  00000000          DCFD     0x4039000000000000 ; 25
0000cc  40390000
                  |L4.208|
0000d0  00000000          DCFD     0x4059000000000000 ; 100
0000d4  40590000
                  |L4.216|
                          DCD      result

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ADC1_Handler
                          %        68

                          AREA ||.data||, DATA, ALIGN=3

                  adcx
                          DCD      0x00000000
                  result
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  temperate
000008  00000000          DCFD     0x0000000000000000 ; 0
00000c  00000000

;*** Start embedded assembler ***

#line 1 "Hardware\\ADC.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_ADC_c_c5b3b85d____REV16|
#line 388 ".\\CORE\\cmsis_armcc.h"
|__asm___5_ADC_c_c5b3b85d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_ADC_c_c5b3b85d____REVSH|
#line 402
|__asm___5_ADC_c_c5b3b85d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_ADC_c_c5b3b85d____RRX|
#line 587
|__asm___5_ADC_c_c5b3b85d____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
